import * as am4charts from "@amcharts/amcharts4/charts";
import * as am4core from "@amcharts/amcharts4/core";
import am4themes_animated from "@amcharts/amcharts4/themes/animated";
import React, { Component } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { HiOutlineArrowNarrowUp, HiOutlineCalendar, HiOutlineFilter, HiOutlineLightBulb, HiOutlineTicket } from "react-icons/hi";
import { connect } from 'react-redux';
import { crmDashboardService } from '../../apiManager/services';

class CrmDashboard extends Component {state = {funnelData: [],}

componentDidMount() {
  this.props.crmDashboardService()
  am4core.useTheme(am4themes_animated);
  am4core.addLicense("CH199714744");
  am4core.options.commercialLicense = true;
  am4core.useTheme(am4themes_animated);

  //this.showPaiChart();
  }

  componentDidUpdate(prevProps){
    let {opportunitiesList,leadsbySource}=this.props
    if(leadsbySource!==prevProps.leadsbySource){
     this.showPaiChart(leadsbySource);
    }
    if(opportunitiesList!==prevProps.opportunitiesList){
      this.showFunnel(opportunitiesList);
    }

    
  }

  showFunnel = (opportunitiesList)=>{
    
let chart = am4core.create("funnaldiv", am4charts.SlicedChart);
chart.hiddenState.properties.opacity = 0; 
chart.data = opportunitiesList;
let series = chart.series.push(new am4charts.FunnelSeries());

series.dataFields.value = "n_Percentage";
series.dataFields.category = "x_Stage";

  }
  
  showPaiChart = (leadsbySource)=>{
  

    var chart = am4core.create("chartdivs", am4charts.PieChart);
    
    var pieSeries = chart.series.push(new am4charts.PieSeries());
    pieSeries.dataFields.value = "n_Percentage";
    pieSeries.dataFields.category = "x_LeadSource";
    
    chart.innerRadius = am4core.percent(30);
    
    pieSeries.slices.template.stroke = am4core.color("#fff");
    pieSeries.slices.template.strokeWidth = 2;
    pieSeries.slices.template.strokeOpacity = 1;
    pieSeries.slices.template
      .cursorOverStyle = [
        {
          "property": "cursor",
          "value": "pointer"
        }
      ];
    
    pieSeries.alignLabels = false;
    pieSeries.labels.template.bent = true;
    pieSeries.labels.template.radius = 3;
    pieSeries.labels.template.padding(0,0,0,0);
    
    pieSeries.ticks.template.disabled = true;
    
    var shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter());
    shadow.opacity = 0;
    var hoverState = pieSeries.slices.template.states.getKey("hover"); 
    var hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter());
    hoverShadow.opacity = 0.7;
    hoverShadow.blur = 5;

    chart.data =leadsbySource;
  }

   
  render() {
    let {customerData,revenueData,leadData,performance,oppotunityData,langResource}=this.props;
     customerData = customerData?.length?customerData[0]:{};
     leadData = leadData?.length?leadData[0]:{};

     revenueData = revenueData?.length?revenueData[0]:{};
     oppotunityData = oppotunityData?.length?oppotunityData[0]:{};
     performance=performance?.length?performance:[];

        return (
      <div className="bar-chart m-4">
        <div className="row">
          {
          }

          

          <Col sm={12} className="pt-3">
            <Row>
              <Col md={12}>
             
         {/*  <Row className="pt-3 pl-3 pr-3">
                <Col md={12}>
                  <h2>Project Details</h2>
                </Col>
              </Row> */ }
            <div className="dashboard-bar ">
              <Row >
               
               
               
                <Col md={3}>
              
                <Card>
                <Col md={12} className="pt-3 pl-0" >
                <h6 className='dash card-title'  >{langResource.crm.lblLeadThisMonth}</h6></Col>
                    <Row className="card-body ht-80">
                      <Col md={4} >
                        <div className="icon bg-success">                 
                          <HiOutlineCalendar className="input-icon" />
                         
                        </div>
                      </Col>
                      <Col md={8}>
                      <h6>{leadData?.n_ThisMonth?leadData.n_ThisMonth:0}<span class="tx-success arrow-icon">
                        
                      <HiOutlineArrowNarrowUp className="input-icon" /> {leadData?.n_Percentage?leadData.n_Percentage:0 }%</span></h6>
                             <label class="pt-0 ft-12">{langResource.crm.lblLastMonthRelative } {leadData?.n_LastMonth?leadData.n_LastMonth:0 }</label>


                      </Col>
                    </Row>
                    </Card>
                </Col>



                <Col md={3} >
                <Card>
                <Col md={12} className="pt-3 pl-0" >
                <h6 className='dash card-title' >{langResource.crm.lblRevenueThisMonth}</h6></Col>
                    <Row className="card-body ht-80">
                      <Col md={4} >
                        <div className="icon bg-danger">
                          <HiOutlineLightBulb className="input-icon" />
                          
                        </div>
                      </Col>
                      <Col md={8} >
                      <h6> {revenueData?.n_ThisMonth?revenueData.n_ThisMonth:0 } <span class="tx-success arrow-icon">
                      <HiOutlineArrowNarrowUp className="input-icon" />  {revenueData?.n_Percentage?revenueData.n_Percentage:0 }%</span></h6>
                             <label class="pt-0 ft-12">{langResource.crm.lblLastMonthRelative }{revenueData?.n_LastMonth?revenueData.n_LastMonth:0 }</label>
                      </Col>
                    </Row>
                    </Card>
                </Col>
                <Col md={3}>
                <Card>
                <Col md={12} className="pt-3 pl-0" >
                <h6 className='dash card-title'  >{langResource.crm.lblOpportunitiesPipeLine}</h6></Col>
                    <Row className="card-body ht-80">
                      <Col md={4} >
                        <div className="icon bg-primary">
                          <HiOutlineFilter className="input-icon" />
                        </div>
                      </Col>
                      <Col md={8} >
                      <h6>{oppotunityData?.n_Count?oppotunityData.n_Count:0}</h6>
                        {/* <h5>{this.props?.contractAmt.length?(this.props.budgetAmt[0]?.budgetAmt).toLocaleString(undefined, {maximumFractionDigits:2,minimumFractionDigits: 2}):0.00}</h5> */}
                      </Col>
                    </Row>
                    </Card>
                </Col>


                <Col md={3}>
                <Card>
                <Col md={12} className="pt-3 pl-0" >
                <h6 className='dash card-title'  >{langResource.crm.lblCustomersThisMonth}</h6></Col>
                    <Row className="card-body ht-80">
                      <Col md={4} >
                        <div className="icon bg-warning">
                          <HiOutlineTicket className="input-icon" />
                        </div>
                      </Col>
                      <Col md={8} >
                        
                      <h6>{customerData?.n_ThisMonth?customerData.n_ThisMonth:0}<span class="tx-success arrow-icon">

                      <HiOutlineArrowNarrowUp className="input-icon" />
                        <i class="flaticon-up-arrow"></i> {customerData?.n_Percentage?customerData.n_Percentage:0 }%</span></h6>
                             <label class="pt-0 ft-12">{langResource.crm.lblLastMonthRelative } {customerData?.n_LastMonth?customerData.n_LastMonth:0 }</label>
                      </Col>
                    </Row>
                    </Card>
                </Col>


              </Row>
            </div>
           
              </Col>


          <Col sm={3} className="pt-3">
          <Card>
          <Row className="card-body ht-80">
          <Col md={12} >
          <h6 className='card-title' >{langResource.crm.lblPerformanceMonitor}</h6>
          </Col>
         
          </Row>         
          </Card>
        { performance.length > 0 ? performance.map(element => {
          return (<Card>
          <Row className="card-body ht-80">
          <Col md={9} >
          <h6 className='card-title'>{element.x_Status}</h6>
          </Col>
          <Col md={3}  >
          <h6 className='card-title'>{element.n_Count}</h6>
          </Col>
          </Row>         
          </Card>)        
        }):null}          

          


          </Col> 


          



              <Col sm={5} className="pt-3">
          <Card>
            <Row className="pt-3 pl-3 pr-3">
              <Col md={12}>
              <h6 className='card-title'>{langResource.crm.lblOpportunitiesByStage}</h6>
              </Col>
            </Row>
            <Row>
              <Col md={12}>
                <div id="funnaldiv" className="chartdiv"></div>
              </Col>
            </Row>
          </Card>
          </Col> 


          <Col sm={4} className="pt-3">
          <Card>
            <Row className="pt-3 pl-3 pr-3">
              <Col md={12}>
              <h6 className='card-title'>{langResource.crm.lblLeadsBySource}</h6>
              </Col>
            </Row>
            <Row>
              <Col md={12}>
              <div id="chartdivs" className="chartdiv"></div>
              </Col>
            </Row>
          </Card>
          </Col>



          



              
            </Row>
          </Col>
          
      </div>
      </div>
    );
  }
}
const mapStateToProps = state => ({
  company: state.authReducer.company,
  fnYearData: state.authReducer.fnYearData,
  langResource: state.langReducer.langResource,
  opportunitiesList: state.crmDashboardReducer.crmDashboardData.opportunitiesStage,
  customerData: state.crmDashboardReducer.crmDashboardData.customerData,
  leadData: state.crmDashboardReducer.crmDashboardData.leadData,
  revenueData: state.crmDashboardReducer.crmDashboardData.revenueData,
  leadsbySource: state.crmDashboardReducer.crmDashboardData.leadsbySource,
  performance: state.crmDashboardReducer.crmDashboardData.performance,
  oppotunityData: state.crmDashboardReducer.crmDashboardData.oppotunityData
  
  


})

const mapDispatchToProps = (dispatch, ownProps) => ({
  crmDashboardService: (data) => {
      return (
          dispatch(crmDashboardService(data, (err, res) => {
              
              if (!err) {

              }
          })
          )
      );
  },
})

const connectedCrmDashboard = connect(mapStateToProps, mapDispatchToProps)(CrmDashboard);
export { connectedCrmDashboard as CrmDashboard };

