using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SmartxAPI.Models
{
    public partial class SmartxContext : DbContext
    {
        public SmartxContext()
        {
        }

        public SmartxContext(DbContextOptions<SmartxContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccAccountDefaults> AccAccountDefaults { get; set; }
        public virtual DbSet<AccAccountStatement> AccAccountStatement { get; set; }
        public virtual DbSet<AccAgedPayables> AccAgedPayables { get; set; }
        public virtual DbSet<AccAgedReceivables> AccAgedReceivables { get; set; }
        public virtual DbSet<AccBankMaster> AccBankMaster { get; set; }
        public virtual DbSet<AccBranchMaster> AccBranchMaster { get; set; }
        public virtual DbSet<AccBudgeting> AccBudgeting { get; set; }
        public virtual DbSet<AccCashFlowCategory> AccCashFlowCategory { get; set; }
        public virtual DbSet<AccChequeTransaction> AccChequeTransaction { get; set; }
        public virtual DbSet<AccCompany> AccCompany { get; set; }
        public virtual DbSet<AccCompanyAttachments> AccCompanyAttachments { get; set; }
        public virtual DbSet<AccCostCentreMaster> AccCostCentreMaster { get; set; }
        public virtual DbSet<AccCostCentreTransactions> AccCostCentreTransactions { get; set; }
        public virtual DbSet<AccCountry> AccCountry { get; set; }
        public virtual DbSet<AccCurrencyMaster> AccCurrencyMaster { get; set; }
        public virtual DbSet<AccDayclosing> AccDayclosing { get; set; }
        public virtual DbSet<AccFnYear> AccFnYear { get; set; }
        public virtual DbSet<AccGroupMapping> AccGroupMapping { get; set; }
        public virtual DbSet<AccImportBank> AccImportBank { get; set; }
        public virtual DbSet<AccImportBankDetail> AccImportBankDetail { get; set; }
        public virtual DbSet<AccLedgerBalForReporting> AccLedgerBalForReporting { get; set; }
        public virtual DbSet<AccLedgerBehaviour> AccLedgerBehaviour { get; set; }
        public virtual DbSet<AccLedgerGroupCategory> AccLedgerGroupCategory { get; set; }
        public virtual DbSet<AccMappingCashFlow> AccMappingCashFlow { get; set; }
        public virtual DbSet<AccMastGroup> AccMastGroup { get; set; }
        public virtual DbSet<AccMastGroup123> AccMastGroup123 { get; set; }
        public virtual DbSet<AccMastGroupBackUp> AccMastGroupBackUp { get; set; }
        public virtual DbSet<AccMastLedger> AccMastLedger { get; set; }
        public virtual DbSet<AccMastLedger123> AccMastLedger123 { get; set; }
        public virtual DbSet<AccMastLedgerBackUp> AccMastLedgerBackUp { get; set; }
        public virtual DbSet<AccMastLedgerExcel> AccMastLedgerExcel { get; set; }
        public virtual DbSet<AccNarration> AccNarration { get; set; }
        public virtual DbSet<AccOpeningBalance> AccOpeningBalance { get; set; }
        public virtual DbSet<AccOtherInformation> AccOtherInformation { get; set; }
        public virtual DbSet<AccOtherInformationMaster> AccOtherInformationMaster { get; set; }
        public virtual DbSet<AccPandL> AccPandL { get; set; }
        public virtual DbSet<AccPaymentMethodMaster> AccPaymentMethodMaster { get; set; }
        public virtual DbSet<AccPeriod> AccPeriod { get; set; }
        public virtual DbSet<AccReconciliation> AccReconciliation { get; set; }
        public virtual DbSet<AccReconciliationDetails> AccReconciliationDetails { get; set; }
        public virtual DbSet<AccReportGroupDesc> AccReportGroupDesc { get; set; }
        public virtual DbSet<AccReportLedgerCategory> AccReportLedgerCategory { get; set; }
        public virtual DbSet<AccReportLedgerMapping> AccReportLedgerMapping { get; set; }
        public virtual DbSet<AccReportType> AccReportType { get; set; }
        public virtual DbSet<AccSessionClosing> AccSessionClosing { get; set; }
        public virtual DbSet<AccTaxCategory> AccTaxCategory { get; set; }
        public virtual DbSet<AccTaxType> AccTaxType { get; set; }
        public virtual DbSet<AccTmpOpeningBalance> AccTmpOpeningBalance { get; set; }
        public virtual DbSet<AccVoucherCcamtDefference> AccVoucherCcamtDefference { get; set; }
        public virtual DbSet<AccVoucherDetails> AccVoucherDetails { get; set; }
        public virtual DbSet<AccVoucherDetailsSegments> AccVoucherDetailsSegments { get; set; }
        public virtual DbSet<AccVoucherMaster> AccVoucherMaster { get; set; }
        public virtual DbSet<AccVoucherMasterDetails> AccVoucherMasterDetails { get; set; }
        public virtual DbSet<AccVoucherMasterDetailsSegments> AccVoucherMasterDetailsSegments { get; set; }
        public virtual DbSet<AccVoucherTypes> AccVoucherTypes { get; set; }
        public virtual DbSet<AccYearWiseLedgerSettings> AccYearWiseLedgerSettings { get; set; }
        public virtual DbSet<AlFarqanCustOpening> AlFarqanCustOpening { get; set; }
        public virtual DbSet<AlFarquanChartOfAccount> AlFarquanChartOfAccount { get; set; }
        public virtual DbSet<AlFarquanCustomer> AlFarquanCustomer { get; set; }
        public virtual DbSet<AlFarquanItem> AlFarquanItem { get; set; }
        public virtual DbSet<AlFarquanOpeningStock> AlFarquanOpeningStock { get; set; }
        public virtual DbSet<AlFarquanOpeningStockSnow> AlFarquanOpeningStockSnow { get; set; }
        public virtual DbSet<AlFarquanOpeningStockdead> AlFarquanOpeningStockdead { get; set; }
        public virtual DbSet<AlFarquanVendor> AlFarquanVendor { get; set; }
        public virtual DbSet<AlFursanItemList> AlFursanItemList { get; set; }
        public virtual DbSet<AlforqanRemainingitem> AlforqanRemainingitem { get; set; }
        public virtual DbSet<AlforqanStock> AlforqanStock { get; set; }
        public virtual DbSet<AlforqanStockMainstore> AlforqanStockMainstore { get; set; }
        public virtual DbSet<ApiTransactions> ApiTransactions { get; set; }
        public virtual DbSet<Arabic> Arabic { get; set; }
        public virtual DbSet<ArabicWords> ArabicWords { get; set; }
        public virtual DbSet<ArabicWordsFreignt> ArabicWordsFreignt { get; set; }
        public virtual DbSet<AssAssetAddlInfo> AssAssetAddlInfo { get; set; }
        public virtual DbSet<AssAssetCategory> AssAssetCategory { get; set; }
        public virtual DbSet<AssAssetMainCategory> AssAssetMainCategory { get; set; }
        public virtual DbSet<AssAssetMaster> AssAssetMaster { get; set; }
        public virtual DbSet<AssAssetStatusUpdate> AssAssetStatusUpdate { get; set; }
        public virtual DbSet<AssDepreciation> AssDepreciation { get; set; }
        public virtual DbSet<AssDepreciationMaster> AssDepreciationMaster { get; set; }
        public virtual DbSet<AssPurchaseDetails> AssPurchaseDetails { get; set; }
        public virtual DbSet<AssPurchaseMaster> AssPurchaseMaster { get; set; }
        public virtual DbSet<AssSalesDetails> AssSalesDetails { get; set; }
        public virtual DbSet<AssSalesMaster> AssSalesMaster { get; set; }
        public virtual DbSet<AssSuspension> AssSuspension { get; set; }
        public virtual DbSet<AssTransactions> AssTransactions { get; set; }
        public virtual DbSet<AssTransfer> AssTransfer { get; set; }
        public virtual DbSet<CharleEmployeeList> CharleEmployeeList { get; set; }
        public virtual DbSet<CharleStudentList> CharleStudentList { get; set; }
        public virtual DbSet<ChartOfAccount> ChartOfAccount { get; set; }
        public virtual DbSet<ChartOfAccount2> ChartOfAccount2 { get; set; }
        public virtual DbSet<Class> Class { get; set; }
        public virtual DbSet<ClassType> ClassType { get; set; }
        public virtual DbSet<ConvBranch> ConvBranch { get; set; }
        public virtual DbSet<ConvCustomer> ConvCustomer { get; set; }
        public virtual DbSet<ConvEmployeeList> ConvEmployeeList { get; set; }
        public virtual DbSet<ConvItemList> ConvItemList { get; set; }
        public virtual DbSet<ConvLocation> ConvLocation { get; set; }
        public virtual DbSet<ConvSql> ConvSql { get; set; }
        public virtual DbSet<ConvStudentList> ConvStudentList { get; set; }
        public virtual DbSet<ConvSupplier> ConvSupplier { get; set; }
        public virtual DbSet<CorClient> CorClient { get; set; }
        public virtual DbSet<CorCorrespondence> CorCorrespondence { get; set; }
        public virtual DbSet<CorCorrespondenceDetails> CorCorrespondenceDetails { get; set; }
        public virtual DbSet<DaoItemConv> DaoItemConv { get; set; }
        public virtual DbSet<DaoPaymentDetail> DaoPaymentDetail { get; set; }
        public virtual DbSet<DaoVacationDetail> DaoVacationDetail { get; set; }
        public virtual DbSet<DayClosingRpt> DayClosingRpt { get; set; }
        public virtual DbSet<Division> Division { get; set; }
        public virtual DbSet<DiyarAddCustomer> DiyarAddCustomer { get; set; }
        public virtual DbSet<DiyarAssetList> DiyarAssetList { get; set; }
        public virtual DbSet<DiyarCustomerAsset> DiyarCustomerAsset { get; set; }
        public virtual DbSet<DiyarCustomerOpbal> DiyarCustomerOpbal { get; set; }
        public virtual DbSet<DmsMasterFiles> DmsMasterFiles { get; set; }
        public virtual DbSet<DmsMasterFolder> DmsMasterFolder { get; set; }
        public virtual DbSet<DmsReminderCategory> DmsReminderCategory { get; set; }
        public virtual DbSet<DmsReminderCategoryDetails> DmsReminderCategoryDetails { get; set; }
        public virtual DbSet<DmsScreenAttachments> DmsScreenAttachments { get; set; }
        public virtual DbSet<DmsScreenDefaults> DmsScreenDefaults { get; set; }
        public virtual DbSet<EducareChartOfAccount> EducareChartOfAccount { get; set; }
        public virtual DbSet<FfItemAr> FfItemAr { get; set; }
        public virtual DbSet<FfProductList> FfProductList { get; set; }
        public virtual DbSet<FfwAirport> FfwAirport { get; set; }
        public virtual DbSet<FfwConsingee> FfwConsingee { get; set; }
        public virtual DbSet<FfwFlightMaster> FfwFlightMaster { get; set; }
        public virtual DbSet<FfwGenDefaults> FfwGenDefaults { get; set; }
        public virtual DbSet<FfwInvoiceMaster> FfwInvoiceMaster { get; set; }
        public virtual DbSet<FfwInvoicePurchaseDetail> FfwInvoicePurchaseDetail { get; set; }
        public virtual DbSet<FfwInvoiceSaleDetail> FfwInvoiceSaleDetail { get; set; }
        public virtual DbSet<FfwItem> FfwItem { get; set; }
        public virtual DbSet<FfwItemCategory> FfwItemCategory { get; set; }
        public virtual DbSet<FfwItemMaster> FfwItemMaster { get; set; }
        public virtual DbSet<FfwManifest> FfwManifest { get; set; }
        public virtual DbSet<FfwManifestDetails> FfwManifestDetails { get; set; }
        public virtual DbSet<FfwPriceList> FfwPriceList { get; set; }
        public virtual DbSet<FfwPriceListDetails> FfwPriceListDetails { get; set; }
        public virtual DbSet<FfwQuotationMaster> FfwQuotationMaster { get; set; }
        public virtual DbSet<FfwQuotationPurchaseDetail> FfwQuotationPurchaseDetail { get; set; }
        public virtual DbSet<FfwQuotationSaleDetail> FfwQuotationSaleDetail { get; set; }
        public virtual DbSet<FfwSalesExecutiveRpt> FfwSalesExecutiveRpt { get; set; }
        public virtual DbSet<FfwShipper> FfwShipper { get; set; }
        public virtual DbSet<FingerPrintUser> FingerPrintUser { get; set; }
        public virtual DbSet<FirstFocusBank> FirstFocusBank { get; set; }
        public virtual DbSet<FirstFocusCustomer> FirstFocusCustomer { get; set; }
        public virtual DbSet<FirstFocusDepartment> FirstFocusDepartment { get; set; }
        public virtual DbSet<FirstFocusEmployee> FirstFocusEmployee { get; set; }
        public virtual DbSet<FirstFocusItem> FirstFocusItem { get; set; }
        public virtual DbSet<FirstFocusLotExpiry> FirstFocusLotExpiry { get; set; }
        public virtual DbSet<FirstFocusPosition> FirstFocusPosition { get; set; }
        public virtual DbSet<FirstFocusVendor> FirstFocusVendor { get; set; }
        public virtual DbSet<FirstFocuzChartOfAccount> FirstFocuzChartOfAccount { get; set; }
        public virtual DbSet<GenActionStatus> GenActionStatus { get; set; }
        public virtual DbSet<GenApprovalCodes> GenApprovalCodes { get; set; }
        public virtual DbSet<GenApprovalCodesDetails> GenApprovalCodesDetails { get; set; }
        public virtual DbSet<GenApprovalStatus> GenApprovalStatus { get; set; }
        public virtual DbSet<GenBackupType> GenBackupType { get; set; }
        public virtual DbSet<GenConfirmation> GenConfirmation { get; set; }
        public virtual DbSet<GenDefaults> GenDefaults { get; set; }
        public virtual DbSet<GenFollowUp> GenFollowUp { get; set; }
        public virtual DbSet<GenLatestDb> GenLatestDb { get; set; }
        public virtual DbSet<GenLatestLoginId> GenLatestLoginId { get; set; }
        public virtual DbSet<GenLoginDetails> GenLoginDetails { get; set; }
        public virtual DbSet<GenLookupTable> GenLookupTable { get; set; }
        public virtual DbSet<GenMailDetails> GenMailDetails { get; set; }
        public virtual DbSet<GenMsgTemplets> GenMsgTemplets { get; set; }
        public virtual DbSet<GenOnlineUplodeInterface> GenOnlineUplodeInterface { get; set; }
        public virtual DbSet<GenPaymentRequestConfig> GenPaymentRequestConfig { get; set; }
        public virtual DbSet<GenReminder> GenReminder { get; set; }
        public virtual DbSet<GenReminderSettings> GenReminderSettings { get; set; }
        public virtual DbSet<GenSettings> GenSettings { get; set; }
        public virtual DbSet<GenStatus> GenStatus { get; set; }
        public virtual DbSet<GenStatusApproval> GenStatusApproval { get; set; }
        public virtual DbSet<GenSystemSettings> GenSystemSettings { get; set; }
        public virtual DbSet<GenUsefulLinks> GenUsefulLinks { get; set; }
        public virtual DbSet<GtelAssetTl> GtelAssetTl { get; set; }
        public virtual DbSet<IdcEntry> IdcEntry { get; set; }
        public virtual DbSet<IdcEventMaster> IdcEventMaster { get; set; }
        public virtual DbSet<IdcLocationMaster> IdcLocationMaster { get; set; }
        public virtual DbSet<InvAmountSplitCategory> InvAmountSplitCategory { get; set; }
        public virtual DbSet<InvAmountSplitType> InvAmountSplitType { get; set; }
        public virtual DbSet<InvAssembly> InvAssembly { get; set; }
        public virtual DbSet<InvAssemblyDetails> InvAssemblyDetails { get; set; }
        public virtual DbSet<InvAssemblyStockWise> InvAssemblyStockWise { get; set; }
        public virtual DbSet<InvAssetStock> InvAssetStock { get; set; }
        public virtual DbSet<InvAttachmentCategory> InvAttachmentCategory { get; set; }
        public virtual DbSet<InvAutoSaveSettings> InvAutoSaveSettings { get; set; }
        public virtual DbSet<InvBalanceAdjustmentMaster> InvBalanceAdjustmentMaster { get; set; }
        public virtual DbSet<InvBalanceAdjustmentMasterDetails> InvBalanceAdjustmentMasterDetails { get; set; }
        public virtual DbSet<InvBarcodeFields> InvBarcodeFields { get; set; }
        public virtual DbSet<InvBarcodeTemplate> InvBarcodeTemplate { get; set; }
        public virtual DbSet<InvBarcodeTemplateDetails> InvBarcodeTemplateDetails { get; set; }
        public virtual DbSet<InvBeneficiary> InvBeneficiary { get; set; }
        public virtual DbSet<InvCostCentreSaveDraft> InvCostCentreSaveDraft { get; set; }
        public virtual DbSet<InvCostCentreTransactions> InvCostCentreTransactions { get; set; }
        public virtual DbSet<InvCrmdetails> InvCrmdetails { get; set; }
        public virtual DbSet<InvCrmmaster> InvCrmmaster { get; set; }
        public virtual DbSet<InvCustomer> InvCustomer { get; set; }
        public virtual DbSet<InvCustomerDiscount> InvCustomerDiscount { get; set; }
        public virtual DbSet<InvCustomerDiscountMaster> InvCustomerDiscountMaster { get; set; }
        public virtual DbSet<InvCustomerProjects> InvCustomerProjects { get; set; }
        public virtual DbSet<InvCustomerStatement> InvCustomerStatement { get; set; }
        public virtual DbSet<InvCustomerType> InvCustomerType { get; set; }
        public virtual DbSet<InvDeliveryDispatch> InvDeliveryDispatch { get; set; }
        public virtual DbSet<InvDeliveryDispatchDetails> InvDeliveryDispatchDetails { get; set; }
        public virtual DbSet<InvDeliveryNote> InvDeliveryNote { get; set; }
        public virtual DbSet<InvDeliveryNoteDetails> InvDeliveryNoteDetails { get; set; }
        public virtual DbSet<InvDepartment> InvDepartment { get; set; }
        public virtual DbSet<InvDiscountSettings> InvDiscountSettings { get; set; }
        public virtual DbSet<InvDispatchReturn> InvDispatchReturn { get; set; }
        public virtual DbSet<InvDispatchReturnDetails> InvDispatchReturnDetails { get; set; }
        public virtual DbSet<InvFfwSalesReceipt> InvFfwSalesReceipt { get; set; }
        public virtual DbSet<InvInvoiceCounter> InvInvoiceCounter { get; set; }
        public virtual DbSet<InvInvoiceCounterDeleted> InvInvoiceCounterDeleted { get; set; }
        public virtual DbSet<InvItemBrand> InvItemBrand { get; set; }
        public virtual DbSet<InvItemCategory> InvItemCategory { get; set; }
        public virtual DbSet<InvItemClass> InvItemClass { get; set; }
        public virtual DbSet<InvItemDepartment> InvItemDepartment { get; set; }
        public virtual DbSet<InvItemDetails> InvItemDetails { get; set; }
        public virtual DbSet<InvItemLength> InvItemLength { get; set; }
        public virtual DbSet<InvItemManufacturer> InvItemManufacturer { get; set; }
        public virtual DbSet<InvItemMaster> InvItemMaster { get; set; }
        public virtual DbSet<InvItemMasterWhlink> InvItemMasterWhlink { get; set; }
        public virtual DbSet<InvItemPriceMaster> InvItemPriceMaster { get; set; }
        public virtual DbSet<InvItemUnit> InvItemUnit { get; set; }
        public virtual DbSet<InvJwlItemType> InvJwlItemType { get; set; }
        public virtual DbSet<InvJwlPurchase> InvJwlPurchase { get; set; }
        public virtual DbSet<InvJwlPurchaseDetails> InvJwlPurchaseDetails { get; set; }
        public virtual DbSet<InvJwlRateMaster> InvJwlRateMaster { get; set; }
        public virtual DbSet<InvLocation> InvLocation { get; set; }
        public virtual DbSet<InvLoyaltyPointMaster> InvLoyaltyPointMaster { get; set; }
        public virtual DbSet<InvLoyaltyPointOut> InvLoyaltyPointOut { get; set; }
        public virtual DbSet<InvMaterialDispatch> InvMaterialDispatch { get; set; }
        public virtual DbSet<InvMaterialDispatchDetails> InvMaterialDispatchDetails { get; set; }
        public virtual DbSet<InvMeetingTracker> InvMeetingTracker { get; set; }
        public virtual DbSet<InvMeetingTrackerCategory> InvMeetingTrackerCategory { get; set; }
        public virtual DbSet<InvMeetingTrackerDetails> InvMeetingTrackerDetails { get; set; }
        public virtual DbSet<InvMonthlyProcess> InvMonthlyProcess { get; set; }
        public virtual DbSet<InvMonthlyProcessDetails> InvMonthlyProcessDetails { get; set; }
        public virtual DbSet<InvMrn> InvMrn { get; set; }
        public virtual DbSet<InvMrndetails> InvMrndetails { get; set; }
        public virtual DbSet<InvMrnfreights> InvMrnfreights { get; set; }
        public virtual DbSet<InvOpenStockMaster> InvOpenStockMaster { get; set; }
        public virtual DbSet<InvOpportunities> InvOpportunities { get; set; }
        public virtual DbSet<InvParticipateComp> InvParticipateComp { get; set; }
        public virtual DbSet<InvPayReceipt> InvPayReceipt { get; set; }
        public virtual DbSet<InvPayReceiptDetails> InvPayReceiptDetails { get; set; }
        public virtual DbSet<InvPayReceiptSettlement> InvPayReceiptSettlement { get; set; }
        public virtual DbSet<InvPayReceiptSettlementDetails> InvPayReceiptSettlementDetails { get; set; }
        public virtual DbSet<InvPaymentDetails> InvPaymentDetails { get; set; }
        public virtual DbSet<InvPaymentRequest> InvPaymentRequest { get; set; }
        public virtual DbSet<InvPaymentStatus> InvPaymentStatus { get; set; }
        public virtual DbSet<InvPrePayment> InvPrePayment { get; set; }
        public virtual DbSet<InvPrePaymentCategory> InvPrePaymentCategory { get; set; }
        public virtual DbSet<InvPrePaymentSchedule> InvPrePaymentSchedule { get; set; }
        public virtual DbSet<InvPrePaymentScheduleMaster> InvPrePaymentScheduleMaster { get; set; }
        public virtual DbSet<InvPreviousbalance> InvPreviousbalance { get; set; }
        public virtual DbSet<InvPriceLevel> InvPriceLevel { get; set; }
        public virtual DbSet<InvProductionCost> InvProductionCost { get; set; }
        public virtual DbSet<InvProjectReportDescription> InvProjectReportDescription { get; set; }
        public virtual DbSet<InvPrs> InvPrs { get; set; }
        public virtual DbSet<InvPrsdetails> InvPrsdetails { get; set; }
        public virtual DbSet<InvPurchase> InvPurchase { get; set; }
        public virtual DbSet<InvPurchaseCategory> InvPurchaseCategory { get; set; }
        public virtual DbSet<InvPurchaseDetails> InvPurchaseDetails { get; set; }
        public virtual DbSet<InvPurchaseFreightReason> InvPurchaseFreightReason { get; set; }
        public virtual DbSet<InvPurchaseFreights> InvPurchaseFreights { get; set; }
        public virtual DbSet<InvPurchaseItemTimeSheet> InvPurchaseItemTimeSheet { get; set; }
        public virtual DbSet<InvPurchaseOrder> InvPurchaseOrder { get; set; }
        public virtual DbSet<InvPurchaseOrderDetails> InvPurchaseOrderDetails { get; set; }
        public virtual DbSet<InvPurchasePaymentStatus> InvPurchasePaymentStatus { get; set; }
        public virtual DbSet<InvPurchaseReturn> InvPurchaseReturn { get; set; }
        public virtual DbSet<InvPurchaseReturnDetails> InvPurchaseReturnDetails { get; set; }
        public virtual DbSet<InvPurchaseReturnMaster> InvPurchaseReturnMaster { get; set; }
        public virtual DbSet<InvPurchaseSaveDraft> InvPurchaseSaveDraft { get; set; }
        public virtual DbSet<InvReceivableStock> InvReceivableStock { get; set; }
        public virtual DbSet<InvReceivableStockDetails> InvReceivableStockDetails { get; set; }
        public virtual DbSet<InvRequestQuotation> InvRequestQuotation { get; set; }
        public virtual DbSet<InvRequestQuotationDetails> InvRequestQuotationDetails { get; set; }
        public virtual DbSet<InvRequestQuotationRpt> InvRequestQuotationRpt { get; set; }
        public virtual DbSet<InvRfqgenerating> InvRfqgenerating { get; set; }
        public virtual DbSet<InvRfqgeneratingDetails> InvRfqgeneratingDetails { get; set; }
        public virtual DbSet<InvSaleAmountDetails> InvSaleAmountDetails { get; set; }
        public virtual DbSet<InvSales> InvSales { get; set; }
        public virtual DbSet<InvSalesBudget> InvSalesBudget { get; set; }
        public virtual DbSet<InvSalesDetails> InvSalesDetails { get; set; }
        public virtual DbSet<InvSalesItemTimeSheet> InvSalesItemTimeSheet { get; set; }
        public virtual DbSet<InvSalesNegativeStock> InvSalesNegativeStock { get; set; }
        public virtual DbSet<InvSalesOrder> InvSalesOrder { get; set; }
        public virtual DbSet<InvSalesOrderDetails> InvSalesOrderDetails { get; set; }
        public virtual DbSet<InvSalesOrderDistribution> InvSalesOrderDistribution { get; set; }
        public virtual DbSet<InvSalesQuotation> InvSalesQuotation { get; set; }
        public virtual DbSet<InvSalesQuotationDetails> InvSalesQuotationDetails { get; set; }
        public virtual DbSet<InvSalesReturn> InvSalesReturn { get; set; }
        public virtual DbSet<InvSalesReturnDetails> InvSalesReturnDetails { get; set; }
        public virtual DbSet<InvSalesReturnMaster> InvSalesReturnMaster { get; set; }
        public virtual DbSet<InvSalesReturnStockWise> InvSalesReturnStockWise { get; set; }
        public virtual DbSet<InvSalesman> InvSalesman { get; set; }
        public virtual DbSet<InvServiceAccessories> InvServiceAccessories { get; set; }
        public virtual DbSet<InvServiceBooking> InvServiceBooking { get; set; }
        public virtual DbSet<InvServiceContract> InvServiceContract { get; set; }
        public virtual DbSet<InvServiceSheetDetails> InvServiceSheetDetails { get; set; }
        public virtual DbSet<InvServiceSheetMaster> InvServiceSheetMaster { get; set; }
        public virtual DbSet<InvSis> InvSis { get; set; }
        public virtual DbSet<InvSisdetails> InvSisdetails { get; set; }
        public virtual DbSet<InvSrn> InvSrn { get; set; }
        public virtual DbSet<InvSrndetails> InvSrndetails { get; set; }
        public virtual DbSet<InvStockAdjstmentReason> InvStockAdjstmentReason { get; set; }
        public virtual DbSet<InvStockAdjustment> InvStockAdjustment { get; set; }
        public virtual DbSet<InvStockAdjustmentDetails> InvStockAdjustmentDetails { get; set; }
        public virtual DbSet<InvStockMaster> InvStockMaster { get; set; }
        public virtual DbSet<InvStockMasterBarcode> InvStockMasterBarcode { get; set; }
        public virtual DbSet<InvStockMasterImei> InvStockMasterImei { get; set; }
        public virtual DbSet<InvStockOut> InvStockOut { get; set; }
        public virtual DbSet<InvStockOutByTransfer> InvStockOutByTransfer { get; set; }
        public virtual DbSet<InvStockStatusRpt> InvStockStatusRpt { get; set; }
        public virtual DbSet<InvTaxCategoryType> InvTaxCategoryType { get; set; }
        public virtual DbSet<InvTaxReportDescription> InvTaxReportDescription { get; set; }
        public virtual DbSet<InvTerminal> InvTerminal { get; set; }
        public virtual DbSet<InvTerminalDetails> InvTerminalDetails { get; set; }
        public virtual DbSet<InvTerms> InvTerms { get; set; }
        public virtual DbSet<InvTransType> InvTransType { get; set; }
        public virtual DbSet<InvTransferStock> InvTransferStock { get; set; }
        public virtual DbSet<InvTransferStockDetails> InvTransferStockDetails { get; set; }
        public virtual DbSet<InvTruckMaster> InvTruckMaster { get; set; }
        public virtual DbSet<InvVendor> InvVendor { get; set; }
        public virtual DbSet<InvVendorAttachments> InvVendorAttachments { get; set; }
        public virtual DbSet<InvVendorProjects> InvVendorProjects { get; set; }
        public virtual DbSet<InvVendorRequest> InvVendorRequest { get; set; }
        public virtual DbSet<InvVendorRequestDetails> InvVendorRequestDetails { get; set; }
        public virtual DbSet<InvVendorServiceSheet> InvVendorServiceSheet { get; set; }
        public virtual DbSet<InvVendorServiceSheetDetails> InvVendorServiceSheetDetails { get; set; }
        public virtual DbSet<InvVendorStatement> InvVendorStatement { get; set; }
        public virtual DbSet<InvWarehouseMaster> InvWarehouseMaster { get; set; }
        public virtual DbSet<InvWarranty> InvWarranty { get; set; }
        public virtual DbSet<InvWorkFlowCatalog> InvWorkFlowCatalog { get; set; }
        public virtual DbSet<ItemMinPrice> ItemMinPrice { get; set; }
        public virtual DbSet<JeelArabicEnglish> JeelArabicEnglish { get; set; }
        public virtual DbSet<JeelArabicEnglishMastgroup> JeelArabicEnglishMastgroup { get; set; }
        public virtual DbSet<JwlColour> JwlColour { get; set; }
        public virtual DbSet<JwlKarat> JwlKarat { get; set; }
        public virtual DbSet<JwlPurchaseFreights> JwlPurchaseFreights { get; set; }
        public virtual DbSet<JwlPurchaseReturnDetails> JwlPurchaseReturnDetails { get; set; }
        public virtual DbSet<JwlPurchaseReturnMaster> JwlPurchaseReturnMaster { get; set; }
        public virtual DbSet<JwlSales> JwlSales { get; set; }
        public virtual DbSet<JwlSalesDetails> JwlSalesDetails { get; set; }
        public virtual DbSet<JwlSalesReturnDetails> JwlSalesReturnDetails { get; set; }
        public virtual DbSet<JwlSalesReturnMaster> JwlSalesReturnMaster { get; set; }
        public virtual DbSet<JwlSalesScrapReceived> JwlSalesScrapReceived { get; set; }
        public virtual DbSet<JwlStockTransfer> JwlStockTransfer { get; set; }
        public virtual DbSet<JwlStockTransferDetails> JwlStockTransferDetails { get; set; }
        public virtual DbSet<KesClassDivision> KesClassDivision { get; set; }
        public virtual DbSet<KesEmployeeList> KesEmployeeList { get; set; }
        public virtual DbSet<KesStudentList> KesStudentList { get; set; }
        public virtual DbSet<LanLanguage> LanLanguage { get; set; }
        public virtual DbSet<LanMultiLingual> LanMultiLingual { get; set; }
        public virtual DbSet<LogApprovalProcess> LogApprovalProcess { get; set; }
        public virtual DbSet<LogGenReminder> LogGenReminder { get; set; }
        public virtual DbSet<LogInvSales> LogInvSales { get; set; }
        public virtual DbSet<LogInvSalesDetails> LogInvSalesDetails { get; set; }
        public virtual DbSet<LogRecruitment> LogRecruitment { get; set; }
        public virtual DbSet<LogScreenActivity> LogScreenActivity { get; set; }
        public virtual DbSet<LogTransactions> LogTransactions { get; set; }
        public virtual DbSet<MasterFee> MasterFee { get; set; }
        public virtual DbSet<MayaseemItemList> MayaseemItemList { get; set; }
        public virtual DbSet<MigBatchStock> MigBatchStock { get; set; }
        public virtual DbSet<MigCustomer> MigCustomer { get; set; }
        public virtual DbSet<MigCustomerList> MigCustomerList { get; set; }
        public virtual DbSet<MigDrugmaster> MigDrugmaster { get; set; }
        public virtual DbSet<MigEmployeeList> MigEmployeeList { get; set; }
        public virtual DbSet<MigItemList> MigItemList { get; set; }
        public virtual DbSet<MigItemListSmeh> MigItemListSmeh { get; set; }
        public virtual DbSet<MigLotExpiryItem> MigLotExpiryItem { get; set; }
        public virtual DbSet<MigProductList> MigProductList { get; set; }
        public virtual DbSet<MigProductsSmeh> MigProductsSmeh { get; set; }
        public virtual DbSet<MigStudentList> MigStudentList { get; set; }
        public virtual DbSet<MigStudentListCharle> MigStudentListCharle { get; set; }
        public virtual DbSet<MigStudentOpening> MigStudentOpening { get; set; }
        public virtual DbSet<MigTempBalanceSmeh> MigTempBalanceSmeh { get; set; }
        public virtual DbSet<MigVendor> MigVendor { get; set; }
        public virtual DbSet<MigVendorList> MigVendorList { get; set; }
        public virtual DbSet<MnpDeMobilization> MnpDeMobilization { get; set; }
        public virtual DbSet<MnpDeMobilizationDetails> MnpDeMobilizationDetails { get; set; }
        public virtual DbSet<MnpEmpPriceSettings> MnpEmpPriceSettings { get; set; }
        public virtual DbSet<MnpEmpPriceSettingsDetails> MnpEmpPriceSettingsDetails { get; set; }
        public virtual DbSet<MnpEmployeeMaintenance> MnpEmployeeMaintenance { get; set; }
        public virtual DbSet<MnpInvoice> MnpInvoice { get; set; }
        public virtual DbSet<MnpInvoiceDetails> MnpInvoiceDetails { get; set; }
        public virtual DbSet<MnpInvoicePaycodes> MnpInvoicePaycodes { get; set; }
        public virtual DbSet<MnpMobilization> MnpMobilization { get; set; }
        public virtual DbSet<MnpMobilizationDetails> MnpMobilizationDetails { get; set; }
        public virtual DbSet<MnpMobilizationDetailsDisp> MnpMobilizationDetailsDisp { get; set; }
        public virtual DbSet<MnpMobilizationDisp> MnpMobilizationDisp { get; set; }
        public virtual DbSet<Name> Name { get; set; }
        public virtual DbSet<OlivoProductList> OlivoProductList { get; set; }
        public virtual DbSet<OlivoProductListFf> OlivoProductListFf { get; set; }
        public virtual DbSet<OlivoProductListSmeh> OlivoProductListSmeh { get; set; }
        public virtual DbSet<OlivoProductListSmehOrg> OlivoProductListSmehOrg { get; set; }
        public virtual DbSet<OlivoStudentList> OlivoStudentList { get; set; }
        public virtual DbSet<OptPrescription> OptPrescription { get; set; }
        public virtual DbSet<Parent> Parent { get; set; }
        public virtual DbSet<PayAccountSetup> PayAccountSetup { get; set; }
        public virtual DbSet<PayAddOrDedImport> PayAddOrDedImport { get; set; }
        public virtual DbSet<PayAddOrDedImportDetails> PayAddOrDedImportDetails { get; set; }
        public virtual DbSet<PayAddOrDedImportFieldDetails> PayAddOrDedImportFieldDetails { get; set; }
        public virtual DbSet<PayAdditionalWorkingDays> PayAdditionalWorkingDays { get; set; }
        public virtual DbSet<PayAgent> PayAgent { get; set; }
        public virtual DbSet<PayAgentMaster> PayAgentMaster { get; set; }
        public virtual DbSet<PayAmortization> PayAmortization { get; set; }
        public virtual DbSet<PayAmortizationDetails> PayAmortizationDetails { get; set; }
        public virtual DbSet<PayAnytimeRequest> PayAnytimeRequest { get; set; }
        public virtual DbSet<PayContactDetails> PayContactDetails { get; set; }
        public virtual DbSet<PayCourse> PayCourse { get; set; }
        public virtual DbSet<PayDepartment> PayDepartment { get; set; }
        public virtual DbSet<PayDepartmentSettings> PayDepartmentSettings { get; set; }
        public virtual DbSet<PayDisciplinaryAction> PayDisciplinaryAction { get; set; }
        public virtual DbSet<PayEmpAccruls> PayEmpAccruls { get; set; }
        public virtual DbSet<PayEmpAddlInfo> PayEmpAddlInfo { get; set; }
        public virtual DbSet<PayEmpAnyRequest> PayEmpAnyRequest { get; set; }
        public virtual DbSet<PayEmpEvaluation> PayEmpEvaluation { get; set; }
        public virtual DbSet<PayEmpEvaluationDetails> PayEmpEvaluationDetails { get; set; }
        public virtual DbSet<PayEmpEvaluationSettings> PayEmpEvaluationSettings { get; set; }
        public virtual DbSet<PayEmpEvaluationSettingsDetails> PayEmpEvaluationSettingsDetails { get; set; }
        public virtual DbSet<PayEmpEvaluators> PayEmpEvaluators { get; set; }
        public virtual DbSet<PayEmployee> PayEmployee { get; set; }
        public virtual DbSet<PayEmployeeAlerts> PayEmployeeAlerts { get; set; }
        public virtual DbSet<PayEmployeeAttachments> PayEmployeeAttachments { get; set; }
        public virtual DbSet<PayEmployeeClearance> PayEmployeeClearance { get; set; }
        public virtual DbSet<PayEmployeeClearanceDetails> PayEmployeeClearanceDetails { get; set; }
        public virtual DbSet<PayEmployeeClearanceSettings> PayEmployeeClearanceSettings { get; set; }
        public virtual DbSet<PayEmployeeClearanceSettingsDetails> PayEmployeeClearanceSettingsDetails { get; set; }
        public virtual DbSet<PayEmployeeDependence> PayEmployeeDependence { get; set; }
        public virtual DbSet<PayEmployeeEducation> PayEmployeeEducation { get; set; }
        public virtual DbSet<PayEmployeeGroup> PayEmployeeGroup { get; set; }
        public virtual DbSet<PayEmployeeLog> PayEmployeeLog { get; set; }
        public virtual DbSet<PayEmployeePayHistory> PayEmployeePayHistory { get; set; }
        public virtual DbSet<PayEmployeePayment> PayEmployeePayment { get; set; }
        public virtual DbSet<PayEmployeePaymentDetails> PayEmployeePaymentDetails { get; set; }
        public virtual DbSet<PayEmployeeRequestType> PayEmployeeRequestType { get; set; }
        public virtual DbSet<PayEmployeeStatus> PayEmployeeStatus { get; set; }
        public virtual DbSet<PayEmploymentHistory> PayEmploymentHistory { get; set; }
        public virtual DbSet<PayEndOfServiceSdetails> PayEndOfServiceSdetails { get; set; }
        public virtual DbSet<PayEndOfservice> PayEndOfservice { get; set; }
        public virtual DbSet<PayGosipayment> PayGosipayment { get; set; }
        public virtual DbSet<PayGosipaymentDetails> PayGosipaymentDetails { get; set; }
        public virtual DbSet<PayGosiprocessing> PayGosiprocessing { get; set; }
        public virtual DbSet<PayGosiprocessingDetails> PayGosiprocessingDetails { get; set; }
        public virtual DbSet<PayHealthSafety> PayHealthSafety { get; set; }
        public virtual DbSet<PayInsuranceCategory> PayInsuranceCategory { get; set; }
        public virtual DbSet<PayInsuranceSettings> PayInsuranceSettings { get; set; }
        public virtual DbSet<PayInsuranceSettingsDetails> PayInsuranceSettingsDetails { get; set; }
        public virtual DbSet<PayLoanClose> PayLoanClose { get; set; }
        public virtual DbSet<PayLoanIssue> PayLoanIssue { get; set; }
        public virtual DbSet<PayLoanIssueDetails> PayLoanIssueDetails { get; set; }
        public virtual DbSet<PayMedicalInsurance> PayMedicalInsurance { get; set; }
        public virtual DbSet<PayMedicalInsuranceAddition> PayMedicalInsuranceAddition { get; set; }
        public virtual DbSet<PayMedicalInsuranceAdditionDetails> PayMedicalInsuranceAdditionDetails { get; set; }
        public virtual DbSet<PayMedicalInsuranceDeletion> PayMedicalInsuranceDeletion { get; set; }
        public virtual DbSet<PayMedicalInsuranceDeletionDetails> PayMedicalInsuranceDeletionDetails { get; set; }
        public virtual DbSet<PayMonthLeaveRpt> PayMonthLeaveRpt { get; set; }
        public virtual DbSet<PayMonthlyAddOrDed> PayMonthlyAddOrDed { get; set; }
        public virtual DbSet<PayMonthlyAddOrDedDetails> PayMonthlyAddOrDedDetails { get; set; }
        public virtual DbSet<PayNationality> PayNationality { get; set; }
        public virtual DbSet<PayOvertimeRequestDetail> PayOvertimeRequestDetail { get; set; }
        public virtual DbSet<PayOvertimeRequestMaster> PayOvertimeRequestMaster { get; set; }
        public virtual DbSet<PayPayCalulationMethod> PayPayCalulationMethod { get; set; }
        public virtual DbSet<PayPayCodeAdjustment> PayPayCodeAdjustment { get; set; }
        public virtual DbSet<PayPayCodeAdjustmentDetails> PayPayCodeAdjustmentDetails { get; set; }
        public virtual DbSet<PayPayCodeGroupDetails> PayPayCodeGroupDetails { get; set; }
        public virtual DbSet<PayPayCodeGroupMaster> PayPayCodeGroupMaster { get; set; }
        public virtual DbSet<PayPayCodeItemwiseMapping> PayPayCodeItemwiseMapping { get; set; }
        public virtual DbSet<PayPayCodeItemwiseMappingDetails> PayPayCodeItemwiseMappingDetails { get; set; }
        public virtual DbSet<PayPayFormulae> PayPayFormulae { get; set; }
        public virtual DbSet<PayPayHistoryMaster> PayPayHistoryMaster { get; set; }
        public virtual DbSet<PayPayMaster> PayPayMaster { get; set; }
        public virtual DbSet<PayPaySetup> PayPaySetup { get; set; }
        public virtual DbSet<PayPayType> PayPayType { get; set; }
        public virtual DbSet<PayPaymentDetails> PayPaymentDetails { get; set; }
        public virtual DbSet<PayPaymentMaster> PayPaymentMaster { get; set; }
        public virtual DbSet<PayPosition> PayPosition { get; set; }
        public virtual DbSet<PayRelation> PayRelation { get; set; }
        public virtual DbSet<PayRoomMaster> PayRoomMaster { get; set; }
        public virtual DbSet<PaySalaryGrade> PaySalaryGrade { get; set; }
        public virtual DbSet<PaySalaryGradeDetails> PaySalaryGradeDetails { get; set; }
        public virtual DbSet<PaySalaryLevel> PaySalaryLevel { get; set; }
        public virtual DbSet<PayServiceEnd> PayServiceEnd { get; set; }
        public virtual DbSet<PayServiceEndSettings> PayServiceEndSettings { get; set; }
        public virtual DbSet<PayServiceEndType> PayServiceEndType { get; set; }
        public virtual DbSet<PaySummaryPercentage> PaySummaryPercentage { get; set; }
        public virtual DbSet<PaySupervisor> PaySupervisor { get; set; }
        public virtual DbSet<PayTickets> PayTickets { get; set; }
        public virtual DbSet<PayTimeSheet> PayTimeSheet { get; set; }
        public virtual DbSet<PayTimeSheetImport> PayTimeSheetImport { get; set; }
        public virtual DbSet<PayTimeSheetMaster> PayTimeSheetMaster { get; set; }
        public virtual DbSet<PayTimesheetLog> PayTimesheetLog { get; set; }
        public virtual DbSet<PayTrainers> PayTrainers { get; set; }
        public virtual DbSet<PayTrainingAttendance> PayTrainingAttendance { get; set; }
        public virtual DbSet<PayTrainingAttendanceDetails> PayTrainingAttendanceDetails { get; set; }
        public virtual DbSet<PayTrainingRequest> PayTrainingRequest { get; set; }
        public virtual DbSet<PayVacationDetails> PayVacationDetails { get; set; }
        public virtual DbSet<PayVacationMaster> PayVacationMaster { get; set; }
        public virtual DbSet<PayVacationReturn> PayVacationReturn { get; set; }
        public virtual DbSet<PayVacationType> PayVacationType { get; set; }
        public virtual DbSet<PayVillaMaster> PayVillaMaster { get; set; }
        public virtual DbSet<PayWorkingHours> PayWorkingHours { get; set; }
        public virtual DbSet<PayYearlyOffDays> PayYearlyOffDays { get; set; }
        public virtual DbSet<Pbcatcol> Pbcatcol { get; set; }
        public virtual DbSet<Pbcatedt> Pbcatedt { get; set; }
        public virtual DbSet<Pbcatfmt> Pbcatfmt { get; set; }
        public virtual DbSet<Pbcattbl> Pbcattbl { get; set; }
        public virtual DbSet<Pbcatvld> Pbcatvld { get; set; }
        public virtual DbSet<PrjBoq> PrjBoq { get; set; }
        public virtual DbSet<PrjBoqlist> PrjBoqlist { get; set; }
        public virtual DbSet<PrjBoqproduct> PrjBoqproduct { get; set; }
        public virtual DbSet<PrjClient> PrjClient { get; set; }
        public virtual DbSet<PrjCommission> PrjCommission { get; set; }
        public virtual DbSet<PrjCostCategory> PrjCostCategory { get; set; }
        public virtual DbSet<PrjCustomerMaterialDetails> PrjCustomerMaterialDetails { get; set; }
        public virtual DbSet<PrjCustomerMaterials> PrjCustomerMaterials { get; set; }
        public virtual DbSet<PrjEmployeeWorkLog> PrjEmployeeWorkLog { get; set; }
        public virtual DbSet<PrjMainProject> PrjMainProject { get; set; }
        public virtual DbSet<PrjPaymentReceipt> PrjPaymentReceipt { get; set; }
        public virtual DbSet<PrjProjectClients> PrjProjectClients { get; set; }
        public virtual DbSet<PrjProjectCommns> PrjProjectCommns { get; set; }
        public virtual DbSet<PrjProjectMaster> PrjProjectMaster { get; set; }
        public virtual DbSet<PrjProjectParameters> PrjProjectParameters { get; set; }
        public virtual DbSet<PrjProjectPermissionInfo> PrjProjectPermissionInfo { get; set; }
        public virtual DbSet<PrjProjectTransfer> PrjProjectTransfer { get; set; }
        public virtual DbSet<PrjProjectTransferDetails> PrjProjectTransferDetails { get; set; }
        public virtual DbSet<PrjProjectVendors> PrjProjectVendors { get; set; }
        public virtual DbSet<PrjSafetyInspection> PrjSafetyInspection { get; set; }
        public virtual DbSet<PrjSafetyInspectionDetails> PrjSafetyInspectionDetails { get; set; }
        public virtual DbSet<PrjStockOutByTransfer> PrjStockOutByTransfer { get; set; }
        public virtual DbSet<PrjTender> PrjTender { get; set; }
        public virtual DbSet<PrjTimeSheet> PrjTimeSheet { get; set; }
        public virtual DbSet<PrjTimeSlotMaster> PrjTimeSlotMaster { get; set; }
        public virtual DbSet<PrjVendor> PrjVendor { get; set; }
        public virtual DbSet<PrjWorkOrder> PrjWorkOrder { get; set; }
        public virtual DbSet<PrjWorkOrderDetails> PrjWorkOrderDetails { get; set; }
        public virtual DbSet<PsdChartOfAccount> PsdChartOfAccount { get; set; }
        public virtual DbSet<PsdChartOfAccountNew> PsdChartOfAccountNew { get; set; }
        public virtual DbSet<PsdEmployeeList> PsdEmployeeList { get; set; }
        public virtual DbSet<PsdRemList> PsdRemList { get; set; }
        public virtual DbSet<PsdStudentList> PsdStudentList { get; set; }
        public virtual DbSet<PsdStudentList2> PsdStudentList2 { get; set; }
        public virtual DbSet<PsdStudentListTemp> PsdStudentListTemp { get; set; }
        public virtual DbSet<RecAppointment> RecAppointment { get; set; }
        public virtual DbSet<RecApproval> RecApproval { get; set; }
        public virtual DbSet<RecApprovalCycle> RecApprovalCycle { get; set; }
        public virtual DbSet<RecApprovalCycleDetails> RecApprovalCycleDetails { get; set; }
        public virtual DbSet<RecApprovalDetails> RecApprovalDetails { get; set; }
        public virtual DbSet<RecEmployeeDependence> RecEmployeeDependence { get; set; }
        public virtual DbSet<RecEmployeeRequest> RecEmployeeRequest { get; set; }
        public virtual DbSet<RecEmployeeRequestDetails> RecEmployeeRequestDetails { get; set; }
        public virtual DbSet<RecJobSalaryDetails> RecJobSalaryDetails { get; set; }
        public virtual DbSet<RecJobVacancy> RecJobVacancy { get; set; }
        public virtual DbSet<RecRegistration> RecRegistration { get; set; }
        public virtual DbSet<RelClassDivision> RelClassDivision { get; set; }
        public virtual DbSet<RfqDetails> RfqDetails { get; set; }
        public virtual DbSet<RptBankOpeningBalance> RptBankOpeningBalance { get; set; }
        public virtual DbSet<RptPayTimeSheet> RptPayTimeSheet { get; set; }
        public virtual DbSet<RstTenent> RstTenent { get; set; }
        public virtual DbSet<RstTenentDetail> RstTenentDetail { get; set; }
        public virtual DbSet<RstTenentInvoice> RstTenentInvoice { get; set; }
        public virtual DbSet<RstTenentInvoiceDetail> RstTenentInvoiceDetail { get; set; }
        public virtual DbSet<RstTenentInvoiceDetailItem> RstTenentInvoiceDetailItem { get; set; }
        public virtual DbSet<SchAcademicYear> SchAcademicYear { get; set; }
        public virtual DbSet<SchAdditionalFeeDetails> SchAdditionalFeeDetails { get; set; }
        public virtual DbSet<SchAdmission> SchAdmission { get; set; }
        public virtual DbSet<SchAdmissionClass> SchAdmissionClass { get; set; }
        public virtual DbSet<SchAdmissionFeeSetup> SchAdmissionFeeSetup { get; set; }
        public virtual DbSet<SchBookDistibution> SchBookDistibution { get; set; }
        public virtual DbSet<SchBookDistibutionDetails> SchBookDistibutionDetails { get; set; }
        public virtual DbSet<SchBusRegistration> SchBusRegistration { get; set; }
        public virtual DbSet<SchBusRoute> SchBusRoute { get; set; }
        public virtual DbSet<SchBusRouteDetail> SchBusRouteDetail { get; set; }
        public virtual DbSet<SchBusStop> SchBusStop { get; set; }
        public virtual DbSet<SchClass> SchClass { get; set; }
        public virtual DbSet<SchClassDivision> SchClassDivision { get; set; }
        public virtual DbSet<SchClassDivisionSetup> SchClassDivisionSetup { get; set; }
        public virtual DbSet<SchClassFeeSetup> SchClassFeeSetup { get; set; }
        public virtual DbSet<SchClassItemDetail> SchClassItemDetail { get; set; }
        public virtual DbSet<SchClassType> SchClassType { get; set; }
        public virtual DbSet<SchClinicManager> SchClinicManager { get; set; }
        public virtual DbSet<SchDriverRegistration> SchDriverRegistration { get; set; }
        public virtual DbSet<SchFeeAccountDefaults> SchFeeAccountDefaults { get; set; }
        public virtual DbSet<SchFeeAdvance> SchFeeAdvance { get; set; }
        public virtual DbSet<SchFeeBalance> SchFeeBalance { get; set; }
        public virtual DbSet<SchFeeCategory> SchFeeCategory { get; set; }
        public virtual DbSet<SchFeeCategoryType> SchFeeCategoryType { get; set; }
        public virtual DbSet<SchFeeDiscount> SchFeeDiscount { get; set; }
        public virtual DbSet<SchFeeMapping> SchFeeMapping { get; set; }
        public virtual DbSet<SchFeeMappingDetails> SchFeeMappingDetails { get; set; }
        public virtual DbSet<SchFeeProcessing> SchFeeProcessing { get; set; }
        public virtual DbSet<SchFeeReceipt> SchFeeReceipt { get; set; }
        public virtual DbSet<SchFeeReceiptDetails> SchFeeReceiptDetails { get; set; }
        public virtual DbSet<SchFeeReturn> SchFeeReturn { get; set; }
        public virtual DbSet<SchFeeReturnDetails> SchFeeReturnDetails { get; set; }
        public virtual DbSet<SchFeeType> SchFeeType { get; set; }
        public virtual DbSet<SchFeeUpdate> SchFeeUpdate { get; set; }
        public virtual DbSet<SchFeeUpdateDetail> SchFeeUpdateDetail { get; set; }
        public virtual DbSet<SchFrequency> SchFrequency { get; set; }
        public virtual DbSet<SchParentDetails> SchParentDetails { get; set; }
        public virtual DbSet<SchPrefectManager> SchPrefectManager { get; set; }
        public virtual DbSet<SchPromotionMaster> SchPromotionMaster { get; set; }
        public virtual DbSet<SchRegistration> SchRegistration { get; set; }
        public virtual DbSet<SchReservationPayment> SchReservationPayment { get; set; }
        public virtual DbSet<SchReservationPaymentDetail> SchReservationPaymentDetail { get; set; }
        public virtual DbSet<SchSales> SchSales { get; set; }
        public virtual DbSet<SchSalesDetails> SchSalesDetails { get; set; }
        public virtual DbSet<SchStudentAssessment> SchStudentAssessment { get; set; }
        public virtual DbSet<SchStudentAttendenceDetail> SchStudentAttendenceDetail { get; set; }
        public virtual DbSet<SchStudentAttendenceMaster> SchStudentAttendenceMaster { get; set; }
        public virtual DbSet<SchStudentClub> SchStudentClub { get; set; }
        public virtual DbSet<SchStudentClubDetail> SchStudentClubDetail { get; set; }
        public virtual DbSet<SchStudentHealth> SchStudentHealth { get; set; }
        public virtual DbSet<SchStudentHistory> SchStudentHistory { get; set; }
        public virtual DbSet<SchStudentHouse> SchStudentHouse { get; set; }
        public virtual DbSet<SchStudentStatus> SchStudentStatus { get; set; }
        public virtual DbSet<SchStudentVaccine> SchStudentVaccine { get; set; }
        public virtual DbSet<SchTeacher> SchTeacher { get; set; }
        public virtual DbSet<SchTransportationDirection> SchTransportationDirection { get; set; }
        public virtual DbSet<SchVehicleExpence> SchVehicleExpence { get; set; }
        public virtual DbSet<SchVehicleRegistration> SchVehicleRegistration { get; set; }
        public virtual DbSet<SecApprovalSettingsEmployee> SecApprovalSettingsEmployee { get; set; }
        public virtual DbSet<SecApprovalSettingsEmployeeDetails> SecApprovalSettingsEmployeeDetails { get; set; }
        public virtual DbSet<SecApprovalSettingsGeneral> SecApprovalSettingsGeneral { get; set; }
        public virtual DbSet<SecFormComponents> SecFormComponents { get; set; }
        public virtual DbSet<SecMenus> SecMenus { get; set; }
        public virtual DbSet<SecModuleContents> SecModuleContents { get; set; }
        public virtual DbSet<SecModules> SecModules { get; set; }
        public virtual DbSet<SecQuickAccess> SecQuickAccess { get; set; }
        public virtual DbSet<SecReportsComponents> SecReportsComponents { get; set; }
        public virtual DbSet<SecUser> SecUser { get; set; }
        public virtual DbSet<SecUserCategory> SecUserCategory { get; set; }
        public virtual DbSet<SecUserLevel> SecUserLevel { get; set; }
        public virtual DbSet<SecUserPrevileges> SecUserPrevileges { get; set; }
        public virtual DbSet<SmehItemUpdate> SmehItemUpdate { get; set; }
        public virtual DbSet<SmehLotExpiry> SmehLotExpiry { get; set; }
        public virtual DbSet<SmehLotExpiryAl> SmehLotExpiryAl { get; set; }
        public virtual DbSet<SmehLotExpiryAlhayerDate> SmehLotExpiryAlhayerDate { get; set; }
        public virtual DbSet<SmehLotExpiryAlhayerDate1> SmehLotExpiryAlhayerDate1 { get; set; }
        public virtual DbSet<SmehLotExpiryNew> SmehLotExpiryNew { get; set; }
        public virtual DbSet<SmehLotExpiryWadiLabenDate> SmehLotExpiryWadiLabenDate { get; set; }
        public virtual DbSet<SmehLotExpiryWadiLabenDate1> SmehLotExpiryWadiLabenDate1 { get; set; }
        public virtual DbSet<SmehSerials> SmehSerials { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<TaxDetailsGstRpt> TaxDetailsGstRpt { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<TempAccVoucherCcamtDefference> TempAccVoucherCcamtDefference { get; set; }
        public virtual DbSet<TempEiaEmployee> TempEiaEmployee { get; set; }
        public virtual DbSet<TempEiaStudent> TempEiaStudent { get; set; }
        public virtual DbSet<TempTable> TempTable { get; set; }
        public virtual DbSet<TestPsdStudentList> TestPsdStudentList { get; set; }
        public virtual DbSet<TvlTicketType> TvlTicketType { get; set; }
        public virtual DbSet<TvlTicketing> TvlTicketing { get; set; }
        public virtual DbSet<VchService> VchService { get; set; }
        public virtual DbSet<VehAuctionDetails> VehAuctionDetails { get; set; }
        public virtual DbSet<VehContractFile> VehContractFile { get; set; }
        public virtual DbSet<VehDrivers> VehDrivers { get; set; }
        public virtual DbSet<VehFileMoving> VehFileMoving { get; set; }
        public virtual DbSet<View1> View1 { get; set; }
        public virtual DbSet<View2> View2 { get; set; }
        public virtual DbSet<View3> View3 { get; set; }
        public virtual DbSet<View4> View4 { get; set; }
        public virtual DbSet<VsaAppointment> VsaAppointment { get; set; }
        public virtual DbSet<VsaAuthority> VsaAuthority { get; set; }
        public virtual DbSet<VsaClientFile> VsaClientFile { get; set; }
        public virtual DbSet<VsaConsultant> VsaConsultant { get; set; }
        public virtual DbSet<VsaCustomerRcptDetail> VsaCustomerRcptDetail { get; set; }
        public virtual DbSet<VsaCustomerSpouseWorkExp> VsaCustomerSpouseWorkExp { get; set; }
        public virtual DbSet<VsaCustomerWorkExp> VsaCustomerWorkExp { get; set; }
        public virtual DbSet<VsaCvRegistration> VsaCvRegistration { get; set; }
        public virtual DbSet<VsaFileCancel> VsaFileCancel { get; set; }
        public virtual DbSet<VsaFileCancelDetail> VsaFileCancelDetail { get; set; }
        public virtual DbSet<VsaFilePaymentDetails> VsaFilePaymentDetails { get; set; }
        public virtual DbSet<VsaFileStages> VsaFileStages { get; set; }
        public virtual DbSet<VsaFileStatus> VsaFileStatus { get; set; }
        public virtual DbSet<VsaFileStatusHistory> VsaFileStatusHistory { get; set; }
        public virtual DbSet<VsaFollowUp> VsaFollowUp { get; set; }
        public virtual DbSet<VsaGenDefaults> VsaGenDefaults { get; set; }
        public virtual DbSet<VsaOccupation> VsaOccupation { get; set; }
        public virtual DbSet<VsaParalegal> VsaParalegal { get; set; }
        public virtual DbSet<VsaRegistrationStatus> VsaRegistrationStatus { get; set; }
        public virtual DbSet<VsaRegistrationStatusDetail> VsaRegistrationStatusDetail { get; set; }
        public virtual DbSet<VwAccAccountWiseTotal> VwAccAccountWiseTotal { get; set; }
        public virtual DbSet<VwAccAccountWiseTotalByMonth> VwAccAccountWiseTotalByMonth { get; set; }
        public virtual DbSet<VwAccBankDetails> VwAccBankDetails { get; set; }
        public virtual DbSet<VwAccBankDisp> VwAccBankDisp { get; set; }
        public virtual DbSet<VwAccBranchDisp> VwAccBranchDisp { get; set; }
        public virtual DbSet<VwAccBranchMasterDisp> VwAccBranchMasterDisp { get; set; }
        public virtual DbSet<VwAccBudgeting> VwAccBudgeting { get; set; }
        public virtual DbSet<VwAccCashFlow> VwAccCashFlow { get; set; }
        public virtual DbSet<VwAccCashFlowStatement> VwAccCashFlowStatement { get; set; }
        public virtual DbSet<VwAccCashFlowStatementRpt> VwAccCashFlowStatementRpt { get; set; }
        public virtual DbSet<VwAccCcledgerSum> VwAccCcledgerSum { get; set; }
        public virtual DbSet<VwAccChequeDetails> VwAccChequeDetails { get; set; }
        public virtual DbSet<VwAccCompanyBankMaster> VwAccCompanyBankMaster { get; set; }
        public virtual DbSet<VwAccCompanyDisp> VwAccCompanyDisp { get; set; }
        public virtual DbSet<VwAccCostCenterReports> VwAccCostCenterReports { get; set; }
        public virtual DbSet<VwAccCostCentreMaster> VwAccCostCentreMaster { get; set; }
        public virtual DbSet<VwAccCostCentreMasterDisp> VwAccCostCentreMasterDisp { get; set; }
        public virtual DbSet<VwAccCostCentreMasterList> VwAccCostCentreMasterList { get; set; }
        public virtual DbSet<VwAccCountryDetails> VwAccCountryDetails { get; set; }
        public virtual DbSet<VwAccDayClosing> VwAccDayClosing { get; set; }
        public virtual DbSet<VwAccDetails4ChequePrint> VwAccDetails4ChequePrint { get; set; }
        public virtual DbSet<VwAccFinancialYear> VwAccFinancialYear { get; set; }
        public virtual DbSet<VwAccFnYear> VwAccFnYear { get; set; }
        public virtual DbSet<VwAccGroupTrialBalance> VwAccGroupTrialBalance { get; set; }
        public virtual DbSet<VwAccGroupTrialBalance1> VwAccGroupTrialBalance1 { get; set; }
        public virtual DbSet<VwAccGroupTrialBalanceDrCr> VwAccGroupTrialBalanceDrCr { get; set; }
        public virtual DbSet<VwAccGroupWiseTotal> VwAccGroupWiseTotal { get; set; }
        public virtual DbSet<VwAccGroupWiseTotalByMonth> VwAccGroupWiseTotalByMonth { get; set; }
        public virtual DbSet<VwAccLedgerGroupCategory> VwAccLedgerGroupCategory { get; set; }
        public virtual DbSet<VwAccLedgerReport> VwAccLedgerReport { get; set; }
        public virtual DbSet<VwAccLedgerTrialBalance> VwAccLedgerTrialBalance { get; set; }
        public virtual DbSet<VwAccLedgerTrialBalance1> VwAccLedgerTrialBalance1 { get; set; }
        public virtual DbSet<VwAccMastGroup> VwAccMastGroup { get; set; }
        public virtual DbSet<VwAccMastGroupAr> VwAccMastGroupAr { get; set; }
        public virtual DbSet<VwAccMastLedger> VwAccMastLedger { get; set; }
        public virtual DbSet<VwAccMastLedgerAr> VwAccMastLedgerAr { get; set; }
        public virtual DbSet<VwAccMastLedgerForEmployee> VwAccMastLedgerForEmployee { get; set; }
        public virtual DbSet<VwAccMasterGroup> VwAccMasterGroup { get; set; }
        public virtual DbSet<VwAccOtherInformation> VwAccOtherInformation { get; set; }
        public virtual DbSet<VwAccPeriod> VwAccPeriod { get; set; }
        public virtual DbSet<VwAccPeriodDisp> VwAccPeriodDisp { get; set; }
        public virtual DbSet<VwAccProjectDetailsExpense> VwAccProjectDetailsExpense { get; set; }
        public virtual DbSet<VwAccProjectDetailsRpt> VwAccProjectDetailsRpt { get; set; }
        public virtual DbSet<VwAccPurchasePaymentTotals> VwAccPurchasePaymentTotals { get; set; }
        public virtual DbSet<VwAccReconciliationDisp> VwAccReconciliationDisp { get; set; }
        public virtual DbSet<VwAccSalesReceiptTotals> VwAccSalesReceiptTotals { get; set; }
        public virtual DbSet<VwAccStatement> VwAccStatement { get; set; }
        public virtual DbSet<VwAccStatementImportRulesDetails> VwAccStatementImportRulesDetails { get; set; }
        public virtual DbSet<VwAccStatementImportRulesList> VwAccStatementImportRulesList { get; set; }
        public virtual DbSet<VwAccTransType> VwAccTransType { get; set; }
        public virtual DbSet<VwAccVoucherCcamtDefference> VwAccVoucherCcamtDefference { get; set; }
        public virtual DbSet<VwAccVoucherDetailByMonthRpt> VwAccVoucherDetailByMonthRpt { get; set; }
        public virtual DbSet<VwAccVoucherDetails> VwAccVoucherDetails { get; set; }
        public virtual DbSet<VwAccVoucherDisp> VwAccVoucherDisp { get; set; }
        public virtual DbSet<VwAccVoucherJrnlCc> VwAccVoucherJrnlCc { get; set; }
        public virtual DbSet<VwAccVoucherMasterDetailsSegments> VwAccVoucherMasterDetailsSegments { get; set; }
        public virtual DbSet<VwAccVoucherMasterDisp> VwAccVoucherMasterDisp { get; set; }
        public virtual DbSet<VwAccVoucherOb> VwAccVoucherOb { get; set; }
        public virtual DbSet<VwAccoutBehaviourSearch> VwAccoutBehaviourSearch { get; set; }
        public virtual DbSet<VwAddOrDedImportDetails> VwAddOrDedImportDetails { get; set; }
        public virtual DbSet<VwAgeingreport> VwAgeingreport { get; set; }
        public virtual DbSet<VwAirPort> VwAirPort { get; set; }
        public virtual DbSet<VwAmortization> VwAmortization { get; set; }
        public virtual DbSet<VwAnyEmployeeApprovalDetails> VwAnyEmployeeApprovalDetails { get; set; }
        public virtual DbSet<VwApprovalCodeDetails> VwApprovalCodeDetails { get; set; }
        public virtual DbSet<VwApprovalCycleStatus> VwApprovalCycleStatus { get; set; }
        public virtual DbSet<VwApprovalDashBoard> VwApprovalDashBoard { get; set; }
        public virtual DbSet<VwApprovalDashBoardHistory> VwApprovalDashBoardHistory { get; set; }
        public virtual DbSet<VwApprovalDetail> VwApprovalDetail { get; set; }
        public virtual DbSet<VwApprovalHistoryPopup> VwApprovalHistoryPopup { get; set; }
        public virtual DbSet<VwApprovalSummary> VwApprovalSummary { get; set; }
        public virtual DbSet<VwArabicDateFormat> VwArabicDateFormat { get; set; }
        public virtual DbSet<VwAssAssetCategoryDisp> VwAssAssetCategoryDisp { get; set; }
        public virtual DbSet<VwAssAssetItemSearch> VwAssAssetItemSearch { get; set; }
        public virtual DbSet<VwAssDepreciationUcsearch> VwAssDepreciationUcsearch { get; set; }
        public virtual DbSet<VwAssItemHistory> VwAssItemHistory { get; set; }
        public virtual DbSet<VwAssItemHistoryRpt> VwAssItemHistoryRpt { get; set; }
        public virtual DbSet<VwAssPo> VwAssPo { get; set; }
        public virtual DbSet<VwAssPosearch> VwAssPosearch { get; set; }
        public virtual DbSet<VwAssPurchaseDetailsDisp> VwAssPurchaseDetailsDisp { get; set; }
        public virtual DbSet<VwAssPurchaseMasterDisp> VwAssPurchaseMasterDisp { get; set; }
        public virtual DbSet<VwAssSalesDetailsDisp> VwAssSalesDetailsDisp { get; set; }
        public virtual DbSet<VwAssSalesMasterDisp> VwAssSalesMasterDisp { get; set; }
        public virtual DbSet<VwAssSuspensionDisp> VwAssSuspensionDisp { get; set; }
        public virtual DbSet<VwAssTransactionDisp> VwAssTransactionDisp { get; set; }
        public virtual DbSet<VwAssTransferDisp> VwAssTransferDisp { get; set; }
        public virtual DbSet<VwAssTransferdetails> VwAssTransferdetails { get; set; }
        public virtual DbSet<VwAssetAddlInfo> VwAssetAddlInfo { get; set; }
        public virtual DbSet<VwAssetCategoryTotal> VwAssetCategoryTotal { get; set; }
        public virtual DbSet<VwAssetCategoryTotalSales> VwAssetCategoryTotalSales { get; set; }
        public virtual DbSet<VwAssetDashBoard> VwAssetDashBoard { get; set; }
        public virtual DbSet<VwAssetMaster> VwAssetMaster { get; set; }
        public virtual DbSet<VwAssetPofit> VwAssetPofit { get; set; }
        public virtual DbSet<VwAssetProfit> VwAssetProfit { get; set; }
        public virtual DbSet<VwAssetPurchaseBarcodeDisp> VwAssetPurchaseBarcodeDisp { get; set; }
        public virtual DbSet<VwAssetPurchasefromPoDetails> VwAssetPurchasefromPoDetails { get; set; }
        public virtual DbSet<VwAssetStatusUpdate> VwAssetStatusUpdate { get; set; }
        public virtual DbSet<VwAssetStatusUpdateRpt> VwAssetStatusUpdateRpt { get; set; }
        public virtual DbSet<VwAttachmentsSync> VwAttachmentsSync { get; set; }
        public virtual DbSet<VwBankDetailsRpt> VwBankDetailsRpt { get; set; }
        public virtual DbSet<VwBankmaster> VwBankmaster { get; set; }
        public virtual DbSet<VwBankreconsilization> VwBankreconsilization { get; set; }
        public virtual DbSet<VwBarcodeDisp> VwBarcodeDisp { get; set; }
        public virtual DbSet<VwBarcodeFields> VwBarcodeFields { get; set; }
        public virtual DbSet<VwBarcodeMasterDisp> VwBarcodeMasterDisp { get; set; }
        public virtual DbSet<VwBarcodeTemplate> VwBarcodeTemplate { get; set; }
        public virtual DbSet<VwBatchPostingDisp> VwBatchPostingDisp { get; set; }
        public virtual DbSet<VwBatchwiseStockDisp> VwBatchwiseStockDisp { get; set; }
        public virtual DbSet<VwBeneficiaryPartyList> VwBeneficiaryPartyList { get; set; }
        public virtual DbSet<VwBeneficiaryPurchaseDetail> VwBeneficiaryPurchaseDetail { get; set; }
        public virtual DbSet<VwBoqTender> VwBoqTender { get; set; }
        public virtual DbSet<VwBoqdetailsDisp> VwBoqdetailsDisp { get; set; }
        public virtual DbSet<VwBoqhistory> VwBoqhistory { get; set; }
        public virtual DbSet<VwBranchMaster> VwBranchMaster { get; set; }
        public virtual DbSet<VwBudgetingBrachRpt> VwBudgetingBrachRpt { get; set; }
        public virtual DbSet<VwBusDetailsDisp> VwBusDetailsDisp { get; set; }
        public virtual DbSet<VwBusRegistrationDisp> VwBusRegistrationDisp { get; set; }
        public virtual DbSet<VwBusRegistrationRpt> VwBusRegistrationRpt { get; set; }
        public virtual DbSet<VwCandidateOfferHistoryRpt> VwCandidateOfferHistoryRpt { get; set; }
        public virtual DbSet<VwCashBookDashboard> VwCashBookDashboard { get; set; }
        public virtual DbSet<VwCashFlowStatement> VwCashFlowStatement { get; set; }
        public virtual DbSet<VwCheckCustUsed> VwCheckCustUsed { get; set; }
        public virtual DbSet<VwCheckPrjUsed> VwCheckPrjUsed { get; set; }
        public virtual DbSet<VwCheckTransaction> VwCheckTransaction { get; set; }
        public virtual DbSet<VwChequeTransactions> VwChequeTransactions { get; set; }
        public virtual DbSet<VwCompanyBankDetail> VwCompanyBankDetail { get; set; }
        public virtual DbSet<VwContactDetails> VwContactDetails { get; set; }
        public virtual DbSet<VwCorClientDisp> VwCorClientDisp { get; set; }
        public virtual DbSet<VwCorrTransDetails> VwCorrTransDetails { get; set; }
        public virtual DbSet<VwCorrespondDashboard> VwCorrespondDashboard { get; set; }
        public virtual DbSet<VwCorrespondenceDashboard> VwCorrespondenceDashboard { get; set; }
        public virtual DbSet<VwCorrespondenceDashboardDetail> VwCorrespondenceDashboardDetail { get; set; }
        public virtual DbSet<VwCorrespondenceMax> VwCorrespondenceMax { get; set; }
        public virtual DbSet<VwCostCenterTrans> VwCostCenterTrans { get; set; }
        public virtual DbSet<VwCostCentreMaster> VwCostCentreMaster { get; set; }
        public virtual DbSet<VwCrmDashboard> VwCrmDashboard { get; set; }
        public virtual DbSet<VwCrmdetailsDisp> VwCrmdetailsDisp { get; set; }
        public virtual DbSet<VwCrmmaster> VwCrmmaster { get; set; }
        public virtual DbSet<VwCsvbankDetails> VwCsvbankDetails { get; set; }
        public virtual DbSet<VwCurrentStock> VwCurrentStock { get; set; }
        public virtual DbSet<VwCustomerBalanceAdjustment> VwCustomerBalanceAdjustment { get; set; }
        public virtual DbSet<VwCustomerDetailsInPrs> VwCustomerDetailsInPrs { get; set; }
        public virtual DbSet<VwCustomerDiscSettings> VwCustomerDiscSettings { get; set; }
        public virtual DbSet<VwCustomerDiscountMaster> VwCustomerDiscountMaster { get; set; }
        public virtual DbSet<VwCustomerMaterialDisp> VwCustomerMaterialDisp { get; set; }
        public virtual DbSet<VwCustomerMaterialListDisp> VwCustomerMaterialListDisp { get; set; }
        public virtual DbSet<VwCustomerMaterialsList> VwCustomerMaterialsList { get; set; }
        public virtual DbSet<VwCustomerPrs> VwCustomerPrs { get; set; }
        public virtual DbSet<VwCustomeradvancepay> VwCustomeradvancepay { get; set; }
        public virtual DbSet<VwCustomeradvpayall> VwCustomeradvpayall { get; set; }
        public virtual DbSet<VwDailyCashSalesSummary> VwDailyCashSalesSummary { get; set; }
        public virtual DbSet<VwDailyCollection> VwDailyCollection { get; set; }
        public virtual DbSet<VwDailySalesReport> VwDailySalesReport { get; set; }
        public virtual DbSet<VwDailySalesSummary> VwDailySalesSummary { get; set; }
        public virtual DbSet<VwDailySalesSummaryDayClose> VwDailySalesSummaryDayClose { get; set; }
        public virtual DbSet<VwDefaultAccountDisp> VwDefaultAccountDisp { get; set; }
        public virtual DbSet<VwDeliveryDispatch> VwDeliveryDispatch { get; set; }
        public virtual DbSet<VwDeliveryDispatch1> VwDeliveryDispatch1 { get; set; }
        public virtual DbSet<VwDispatch> VwDispatch { get; set; }
        public virtual DbSet<VwDispatchNoSearch> VwDispatchNoSearch { get; set; }
        public virtual DbSet<VwDispatchReturnDetails> VwDispatchReturnDetails { get; set; }
        public virtual DbSet<VwDispatchReturnDisp> VwDispatchReturnDisp { get; set; }
        public virtual DbSet<VwDispatchSummRpt> VwDispatchSummRpt { get; set; }
        public virtual DbSet<VwDmsExpiryDetails> VwDmsExpiryDetails { get; set; }
        public virtual DbSet<VwDmsFileDetail> VwDmsFileDetail { get; set; }
        public virtual DbSet<VwDmsReminderCategory> VwDmsReminderCategory { get; set; }
        public virtual DbSet<VwDmsReminderCategoryDetails> VwDmsReminderCategoryDetails { get; set; }
        public virtual DbSet<VwDocDefaultDisp> VwDocDefaultDisp { get; set; }
        public virtual DbSet<VwDocumentFolderList> VwDocumentFolderList { get; set; }
        public virtual DbSet<VwDocumentTray> VwDocumentTray { get; set; }
        public virtual DbSet<VwDraftsalesdetails> VwDraftsalesdetails { get; set; }
        public virtual DbSet<VwEmpAddlInfo> VwEmpAddlInfo { get; set; }
        public virtual DbSet<VwEmpApprovalSettings> VwEmpApprovalSettings { get; set; }
        public virtual DbSet<VwEmpApprovalSettingsDetails> VwEmpApprovalSettingsDetails { get; set; }
        public virtual DbSet<VwEmpAsset> VwEmpAsset { get; set; }
        public virtual DbSet<VwEmpGrpDisp> VwEmpGrpDisp { get; set; }
        public virtual DbSet<VwEmpGrpWorkhours> VwEmpGrpWorkhours { get; set; }
        public virtual DbSet<VwEmpMailDisp> VwEmpMailDisp { get; set; }
        public virtual DbSet<VwEmpMaintenance> VwEmpMaintenance { get; set; }
        public virtual DbSet<VwEmpMedicalInsuranceDetails> VwEmpMedicalInsuranceDetails { get; set; }
        public virtual DbSet<VwEmpPayInformation> VwEmpPayInformation { get; set; }
        public virtual DbSet<VwEmpPriceSettingsDisp> VwEmpPriceSettingsDisp { get; set; }
        public virtual DbSet<VwEmpProjects> VwEmpProjects { get; set; }
        public virtual DbSet<VwEmpSponsorDetails> VwEmpSponsorDetails { get; set; }
        public virtual DbSet<VwEmpTimeSheetBatch> VwEmpTimeSheetBatch { get; set; }
        public virtual DbSet<VwEmpTimeSheetRequest> VwEmpTimeSheetRequest { get; set; }
        public virtual DbSet<VwEmpTimesheetMaster> VwEmpTimesheetMaster { get; set; }
        public virtual DbSet<VwEmpVacationList> VwEmpVacationList { get; set; }
        public virtual DbSet<VwEmploanList> VwEmploanList { get; set; }
        public virtual DbSet<VwEmployeeAssetsRpt> VwEmployeeAssetsRpt { get; set; }
        public virtual DbSet<VwEmployeeClearance> VwEmployeeClearance { get; set; }
        public virtual DbSet<VwEmployeeClearanceNoSearch> VwEmployeeClearanceNoSearch { get; set; }
        public virtual DbSet<VwEmployeeClearanceSettings> VwEmployeeClearanceSettings { get; set; }
        public virtual DbSet<VwEmployeeClearanceSettingsLoad> VwEmployeeClearanceSettingsLoad { get; set; }
        public virtual DbSet<VwEmployeeCount> VwEmployeeCount { get; set; }
        public virtual DbSet<VwEmployeeDependence> VwEmployeeDependence { get; set; }
        public virtual DbSet<VwEmployeeDependenceDetails> VwEmployeeDependenceDetails { get; set; }
        public virtual DbSet<VwEmployeeRealationMaster> VwEmployeeRealationMaster { get; set; }
        public virtual DbSet<VwEmployeeReminder> VwEmployeeReminder { get; set; }
        public virtual DbSet<VwEmployeeRequestApprovalDashBoard> VwEmployeeRequestApprovalDashBoard { get; set; }
        public virtual DbSet<VwEmployeeSalDetails> VwEmployeeSalDetails { get; set; }
        public virtual DbSet<VwEmployeeSalaryDetailsSif> VwEmployeeSalaryDetailsSif { get; set; }
        public virtual DbSet<VwEmployeeType> VwEmployeeType { get; set; }
        public virtual DbSet<VwEmployeeWisePayCodeDetails> VwEmployeeWisePayCodeDetails { get; set; }
        public virtual DbSet<VwEmployeemaintenance> VwEmployeemaintenance { get; set; }
        public virtual DbSet<VwEmployeemaintenanceDetails> VwEmployeemaintenanceDetails { get; set; }
        public virtual DbSet<VwEmployeesBasicSalary> VwEmployeesBasicSalary { get; set; }
        public virtual DbSet<VwEmppaymentMaster> VwEmppaymentMaster { get; set; }
        public virtual DbSet<VwEndOfService> VwEndOfService { get; set; }
        public virtual DbSet<VwFamilyDetailsRec> VwFamilyDetailsRec { get; set; }
        public virtual DbSet<VwFfItemSearch> VwFfItemSearch { get; set; }
        public virtual DbSet<VwFfItemSearchPrice> VwFfItemSearchPrice { get; set; }
        public virtual DbSet<VwFfwAccAgedReceivables> VwFfwAccAgedReceivables { get; set; }
        public virtual DbSet<VwFfwAwbSearch> VwFfwAwbSearch { get; set; }
        public virtual DbSet<VwFfwCustomerDetails> VwFfwCustomerDetails { get; set; }
        public virtual DbSet<VwFfwCustomerDisp> VwFfwCustomerDisp { get; set; }
        public virtual DbSet<VwFfwGoodsSearch> VwFfwGoodsSearch { get; set; }
        public virtual DbSet<VwFfwInvoice> VwFfwInvoice { get; set; }
        public virtual DbSet<VwFfwInvoiceDashboard> VwFfwInvoiceDashboard { get; set; }
        public virtual DbSet<VwFfwInvoiceManifest> VwFfwInvoiceManifest { get; set; }
        public virtual DbSet<VwFfwItemCategory> VwFfwItemCategory { get; set; }
        public virtual DbSet<VwFfwItemMaster> VwFfwItemMaster { get; set; }
        public virtual DbSet<VwFfwItemMasterDisp> VwFfwItemMasterDisp { get; set; }
        public virtual DbSet<VwFfwManifest> VwFfwManifest { get; set; }
        public virtual DbSet<VwFfwManifestDetails> VwFfwManifestDetails { get; set; }
        public virtual DbSet<VwFfwPriceListDetails> VwFfwPriceListDetails { get; set; }
        public virtual DbSet<VwFfwPurchasedetail> VwFfwPurchasedetail { get; set; }
        public virtual DbSet<VwFfwQtnGoodsSearch> VwFfwQtnGoodsSearch { get; set; }
        public virtual DbSet<VwFfwQuotation> VwFfwQuotation { get; set; }
        public virtual DbSet<VwFfwQuotationPurchasedetail> VwFfwQuotationPurchasedetail { get; set; }
        public virtual DbSet<VwFfwQuotationSaleDetail> VwFfwQuotationSaleDetail { get; set; }
        public virtual DbSet<VwFfwQuotationSearch> VwFfwQuotationSearch { get; set; }
        public virtual DbSet<VwFfwSalesExecutiveRpt> VwFfwSalesExecutiveRpt { get; set; }
        public virtual DbSet<VwFfwSalesInvoiceRpt> VwFfwSalesInvoiceRpt { get; set; }
        public virtual DbSet<VwFfwSalesReceipt> VwFfwSalesReceipt { get; set; }
        public virtual DbSet<VwFfwSalesdetail> VwFfwSalesdetail { get; set; }
        public virtual DbSet<VwFfwStaticalinformation> VwFfwStaticalinformation { get; set; }
        public virtual DbSet<VwFfwStaticalinformationNew> VwFfwStaticalinformationNew { get; set; }
        public virtual DbSet<VwFfwVendor> VwFfwVendor { get; set; }
        public virtual DbSet<VwFfwVendorDetails> VwFfwVendorDetails { get; set; }
        public virtual DbSet<VwFileCancellationRpt> VwFileCancellationRpt { get; set; }
        public virtual DbSet<VwFileNoSearch> VwFileNoSearch { get; set; }
        public virtual DbSet<VwFillUnit> VwFillUnit { get; set; }
        public virtual DbSet<VwFollowupdisp> VwFollowupdisp { get; set; }
        public virtual DbSet<VwFormComponents> VwFormComponents { get; set; }
        public virtual DbSet<VwFreightEnquiryDashBoard> VwFreightEnquiryDashBoard { get; set; }
        public virtual DbSet<VwGenApprovalStatus> VwGenApprovalStatus { get; set; }
        public virtual DbSet<VwGenDocumentExpiry> VwGenDocumentExpiry { get; set; }
        public virtual DbSet<VwGenEntryDashboard> VwGenEntryDashboard { get; set; }
        public virtual DbSet<VwGenFollowUp> VwGenFollowUp { get; set; }
        public virtual DbSet<VwGenFormNameDisp> VwGenFormNameDisp { get; set; }
        public virtual DbSet<VwGenRemainderCategory> VwGenRemainderCategory { get; set; }
        public virtual DbSet<VwGenReminderCategory> VwGenReminderCategory { get; set; }
        public virtual DbSet<VwGenReminderDashboard> VwGenReminderDashboard { get; set; }
        public virtual DbSet<VwGenReminderDashboardExpired> VwGenReminderDashboardExpired { get; set; }
        public virtual DbSet<VwGenReminderFields> VwGenReminderFields { get; set; }
        public virtual DbSet<VwGenStatusApproval> VwGenStatusApproval { get; set; }
        public virtual DbSet<VwGender> VwGender { get; set; }
        public virtual DbSet<VwGosiAmountDetailsForPay> VwGosiAmountDetailsForPay { get; set; }
        public virtual DbSet<VwGosiPaidDetaildForEdit> VwGosiPaidDetaildForEdit { get; set; }
        public virtual DbSet<VwGosiPaidDetails> VwGosiPaidDetails { get; set; }
        public virtual DbSet<VwGosiPaidTotal> VwGosiPaidTotal { get; set; }
        public virtual DbSet<VwGosiPaymentSearch> VwGosiPaymentSearch { get; set; }
        public virtual DbSet<VwGosiprocessingForPosting> VwGosiprocessingForPosting { get; set; }
        public virtual DbSet<VwIdcPrint> VwIdcPrint { get; set; }
        public virtual DbSet<VwInsuranceAmount> VwInsuranceAmount { get; set; }
        public virtual DbSet<VwInsuranceAmountCategoryWise> VwInsuranceAmountCategoryWise { get; set; }
        public virtual DbSet<VwInsuranceClassRpt> VwInsuranceClassRpt { get; set; }
        public virtual DbSet<VwInsurancePayCode> VwInsurancePayCode { get; set; }
        public virtual DbSet<VwInsuranceSettings> VwInsuranceSettings { get; set; }
        public virtual DbSet<VwInterviewEmployeeDetails> VwInterviewEmployeeDetails { get; set; }
        public virtual DbSet<VwInvAmountSplitType> VwInvAmountSplitType { get; set; }
        public virtual DbSet<VwInvAssembly> VwInvAssembly { get; set; }
        public virtual DbSet<VwInvAssemblyDetails> VwInvAssemblyDetails { get; set; }
        public virtual DbSet<VwInvAssetCategoryDisp> VwInvAssetCategoryDisp { get; set; }
        public virtual DbSet<VwInvAssetInventoryDetails> VwInvAssetInventoryDetails { get; set; }
        public virtual DbSet<VwInvAssetInventoryInvoiceNoSearch> VwInvAssetInventoryInvoiceNoSearch { get; set; }
        public virtual DbSet<VwInvAssetInventoryReceiptNoSearch> VwInvAssetInventoryReceiptNoSearch { get; set; }
        public virtual DbSet<VwInvBeneficiaryDisp> VwInvBeneficiaryDisp { get; set; }
        public virtual DbSet<VwInvBeneficiaryDisp1> VwInvBeneficiaryDisp1 { get; set; }
        public virtual DbSet<VwInvBeneficiaryWithArabicDisp> VwInvBeneficiaryWithArabicDisp { get; set; }
        public virtual DbSet<VwInvBranchwiseSummary> VwInvBranchwiseSummary { get; set; }
        public virtual DbSet<VwInvCheckApprovalCode> VwInvCheckApprovalCode { get; set; }
        public virtual DbSet<VwInvCheckCustomer> VwInvCheckCustomer { get; set; }
        public virtual DbSet<VwInvCheckPayCode> VwInvCheckPayCode { get; set; }
        public virtual DbSet<VwInvCheckSalesman> VwInvCheckSalesman { get; set; }
        public virtual DbSet<VwInvCheckVendor> VwInvCheckVendor { get; set; }
        public virtual DbSet<VwInvCreditInvBalList> VwInvCreditInvBalList { get; set; }
        public virtual DbSet<VwInvCreditNoSearch> VwInvCreditNoSearch { get; set; }
        public virtual DbSet<VwInvCreditNoteNoSearch> VwInvCreditNoteNoSearch { get; set; }
        public virtual DbSet<VwInvCustomer> VwInvCustomer { get; set; }
        public virtual DbSet<VwInvCustomerBalance> VwInvCustomerBalance { get; set; }
        public virtual DbSet<VwInvCustomerDemob> VwInvCustomerDemob { get; set; }
        public virtual DbSet<VwInvCustomerDisp> VwInvCustomerDisp { get; set; }
        public virtual DbSet<VwInvCustomerMobilizationDisp> VwInvCustomerMobilizationDisp { get; set; }
        public virtual DbSet<VwInvCustomerPaymentRpt> VwInvCustomerPaymentRpt { get; set; }
        public virtual DbSet<VwInvCustomerPaymentRpt1> VwInvCustomerPaymentRpt1 { get; set; }
        public virtual DbSet<VwInvCustomerProjectSearch> VwInvCustomerProjectSearch { get; set; }
        public virtual DbSet<VwInvCustomerProjects> VwInvCustomerProjects { get; set; }
        public virtual DbSet<VwInvCustomerProjectsDisp> VwInvCustomerProjectsDisp { get; set; }
        public virtual DbSet<VwInvCustomerProjectsMobilization> VwInvCustomerProjectsMobilization { get; set; }
        public virtual DbSet<VwInvCustomerSalesDiscount> VwInvCustomerSalesDiscount { get; set; }
        public virtual DbSet<VwInvCustomerStatement> VwInvCustomerStatement { get; set; }
        public virtual DbSet<VwInvCustomerStatementStatus> VwInvCustomerStatementStatus { get; set; }
        public virtual DbSet<VwInvCustomerSummary> VwInvCustomerSummary { get; set; }
        public virtual DbSet<VwInvCustomerTransactionByItem> VwInvCustomerTransactionByItem { get; set; }
        public virtual DbSet<VwInvDailySalesRpt> VwInvDailySalesRpt { get; set; }
        public virtual DbSet<VwInvDashboard> VwInvDashboard { get; set; }
        public virtual DbSet<VwInvDebitNoSearch> VwInvDebitNoSearch { get; set; }
        public virtual DbSet<VwInvDebitNoteNoSearch> VwInvDebitNoteNoSearch { get; set; }
        public virtual DbSet<VwInvDeliveryDetailsPrs> VwInvDeliveryDetailsPrs { get; set; }
        public virtual DbSet<VwInvDeliveryNoteDetailDisp> VwInvDeliveryNoteDetailDisp { get; set; }
        public virtual DbSet<VwInvDeliveryNoteDetails> VwInvDeliveryNoteDetails { get; set; }
        public virtual DbSet<VwInvDeliveryNoteMasterDisp> VwInvDeliveryNoteMasterDisp { get; set; }
        public virtual DbSet<VwInvDeliveryNoteNoSearch> VwInvDeliveryNoteNoSearch { get; set; }
        public virtual DbSet<VwInvDeliveryNotePending> VwInvDeliveryNotePending { get; set; }
        public virtual DbSet<VwInvDeliveryNotePrsdetails> VwInvDeliveryNotePrsdetails { get; set; }
        public virtual DbSet<VwInvDeliveryNoteSearch> VwInvDeliveryNoteSearch { get; set; }
        public virtual DbSet<VwInvDeliveryNotesPendingInrRpt> VwInvDeliveryNotesPendingInrRpt { get; set; }
        public virtual DbSet<VwInvDeliveryRetunEdit> VwInvDeliveryRetunEdit { get; set; }
        public virtual DbSet<VwInvDeliveryReturnDisp> VwInvDeliveryReturnDisp { get; set; }
        public virtual DbSet<VwInvDeliveryReturnSub> VwInvDeliveryReturnSub { get; set; }
        public virtual DbSet<VwInvDepartmentDisp> VwInvDepartmentDisp { get; set; }
        public virtual DbSet<VwInvFreePurchaseDisp> VwInvFreePurchaseDisp { get; set; }
        public virtual DbSet<VwInvFreeTextPurchaseDisp> VwInvFreeTextPurchaseDisp { get; set; }
        public virtual DbSet<VwInvItemCategory> VwInvItemCategory { get; set; }
        public virtual DbSet<VwInvItemCategoryDisp> VwInvItemCategoryDisp { get; set; }
        public virtual DbSet<VwInvItemCategoryMaster> VwInvItemCategoryMaster { get; set; }
        public virtual DbSet<VwInvItemClass> VwInvItemClass { get; set; }
        public virtual DbSet<VwInvItemCost> VwInvItemCost { get; set; }
        public virtual DbSet<VwInvItemDepartmentDisp> VwInvItemDepartmentDisp { get; set; }
        public virtual DbSet<VwInvItemDetails> VwInvItemDetails { get; set; }
        public virtual DbSet<VwInvItemMaster> VwInvItemMaster { get; set; }
        public virtual DbSet<VwInvItemMasterDisp> VwInvItemMasterDisp { get; set; }
        public virtual DbSet<VwInvItemMasterStatus> VwInvItemMasterStatus { get; set; }
        public virtual DbSet<VwInvItemPriceListDisp> VwInvItemPriceListDisp { get; set; }
        public virtual DbSet<VwInvItemPriceMaster> VwInvItemPriceMaster { get; set; }
        public virtual DbSet<VwInvItemPurchase> VwInvItemPurchase { get; set; }
        public virtual DbSet<VwInvItemSearch> VwInvItemSearch { get; set; }
        public virtual DbSet<VwInvItemSearchByBranch> VwInvItemSearchByBranch { get; set; }
        public virtual DbSet<VwInvItemSearchDispatch> VwInvItemSearchDispatch { get; set; }
        public virtual DbSet<VwInvItemSearchNew> VwInvItemSearchNew { get; set; }
        public virtual DbSet<VwInvItemSearchPo> VwInvItemSearchPo { get; set; }
        public virtual DbSet<VwInvItemSearchWhlink> VwInvItemSearchWhlink { get; set; }
        public virtual DbSet<VwInvItemSearchWhlinkPrs> VwInvItemSearchWhlinkPrs { get; set; }
        public virtual DbSet<VwInvItemStatement> VwInvItemStatement { get; set; }
        public virtual DbSet<VwInvItemStockReminder> VwInvItemStockReminder { get; set; }
        public virtual DbSet<VwInvItemStockReminderStatus> VwInvItemStockReminderStatus { get; set; }
        public virtual DbSet<VwInvItemStockReport> VwInvItemStockReport { get; set; }
        public virtual DbSet<VwInvItemStockReportDisp> VwInvItemStockReportDisp { get; set; }
        public virtual DbSet<VwInvItemUnit> VwInvItemUnit { get; set; }
        public virtual DbSet<VwInvItemUnit1> VwInvItemUnit1 { get; set; }
        public virtual DbSet<VwInvItemUnitDisp> VwInvItemUnitDisp { get; set; }
        public virtual DbSet<VwInvJobNoSearch> VwInvJobNoSearch { get; set; }
        public virtual DbSet<VwInvJwlItemMaster> VwInvJwlItemMaster { get; set; }
        public virtual DbSet<VwInvJwlSalesIteamSearch> VwInvJwlSalesIteamSearch { get; set; }
        public virtual DbSet<VwInvJwlType> VwInvJwlType { get; set; }
        public virtual DbSet<VwInvJwlrate> VwInvJwlrate { get; set; }
        public virtual DbSet<VwInvLastsavedStatus> VwInvLastsavedStatus { get; set; }
        public virtual DbSet<VwInvLedGroup> VwInvLedGroup { get; set; }
        public virtual DbSet<VwInvLedgerAll> VwInvLedgerAll { get; set; }
        public virtual DbSet<VwInvLedgerCustomer> VwInvLedgerCustomer { get; set; }
        public virtual DbSet<VwInvLocation> VwInvLocation { get; set; }
        public virtual DbSet<VwInvLocationDisp> VwInvLocationDisp { get; set; }
        public virtual DbSet<VwInvLocationDisp1> VwInvLocationDisp1 { get; set; }
        public virtual DbSet<VwInvLocationStock> VwInvLocationStock { get; set; }
        public virtual DbSet<VwInvMainAssetCategoryDisp> VwInvMainAssetCategoryDisp { get; set; }
        public virtual DbSet<VwInvMeetingTracker> VwInvMeetingTracker { get; set; }
        public virtual DbSet<VwInvMeetingTrackerCategorywiseDetails> VwInvMeetingTrackerCategorywiseDetails { get; set; }
        public virtual DbSet<VwInvMeetingTrackerDetails> VwInvMeetingTrackerDetails { get; set; }
        public virtual DbSet<VwInvMeetingTrackerDetailsRpt> VwInvMeetingTrackerDetailsRpt { get; set; }
        public virtual DbSet<VwInvMeetingTrackerHistory> VwInvMeetingTrackerHistory { get; set; }
        public virtual DbSet<VwInvMileagereport> VwInvMileagereport { get; set; }
        public virtual DbSet<VwInvMrnDetails> VwInvMrnDetails { get; set; }
        public virtual DbSet<VwInvMrnReport> VwInvMrnReport { get; set; }
        public virtual DbSet<VwInvMrnSub> VwInvMrnSub { get; set; }
        public virtual DbSet<VwInvMrndepartmentWiseReport> VwInvMrndepartmentWiseReport { get; set; }
        public virtual DbSet<VwInvMrndetails1> VwInvMrndetails1 { get; set; }
        public virtual DbSet<VwInvMrndetailsDispGrid> VwInvMrndetailsDispGrid { get; set; }
        public virtual DbSet<VwInvMrndetailsPo> VwInvMrndetailsPo { get; set; }
        public virtual DbSet<VwInvMrndetailsPoprs> VwInvMrndetailsPoprs { get; set; }
        public virtual DbSet<VwInvMrndetailsRs> VwInvMrndetailsRs { get; set; }
        public virtual DbSet<VwInvMrnfreights> VwInvMrnfreights { get; set; }
        public virtual DbSet<VwInvMrninvoice> VwInvMrninvoice { get; set; }
        public virtual DbSet<VwInvMrnnoSearch> VwInvMrnnoSearch { get; set; }
        public virtual DbSet<VwInvOpenQty> VwInvOpenQty { get; set; }
        public virtual DbSet<VwInvOrderToDispatch> VwInvOrderToDispatch { get; set; }
        public virtual DbSet<VwInvOrderToDispatchSales> VwInvOrderToDispatchSales { get; set; }
        public virtual DbSet<VwInvPartyBalance> VwInvPartyBalance { get; set; }
        public virtual DbSet<VwInvPayReceiptSearch> VwInvPayReceiptSearch { get; set; }
        public virtual DbSet<VwInvPayReceivables> VwInvPayReceivables { get; set; }
        public virtual DbSet<VwInvPayables> VwInvPayables { get; set; }
        public virtual DbSet<VwInvPayablesDashboard> VwInvPayablesDashboard { get; set; }
        public virtual DbSet<VwInvPayablesLog> VwInvPayablesLog { get; set; }
        public virtual DbSet<VwInvPayablesPayableRpt> VwInvPayablesPayableRpt { get; set; }
        public virtual DbSet<VwInvPayablesRpt> VwInvPayablesRpt { get; set; }
        public virtual DbSet<VwInvPaymentRequest> VwInvPaymentRequest { get; set; }
        public virtual DbSet<VwInvPaymentRequestList> VwInvPaymentRequestList { get; set; }
        public virtual DbSet<VwInvPaymentSearch> VwInvPaymentSearch { get; set; }
        public virtual DbSet<VwInvPaymentSettlementSearch> VwInvPaymentSettlementSearch { get; set; }
        public virtual DbSet<VwInvPendingDeliveryNotesRpt> VwInvPendingDeliveryNotesRpt { get; set; }
        public virtual DbSet<VwInvPendingGrnRpt> VwInvPendingGrnRpt { get; set; }
        public virtual DbSet<VwInvPendingPurchasesRpt> VwInvPendingPurchasesRpt { get; set; }
        public virtual DbSet<VwInvPendingQuotationDetails> VwInvPendingQuotationDetails { get; set; }
        public virtual DbSet<VwInvPendingSalesInvoiceRpt> VwInvPendingSalesInvoiceRpt { get; set; }
        public virtual DbSet<VwInvPendingSalesRpt> VwInvPendingSalesRpt { get; set; }
        public virtual DbSet<VwInvPendingSrs> VwInvPendingSrs { get; set; }
        public virtual DbSet<VwInvPopendingReport> VwInvPopendingReport { get; set; }
        public virtual DbSet<VwInvPrePaymentSchedule> VwInvPrePaymentSchedule { get; set; }
        public virtual DbSet<VwInvPrepaymentDetails> VwInvPrepaymentDetails { get; set; }
        public virtual DbSet<VwInvPrfRpt> VwInvPrfRpt { get; set; }
        public virtual DbSet<VwInvProductionDashboard> VwInvProductionDashboard { get; set; }
        public virtual DbSet<VwInvProductionOrder> VwInvProductionOrder { get; set; }
        public virtual DbSet<VwInvProjectDashBoard> VwInvProjectDashBoard { get; set; }
        public virtual DbSet<VwInvProjectreport> VwInvProjectreport { get; set; }
        public virtual DbSet<VwInvPrsPoCount> VwInvPrsPoCount { get; set; }
        public virtual DbSet<VwInvPrsdetails> VwInvPrsdetails { get; set; }
        public virtual DbSet<VwInvPrsnoDeliverySearch> VwInvPrsnoDeliverySearch { get; set; }
        public virtual DbSet<VwInvPrsnoDeliverySearchNested> VwInvPrsnoDeliverySearchNested { get; set; }
        public virtual DbSet<VwInvPrsnoSearch> VwInvPrsnoSearch { get; set; }
        public virtual DbSet<VwInvPrsnoUcsearch> VwInvPrsnoUcsearch { get; set; }
        public virtual DbSet<VwInvPrspendingReport> VwInvPrspendingReport { get; set; }
        public virtual DbSet<VwInvPurCredAdv> VwInvPurCredAdv { get; set; }
        public virtual DbSet<VwInvPurchaseCategoryWiseRpt> VwInvPurchaseCategoryWiseRpt { get; set; }
        public virtual DbSet<VwInvPurchaseDetails> VwInvPurchaseDetails { get; set; }
        public virtual DbSet<VwInvPurchaseDetailsDisp> VwInvPurchaseDetailsDisp { get; set; }
        public virtual DbSet<VwInvPurchaseDetailsViewRpt> VwInvPurchaseDetailsViewRpt { get; set; }
        public virtual DbSet<VwInvPurchaseDisp> VwInvPurchaseDisp { get; set; }
        public virtual DbSet<VwInvPurchaseFreightReasonDisp> VwInvPurchaseFreightReasonDisp { get; set; }
        public virtual DbSet<VwInvPurchaseFreightTax> VwInvPurchaseFreightTax { get; set; }
        public virtual DbSet<VwInvPurchaseFreights> VwInvPurchaseFreights { get; set; }
        public virtual DbSet<VwInvPurchaseImei> VwInvPurchaseImei { get; set; }
        public virtual DbSet<VwInvPurchaseInvoiceNoSearch> VwInvPurchaseInvoiceNoSearch { get; set; }
        public virtual DbSet<VwInvPurchaseNoSearch> VwInvPurchaseNoSearch { get; set; }
        public virtual DbSet<VwInvPurchaseOrder> VwInvPurchaseOrder { get; set; }
        public virtual DbSet<VwInvPurchaseOrderDetails> VwInvPurchaseOrderDetails { get; set; }
        public virtual DbSet<VwInvPurchaseOrderDetailsDisp> VwInvPurchaseOrderDetailsDisp { get; set; }
        public virtual DbSet<VwInvPurchaseOrderDetailsForPrs> VwInvPurchaseOrderDetailsForPrs { get; set; }
        public virtual DbSet<VwInvPurchaseOrderInvoiceNoSearch> VwInvPurchaseOrderInvoiceNoSearch { get; set; }
        public virtual DbSet<VwInvPurchaseOrderNoGridSearch> VwInvPurchaseOrderNoGridSearch { get; set; }
        public virtual DbSet<VwInvPurchaseOrderNoSearch> VwInvPurchaseOrderNoSearch { get; set; }
        public virtual DbSet<VwInvPurchaseOrderQty> VwInvPurchaseOrderQty { get; set; }
        public virtual DbSet<VwInvPurchasePaymentRpt> VwInvPurchasePaymentRpt { get; set; }
        public virtual DbSet<VwInvPurchasePaymentStatus> VwInvPurchasePaymentStatus { get; set; }
        public virtual DbSet<VwInvPurchasePaymentStatusDisp> VwInvPurchasePaymentStatusDisp { get; set; }
        public virtual DbSet<VwInvPurchasePaymentStatusSearch> VwInvPurchasePaymentStatusSearch { get; set; }
        public virtual DbSet<VwInvPurchaseQty> VwInvPurchaseQty { get; set; }
        public virtual DbSet<VwInvPurchaseReturnEdit> VwInvPurchaseReturnEdit { get; set; }
        public virtual DbSet<VwInvPurchaseReturnEditImei> VwInvPurchaseReturnEditImei { get; set; }
        public virtual DbSet<VwInvPurchaseReturnImei> VwInvPurchaseReturnImei { get; set; }
        public virtual DbSet<VwInvPurchaseReturnPayments> VwInvPurchaseReturnPayments { get; set; }
        public virtual DbSet<VwInvPurchaseReturnSub> VwInvPurchaseReturnSub { get; set; }
        public virtual DbSet<VwInvQuotationDetails> VwInvQuotationDetails { get; set; }
        public virtual DbSet<VwInvQuotationGenFollowUp> VwInvQuotationGenFollowUp { get; set; }
        public virtual DbSet<VwInvReceiptSearch> VwInvReceiptSearch { get; set; }
        public virtual DbSet<VwInvReceiptSettlementSearch> VwInvReceiptSettlementSearch { get; set; }
        public virtual DbSet<VwInvReceivableStock> VwInvReceivableStock { get; set; }
        public virtual DbSet<VwInvReceivableStockDetails> VwInvReceivableStockDetails { get; set; }
        public virtual DbSet<VwInvReceivableStockSearch> VwInvReceivableStockSearch { get; set; }
        public virtual DbSet<VwInvReceivables> VwInvReceivables { get; set; }
        public virtual DbSet<VwInvReceivablesDashboard> VwInvReceivablesDashboard { get; set; }
        public virtual DbSet<VwInvReceivablesInvoice> VwInvReceivablesInvoice { get; set; }
        public virtual DbSet<VwInvRequestDashboard> VwInvRequestDashboard { get; set; }
        public virtual DbSet<VwInvRequestOutwardDisp> VwInvRequestOutwardDisp { get; set; }
        public virtual DbSet<VwInvRequestQuotationRpt> VwInvRequestQuotationRpt { get; set; }
        public virtual DbSet<VwInvRsdetails> VwInvRsdetails { get; set; }
        public virtual DbSet<VwInvRsdetailsDisp> VwInvRsdetailsDisp { get; set; }
        public virtual DbSet<VwInvRsnoSearch> VwInvRsnoSearch { get; set; }
        public virtual DbSet<VwInvSaleDebAdv> VwInvSaleDebAdv { get; set; }
        public virtual DbSet<VwInvSalesAnalysis> VwInvSalesAnalysis { get; set; }
        public virtual DbSet<VwInvSalesAnalysisBranch> VwInvSalesAnalysisBranch { get; set; }
        public virtual DbSet<VwInvSalesBudget> VwInvSalesBudget { get; set; }
        public virtual DbSet<VwInvSalesBudgetCustomer> VwInvSalesBudgetCustomer { get; set; }
        public virtual DbSet<VwInvSalesBudgetProject> VwInvSalesBudgetProject { get; set; }
        public virtual DbSet<VwInvSalesDailySummary> VwInvSalesDailySummary { get; set; }
        public virtual DbSet<VwInvSalesDetails> VwInvSalesDetails { get; set; }
        public virtual DbSet<VwInvSalesEntryRpt> VwInvSalesEntryRpt { get; set; }
        public virtual DbSet<VwInvSalesExecutiveDetailRpt> VwInvSalesExecutiveDetailRpt { get; set; }
        public virtual DbSet<VwInvSalesInvoiceNoSearch> VwInvSalesInvoiceNoSearch { get; set; }
        public virtual DbSet<VwInvSalesInvoiceNoSearchDup> VwInvSalesInvoiceNoSearchDup { get; set; }
        public virtual DbSet<VwInvSalesInvoiceProcessed> VwInvSalesInvoiceProcessed { get; set; }
        public virtual DbSet<VwInvSalesOrder> VwInvSalesOrder { get; set; }
        public virtual DbSet<VwInvSalesOrderDeliveryStatusRpt> VwInvSalesOrderDeliveryStatusRpt { get; set; }
        public virtual DbSet<VwInvSalesOrderDetails> VwInvSalesOrderDetails { get; set; }
        public virtual DbSet<VwInvSalesOrderDetailsInSales> VwInvSalesOrderDetailsInSales { get; set; }
        public virtual DbSet<VwInvSalesOrderDistribution> VwInvSalesOrderDistribution { get; set; }
        public virtual DbSet<VwInvSalesOrderDtlsForDelNote> VwInvSalesOrderDtlsForDelNote { get; set; }
        public virtual DbSet<VwInvSalesOrderNoGridSearch> VwInvSalesOrderNoGridSearch { get; set; }
        public virtual DbSet<VwInvSalesOrderNoSearch> VwInvSalesOrderNoSearch { get; set; }
        public virtual DbSet<VwInvSalesOrderProcessed> VwInvSalesOrderProcessed { get; set; }
        public virtual DbSet<VwInvSalesOrderQty> VwInvSalesOrderQty { get; set; }
        public virtual DbSet<VwInvSalesOrderQuantity> VwInvSalesOrderQuantity { get; set; }
        public virtual DbSet<VwInvSalesPaymentTypeRpt> VwInvSalesPaymentTypeRpt { get; set; }
        public virtual DbSet<VwInvSalesPrint> VwInvSalesPrint { get; set; }
        public virtual DbSet<VwInvSalesQty> VwInvSalesQty { get; set; }
        public virtual DbSet<VwInvSalesQuotationNoSearch> VwInvSalesQuotationNoSearch { get; set; }
        public virtual DbSet<VwInvSalesRetunEdit> VwInvSalesRetunEdit { get; set; }
        public virtual DbSet<VwInvSalesRetunEditImei> VwInvSalesRetunEditImei { get; set; }
        public virtual DbSet<VwInvSalesReturn> VwInvSalesReturn { get; set; }
        public virtual DbSet<VwInvSalesReturnDeliveryNoteEdit> VwInvSalesReturnDeliveryNoteEdit { get; set; }
        public virtual DbSet<VwInvSalesReturnDeliveryNoteSub> VwInvSalesReturnDeliveryNoteSub { get; set; }
        public virtual DbSet<VwInvSalesReturnDisp> VwInvSalesReturnDisp { get; set; }
        public virtual DbSet<VwInvSalesReturnDispPos> VwInvSalesReturnDispPos { get; set; }
        public virtual DbSet<VwInvSalesReturnImei> VwInvSalesReturnImei { get; set; }
        public virtual DbSet<VwInvSalesReturnPendingSearch> VwInvSalesReturnPendingSearch { get; set; }
        public virtual DbSet<VwInvSalesReturnReceipts> VwInvSalesReturnReceipts { get; set; }
        public virtual DbSet<VwInvSalesReturnRpt> VwInvSalesReturnRpt { get; set; }
        public virtual DbSet<VwInvSalesReturnSub> VwInvSalesReturnSub { get; set; }
        public virtual DbSet<VwInvSalesSettlementSearch> VwInvSalesSettlementSearch { get; set; }
        public virtual DbSet<VwInvSalesSolink> VwInvSalesSolink { get; set; }
        public virtual DbSet<VwInvSalesStockImei> VwInvSalesStockImei { get; set; }
        public virtual DbSet<VwInvSalesSummary> VwInvSalesSummary { get; set; }
        public virtual DbSet<VwInvSalesWiseReturn> VwInvSalesWiseReturn { get; set; }
        public virtual DbSet<VwInvSalesWiseReturnTotal> VwInvSalesWiseReturnTotal { get; set; }
        public virtual DbSet<VwInvSalesdetailedrpt> VwInvSalesdetailedrpt { get; set; }
        public virtual DbSet<VwInvSalesman> VwInvSalesman { get; set; }
        public virtual DbSet<VwInvSalesmanDisp> VwInvSalesmanDisp { get; set; }
        public virtual DbSet<VwInvSalesmanPymentSearch> VwInvSalesmanPymentSearch { get; set; }
        public virtual DbSet<VwInvSalesmanSummary> VwInvSalesmanSummary { get; set; }
        public virtual DbSet<VwInvSalesunit> VwInvSalesunit { get; set; }
        public virtual DbSet<VwInvSeelingPriceDisp> VwInvSeelingPriceDisp { get; set; }
        public virtual DbSet<VwInvServiceBookingDisp> VwInvServiceBookingDisp { get; set; }
        public virtual DbSet<VwInvServiceContract> VwInvServiceContract { get; set; }
        public virtual DbSet<VwInvServiceDeliveryDisp> VwInvServiceDeliveryDisp { get; set; }
        public virtual DbSet<VwInvServiceDisp> VwInvServiceDisp { get; set; }
        public virtual DbSet<VwInvServiceSheetDetails> VwInvServiceSheetDetails { get; set; }
        public virtual DbSet<VwInvServiceSheetDetailsRpt> VwInvServiceSheetDetailsRpt { get; set; }
        public virtual DbSet<VwInvServiceSheetMaster> VwInvServiceSheetMaster { get; set; }
        public virtual DbSet<VwInvSisSub> VwInvSisSub { get; set; }
        public virtual DbSet<VwInvSisdetails> VwInvSisdetails { get; set; }
        public virtual DbSet<VwInvSisitemSearch> VwInvSisitemSearch { get; set; }
        public virtual DbSet<VwInvSisnoSearch> VwInvSisnoSearch { get; set; }
        public virtual DbSet<VwInvSoSearchSales> VwInvSoSearchSales { get; set; }
        public virtual DbSet<VwInvSrnReport> VwInvSrnReport { get; set; }
        public virtual DbSet<VwInvSrndetailsDisp> VwInvSrndetailsDisp { get; set; }
        public virtual DbSet<VwInvSrnnoSearch> VwInvSrnnoSearch { get; set; }
        public virtual DbSet<VwInvSrsdepartmentIssueReport> VwInvSrsdepartmentIssueReport { get; set; }
        public virtual DbSet<VwInvSrsdetails> VwInvSrsdetails { get; set; }
        public virtual DbSet<VwInvSrsdetailsDisp> VwInvSrsdetailsDisp { get; set; }
        public virtual DbSet<VwInvSrsonProgressItems> VwInvSrsonProgressItems { get; set; }
        public virtual DbSet<VwInvStatusUpdate> VwInvStatusUpdate { get; set; }
        public virtual DbSet<VwInvStockAdjstmentReasonDisp> VwInvStockAdjstmentReasonDisp { get; set; }
        public virtual DbSet<VwInvStockAdjustmentDisp> VwInvStockAdjustmentDisp { get; set; }
        public virtual DbSet<VwInvStockAdjustmentDisp1> VwInvStockAdjustmentDisp1 { get; set; }
        public virtual DbSet<VwInvStockAdjustmentMasterDisp> VwInvStockAdjustmentMasterDisp { get; set; }
        public virtual DbSet<VwInvStockAdjustmentView> VwInvStockAdjustmentView { get; set; }
        public virtual DbSet<VwInvStockAdjustmentViewAll> VwInvStockAdjustmentViewAll { get; set; }
        public virtual DbSet<VwInvStockImeiRpt> VwInvStockImeiRpt { get; set; }
        public virtual DbSet<VwInvStockMasterImeiDisp> VwInvStockMasterImeiDisp { get; set; }
        public virtual DbSet<VwInvStockStatus> VwInvStockStatus { get; set; }
        public virtual DbSet<VwInvStockStatus4Sae> VwInvStockStatus4Sae { get; set; }
        public virtual DbSet<VwInvStockStatusImei> VwInvStockStatusImei { get; set; }
        public virtual DbSet<VwInvStockStatusRpt> VwInvStockStatusRpt { get; set; }
        public virtual DbSet<VwInvStockStatusService> VwInvStockStatusService { get; set; }
        public virtual DbSet<VwInvStockTransferInQty> VwInvStockTransferInQty { get; set; }
        public virtual DbSet<VwInvStockTransferOutQty> VwInvStockTransferOutQty { get; set; }
        public virtual DbSet<VwInvStoreIssueReport> VwInvStoreIssueReport { get; set; }
        public virtual DbSet<VwInvTaxCategoryRpt> VwInvTaxCategoryRpt { get; set; }
        public virtual DbSet<VwInvTerminal> VwInvTerminal { get; set; }
        public virtual DbSet<VwInvTranferDetailedRpt> VwInvTranferDetailedRpt { get; set; }
        public virtual DbSet<VwInvTransType> VwInvTransType { get; set; }
        public virtual DbSet<VwInvTransferSearch> VwInvTransferSearch { get; set; }
        public virtual DbSet<VwInvTransferStockDetails> VwInvTransferStockDetails { get; set; }
        public virtual DbSet<VwInvTruckMaster> VwInvTruckMaster { get; set; }
        public virtual DbSet<VwInvTruckTransactionRpt> VwInvTruckTransactionRpt { get; set; }
        public virtual DbSet<VwInvUnitStatus> VwInvUnitStatus { get; set; }
        public virtual DbSet<VwInvVendor> VwInvVendor { get; set; }
        public virtual DbSet<VwInvVendorCurrencyDisp> VwInvVendorCurrencyDisp { get; set; }
        public virtual DbSet<VwInvVendorDisp> VwInvVendorDisp { get; set; }
        public virtual DbSet<VwInvVendorDispRfq> VwInvVendorDispRfq { get; set; }
        public virtual DbSet<VwInvVendorPaymentDetailsRpt> VwInvVendorPaymentDetailsRpt { get; set; }
        public virtual DbSet<VwInvVendorPaymentRpt> VwInvVendorPaymentRpt { get; set; }
        public virtual DbSet<VwInvVendorProjectSearch> VwInvVendorProjectSearch { get; set; }
        public virtual DbSet<VwInvVendorProjects> VwInvVendorProjects { get; set; }
        public virtual DbSet<VwInvVendorProjects1> VwInvVendorProjects1 { get; set; }
        public virtual DbSet<VwInvVendorProjectsDisp> VwInvVendorProjectsDisp { get; set; }
        public virtual DbSet<VwInvVendorRequestDetails> VwInvVendorRequestDetails { get; set; }
        public virtual DbSet<VwInvVendorRequestDisp> VwInvVendorRequestDisp { get; set; }
        public virtual DbSet<VwInvVendorRequestNoSearch> VwInvVendorRequestNoSearch { get; set; }
        public virtual DbSet<VwInvVendorRfqDisp> VwInvVendorRfqDisp { get; set; }
        public virtual DbSet<VwInvVendorServiceSheetDetails> VwInvVendorServiceSheetDetails { get; set; }
        public virtual DbSet<VwInvVendorServiceSheetDetailsRpt> VwInvVendorServiceSheetDetailsRpt { get; set; }
        public virtual DbSet<VwInvVendorServiceSheetMaster> VwInvVendorServiceSheetMaster { get; set; }
        public virtual DbSet<VwInvVendorStatement> VwInvVendorStatement { get; set; }
        public virtual DbSet<VwInvVendorTransactionByitem> VwInvVendorTransactionByitem { get; set; }
        public virtual DbSet<VwInvVoucherDisp> VwInvVoucherDisp { get; set; }
        public virtual DbSet<VwInvWarehouseDisp> VwInvWarehouseDisp { get; set; }
        public virtual DbSet<VwInvWarrantyDetails> VwInvWarrantyDetails { get; set; }
        public virtual DbSet<VwInvWarrantyDisp> VwInvWarrantyDisp { get; set; }
        public virtual DbSet<VwInvZeroStockItemList> VwInvZeroStockItemList { get; set; }
        public virtual DbSet<VwInventoryDispRpt> VwInventoryDispRpt { get; set; }
        public virtual DbSet<VwInvoiceAnalysisSummaryRpt> VwInvoiceAnalysisSummaryRpt { get; set; }
        public virtual DbSet<VwInvsalespurchaseRpt> VwInvsalespurchaseRpt { get; set; }
        public virtual DbSet<VwItemDisplay> VwItemDisplay { get; set; }
        public virtual DbSet<VwItemDisplaySalesOrder> VwItemDisplaySalesOrder { get; set; }
        public virtual DbSet<VwItemExclude> VwItemExclude { get; set; }
        public virtual DbSet<VwItemLocationSearch> VwItemLocationSearch { get; set; }
        public virtual DbSet<VwItemLocationSearchRpt> VwItemLocationSearchRpt { get; set; }
        public virtual DbSet<VwItemMinPrice> VwItemMinPrice { get; set; }
        public virtual DbSet<VwItemPos> VwItemPos { get; set; }
        public virtual DbSet<VwItemSoPo> VwItemSoPo { get; set; }
        public virtual DbSet<VwItemStockMasterMaintenance> VwItemStockMasterMaintenance { get; set; }
        public virtual DbSet<VwItemStockReminder> VwItemStockReminder { get; set; }
        public virtual DbSet<VwItemuUnit> VwItemuUnit { get; set; }
        public virtual DbSet<VwItemwiseExpiryRpt> VwItemwiseExpiryRpt { get; set; }
        public virtual DbSet<VwItemwisestock> VwItemwisestock { get; set; }
        public virtual DbSet<VwJobsalaryDetails> VwJobsalaryDetails { get; set; }
        public virtual DbSet<VwJwPurchaseFreights> VwJwPurchaseFreights { get; set; }
        public virtual DbSet<VwJwlCreditNoSearch> VwJwlCreditNoSearch { get; set; }
        public virtual DbSet<VwJwlDebitNoSearch> VwJwlDebitNoSearch { get; set; }
        public virtual DbSet<VwJwlPurchaseBarcode> VwJwlPurchaseBarcode { get; set; }
        public virtual DbSet<VwJwlPurchaseDetails> VwJwlPurchaseDetails { get; set; }
        public virtual DbSet<VwJwlPurchaseDetailsDisp> VwJwlPurchaseDetailsDisp { get; set; }
        public virtual DbSet<VwJwlPurchaseForReport> VwJwlPurchaseForReport { get; set; }
        public virtual DbSet<VwJwlPurchaseInvoiceNoSearch> VwJwlPurchaseInvoiceNoSearch { get; set; }
        public virtual DbSet<VwJwlPurchaseInvoiceNoSearchForReturn> VwJwlPurchaseInvoiceNoSearchForReturn { get; set; }
        public virtual DbSet<VwJwlPurchaseReturnEdit> VwJwlPurchaseReturnEdit { get; set; }
        public virtual DbSet<VwJwlPurchaseReturnSub> VwJwlPurchaseReturnSub { get; set; }
        public virtual DbSet<VwJwlSales> VwJwlSales { get; set; }
        public virtual DbSet<VwJwlSalesDetails> VwJwlSalesDetails { get; set; }
        public virtual DbSet<VwJwlSalesRetunEdit> VwJwlSalesRetunEdit { get; set; }
        public virtual DbSet<VwJwlSalesReturnDisp> VwJwlSalesReturnDisp { get; set; }
        public virtual DbSet<VwJwlSalesReturnSearch> VwJwlSalesReturnSearch { get; set; }
        public virtual DbSet<VwJwlSalesReturnSearch1> VwJwlSalesReturnSearch1 { get; set; }
        public virtual DbSet<VwJwlScrapReceived> VwJwlScrapReceived { get; set; }
        public virtual DbSet<VwJwlStockMasterBarcode> VwJwlStockMasterBarcode { get; set; }
        public virtual DbSet<VwJwlStockTransferDetails> VwJwlStockTransferDetails { get; set; }
        public virtual DbSet<VwJwlStockTransferSearch> VwJwlStockTransferSearch { get; set; }
        public virtual DbSet<VwLabourDisp> VwLabourDisp { get; set; }
        public virtual DbSet<VwLanMultilingual> VwLanMultilingual { get; set; }
        public virtual DbSet<VwLastMeeting> VwLastMeeting { get; set; }
        public virtual DbSet<VwLatestLoginDetails> VwLatestLoginDetails { get; set; }
        public virtual DbSet<VwLoanDetails> VwLoanDetails { get; set; }
        public virtual DbSet<VwLoanPaycodes> VwLoanPaycodes { get; set; }
        public virtual DbSet<VwLocationMaster> VwLocationMaster { get; set; }
        public virtual DbSet<VwLogApprovalHistory> VwLogApprovalHistory { get; set; }
        public virtual DbSet<VwLogSysActivity> VwLogSysActivity { get; set; }
        public virtual DbSet<VwLogTransaction> VwLogTransaction { get; set; }
        public virtual DbSet<VwLogTransactionRpt> VwLogTransactionRpt { get; set; }
        public virtual DbSet<VwLoginInfo> VwLoginInfo { get; set; }
        public virtual DbSet<VwManEmployeeMaintenance> VwManEmployeeMaintenance { get; set; }
        public virtual DbSet<VwManifest> VwManifest { get; set; }
        public virtual DbSet<VwManifestStatementRpt> VwManifestStatementRpt { get; set; }
        public virtual DbSet<VwMastGroup> VwMastGroup { get; set; }
        public virtual DbSet<VwMastGroupParent> VwMastGroupParent { get; set; }
        public virtual DbSet<VwMaterialDispatchDetailDisp> VwMaterialDispatchDetailDisp { get; set; }
        public virtual DbSet<VwMaterialDispatchDisp> VwMaterialDispatchDisp { get; set; }
        public virtual DbSet<VwMaterialDispatchRetRpt> VwMaterialDispatchRetRpt { get; set; }
        public virtual DbSet<VwMaterialDispatchegRpt> VwMaterialDispatchegRpt { get; set; }
        public virtual DbSet<VwMedicalInsDeletionEmployee> VwMedicalInsDeletionEmployee { get; set; }
        public virtual DbSet<VwMedicalInsDetailForEmp> VwMedicalInsDetailForEmp { get; set; }
        public virtual DbSet<VwMedicalInsurance> VwMedicalInsurance { get; set; }
        public virtual DbSet<VwMedicalInsuranceAddition> VwMedicalInsuranceAddition { get; set; }
        public virtual DbSet<VwMedicalInsuranceAdditionEmp> VwMedicalInsuranceAdditionEmp { get; set; }
        public virtual DbSet<VwMedicalInsuranceAdditionRpt> VwMedicalInsuranceAdditionRpt { get; set; }
        public virtual DbSet<VwMedicalInsuranceAdditionVendor> VwMedicalInsuranceAdditionVendor { get; set; }
        public virtual DbSet<VwMedicalInsuranceDeletionDetails> VwMedicalInsuranceDeletionDetails { get; set; }
        public virtual DbSet<VwMedicalInsuranceDeletionRpt> VwMedicalInsuranceDeletionRpt { get; set; }
        public virtual DbSet<VwMeetingTrackerCategory> VwMeetingTrackerCategory { get; set; }
        public virtual DbSet<VwMeetingTrackerDashboard> VwMeetingTrackerDashboard { get; set; }
        public virtual DbSet<VwMeetingTrackerList> VwMeetingTrackerList { get; set; }
        public virtual DbSet<VwMenuDisp> VwMenuDisp { get; set; }
        public virtual DbSet<VwMenuFinder> VwMenuFinder { get; set; }
        public virtual DbSet<VwMnpDashboard> VwMnpDashboard { get; set; }
        public virtual DbSet<VwMnpDeMobilization> VwMnpDeMobilization { get; set; }
        public virtual DbSet<VwMnpDemobilizationMaster> VwMnpDemobilizationMaster { get; set; }
        public virtual DbSet<VwMnpDemobilizationdetails> VwMnpDemobilizationdetails { get; set; }
        public virtual DbSet<VwMnpInvoice> VwMnpInvoice { get; set; }
        public virtual DbSet<VwMnpInvoiceDetails> VwMnpInvoiceDetails { get; set; }
        public virtual DbSet<VwMnpInvoiceDisp> VwMnpInvoiceDisp { get; set; }
        public virtual DbSet<VwMnpInvoiceMaster> VwMnpInvoiceMaster { get; set; }
        public virtual DbSet<VwMnpInvoiceMasterDetails> VwMnpInvoiceMasterDetails { get; set; }
        public virtual DbSet<VwMnpMobilizationDetails> VwMnpMobilizationDetails { get; set; }
        public virtual DbSet<VwMnpPriceSettingsDetails> VwMnpPriceSettingsDetails { get; set; }
        public virtual DbSet<VwMnpPriceSettingsDisp> VwMnpPriceSettingsDisp { get; set; }
        public virtual DbSet<VwMnpPriceSettingsMaster> VwMnpPriceSettingsMaster { get; set; }
        public virtual DbSet<VwMnpPriceSettingsPaycodeDetails> VwMnpPriceSettingsPaycodeDetails { get; set; }
        public virtual DbSet<VwMnpProjectWiseEmployeeDisp> VwMnpProjectWiseEmployeeDisp { get; set; }
        public virtual DbSet<VwMonth> VwMonth { get; set; }
        public virtual DbSet<VwMonthlyProcess> VwMonthlyProcess { get; set; }
        public virtual DbSet<VwMrndtlsRpt> VwMrndtlsRpt { get; set; }
        public virtual DbSet<VwMultipleBranch> VwMultipleBranch { get; set; }
        public virtual DbSet<VwMyApprovalDetails> VwMyApprovalDetails { get; set; }
        public virtual DbSet<VwNonPostedPayroll> VwNonPostedPayroll { get; set; }
        public virtual DbSet<VwOnboarddetails> VwOnboarddetails { get; set; }
        public virtual DbSet<VwOpportunities> VwOpportunities { get; set; }
        public virtual DbSet<VwOptPrescription> VwOptPrescription { get; set; }
        public virtual DbSet<VwOrganizationChart> VwOrganizationChart { get; set; }
        public virtual DbSet<VwOtherInformationMasterDisp> VwOtherInformationMasterDisp { get; set; }
        public virtual DbSet<VwOtherPaidAmount> VwOtherPaidAmount { get; set; }
        public virtual DbSet<VwPageList> VwPageList { get; set; }
        public virtual DbSet<VwParentMenuDisp> VwParentMenuDisp { get; set; }
        public virtual DbSet<VwPastApproval> VwPastApproval { get; set; }
        public virtual DbSet<VwPayAccBankDisp> VwPayAccBankDisp { get; set; }
        public virtual DbSet<VwPayAccountSetup> VwPayAccountSetup { get; set; }
        public virtual DbSet<VwPayAccruedCodeList> VwPayAccruedCodeList { get; set; }
        public virtual DbSet<VwPayAddDedTimeSheet> VwPayAddDedTimeSheet { get; set; }
        public virtual DbSet<VwPayAmountDetailsForPay> VwPayAmountDetailsForPay { get; set; }
        public virtual DbSet<VwPayAnualVacations> VwPayAnualVacations { get; set; }
        public virtual DbSet<VwPayApprEmployeeDisp> VwPayApprEmployeeDisp { get; set; }
        public virtual DbSet<VwPayApprovalCodeDisp> VwPayApprovalCodeDisp { get; set; }
        public virtual DbSet<VwPayApprovalCodeDtls> VwPayApprovalCodeDtls { get; set; }
        public virtual DbSet<VwPayAttendanceSheetRpt> VwPayAttendanceSheetRpt { get; set; }
        public virtual DbSet<VwPayBankDisp> VwPayBankDisp { get; set; }
        public virtual DbSet<VwPayCodeItemwiseMapping> VwPayCodeItemwiseMapping { get; set; }
        public virtual DbSet<VwPayCodeItemwiseMappingDetails> VwPayCodeItemwiseMappingDetails { get; set; }
        public virtual DbSet<VwPayCodeItemwiseMappingDetailsRpt> VwPayCodeItemwiseMappingDetailsRpt { get; set; }
        public virtual DbSet<VwPayCodeSettingsDisp> VwPayCodeSettingsDisp { get; set; }
        public virtual DbSet<VwPayCodelistMonthWise> VwPayCodelistMonthWise { get; set; }
        public virtual DbSet<VwPayCompanyPayments> VwPayCompanyPayments { get; set; }
        public virtual DbSet<VwPayCourse> VwPayCourse { get; set; }
        public virtual DbSet<VwPayCsvDetails> VwPayCsvDetails { get; set; }
        public virtual DbSet<VwPayDepartment> VwPayDepartment { get; set; }
        public virtual DbSet<VwPayDepartmentAccounts> VwPayDepartmentAccounts { get; set; }
        public virtual DbSet<VwPayDepartmentAccountsOld> VwPayDepartmentAccountsOld { get; set; }
        public virtual DbSet<VwPayDepartmentDisp> VwPayDepartmentDisp { get; set; }
        public virtual DbSet<VwPayDepartmentForEmployee> VwPayDepartmentForEmployee { get; set; }
        public virtual DbSet<VwPayDepartmentSettings> VwPayDepartmentSettings { get; set; }
        public virtual DbSet<VwPayDepartmentwiseEvaluation> VwPayDepartmentwiseEvaluation { get; set; }
        public virtual DbSet<VwPayDisplinaryAction> VwPayDisplinaryAction { get; set; }
        public virtual DbSet<VwPayEmpEvaluators> VwPayEmpEvaluators { get; set; }
        public virtual DbSet<VwPayEmpEvaluatorsPrevileges> VwPayEmpEvaluatorsPrevileges { get; set; }
        public virtual DbSet<VwPayEmpEvauationList> VwPayEmpEvauationList { get; set; }
        public virtual DbSet<VwPayEmpEvauationRpt> VwPayEmpEvauationRpt { get; set; }
        public virtual DbSet<VwPayEmpHistoryRpt> VwPayEmpHistoryRpt { get; set; }
        public virtual DbSet<VwPayEmpSlipRpt> VwPayEmpSlipRpt { get; set; }
        public virtual DbSet<VwPayEmpVacationAlowance> VwPayEmpVacationAlowance { get; set; }
        public virtual DbSet<VwPayEmpVacationTypes> VwPayEmpVacationTypes { get; set; }
        public virtual DbSet<VwPayEmpandCompanyContribution> VwPayEmpandCompanyContribution { get; set; }
        public virtual DbSet<VwPayEmployee> VwPayEmployee { get; set; }
        public virtual DbSet<VwPayEmployeeAccrul> VwPayEmployeeAccrul { get; set; }
        public virtual DbSet<VwPayEmployeeAlerts> VwPayEmployeeAlerts { get; set; }
        public virtual DbSet<VwPayEmployeeBirthday> VwPayEmployeeBirthday { get; set; }
        public virtual DbSet<VwPayEmployeeClearanceSettings> VwPayEmployeeClearanceSettings { get; set; }
        public virtual DbSet<VwPayEmployeeClearanceSettingsDetails> VwPayEmployeeClearanceSettingsDetails { get; set; }
        public virtual DbSet<VwPayEmployeeDashboard> VwPayEmployeeDashboard { get; set; }
        public virtual DbSet<VwPayEmployeeDetailsForPosting> VwPayEmployeeDetailsForPosting { get; set; }
        public virtual DbSet<VwPayEmployeeDetailsForPostingExcludeLoan> VwPayEmployeeDetailsForPostingExcludeLoan { get; set; }
        public virtual DbSet<VwPayEmployeeDetailsForPostingExpense> VwPayEmployeeDetailsForPostingExpense { get; set; }
        public virtual DbSet<VwPayEmployeeDisp> VwPayEmployeeDisp { get; set; }
        public virtual DbSet<VwPayEmployeeEmailInformation> VwPayEmployeeEmailInformation { get; set; }
        public virtual DbSet<VwPayEmployeeGosIReport> VwPayEmployeeGosIReport { get; set; }
        public virtual DbSet<VwPayEmployeeLedger> VwPayEmployeeLedger { get; set; }
        public virtual DbSet<VwPayEmployeeMaintenanceDisp> VwPayEmployeeMaintenanceDisp { get; set; }
        public virtual DbSet<VwPayEmployeePaidDetaildForEdit> VwPayEmployeePaidDetaildForEdit { get; set; }
        public virtual DbSet<VwPayEmployeePaidDetails> VwPayEmployeePaidDetails { get; set; }
        public virtual DbSet<VwPayEmployeePaidTotal> VwPayEmployeePaidTotal { get; set; }
        public virtual DbSet<VwPayEmployeePayHistory> VwPayEmployeePayHistory { get; set; }
        public virtual DbSet<VwPayEmployeePayHistoryRpt> VwPayEmployeePayHistoryRpt { get; set; }
        public virtual DbSet<VwPayEmployeePaycodes> VwPayEmployeePaycodes { get; set; }
        public virtual DbSet<VwPayEmployeePaycodesAll> VwPayEmployeePaycodesAll { get; set; }
        public virtual DbSet<VwPayEmployeePaycodesGroupWise> VwPayEmployeePaycodesGroupWise { get; set; }
        public virtual DbSet<VwPayEmployeePaymentSearch> VwPayEmployeePaymentSearch { get; set; }
        public virtual DbSet<VwPayEmployeePayments> VwPayEmployeePayments { get; set; }
        public virtual DbSet<VwPayEmployeePaymentsRpt> VwPayEmployeePaymentsRpt { get; set; }
        public virtual DbSet<VwPayEmployeePaymentsRptnew> VwPayEmployeePaymentsRptnew { get; set; }
        public virtual DbSet<VwPayEmployeeRpt> VwPayEmployeeRpt { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryDueDisp> VwPayEmployeeSalaryDueDisp { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryDueDispForBatch> VwPayEmployeeSalaryDueDispForBatch { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryHistoryForrpt> VwPayEmployeeSalaryHistoryForrpt { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryPayments> VwPayEmployeeSalaryPayments { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryPaymentsByBatch> VwPayEmployeeSalaryPaymentsByBatch { get; set; }
        public virtual DbSet<VwPayEmployeeSalaryPaymentsByEmployee> VwPayEmployeeSalaryPaymentsByEmployee { get; set; }
        public virtual DbSet<VwPayEndOfService> VwPayEndOfService { get; set; }
        public virtual DbSet<VwPayEndofserviceRpt> VwPayEndofserviceRpt { get; set; }
        public virtual DbSet<VwPayEosAdjustment> VwPayEosAdjustment { get; set; }
        public virtual DbSet<VwPayEosAdjustmentSearch> VwPayEosAdjustmentSearch { get; set; }
        public virtual DbSet<VwPayEosadjustmentDisp> VwPayEosadjustmentDisp { get; set; }
        public virtual DbSet<VwPayEvaluationDetails> VwPayEvaluationDetails { get; set; }
        public virtual DbSet<VwPayGosiDetailRpt> VwPayGosiDetailRpt { get; set; }
        public virtual DbSet<VwPayGosiPaymentMaster> VwPayGosiPaymentMaster { get; set; }
        public virtual DbSet<VwPayHealthSafety> VwPayHealthSafety { get; set; }
        public virtual DbSet<VwPayHistoryMaster> VwPayHistoryMaster { get; set; }
        public virtual DbSet<VwPayHistoryMasterRpt> VwPayHistoryMasterRpt { get; set; }
        public virtual DbSet<VwPayInsuranceCategory> VwPayInsuranceCategory { get; set; }
        public virtual DbSet<VwPayLastPayrunId> VwPayLastPayrunId { get; set; }
        public virtual DbSet<VwPayLeaveRegistryRpt> VwPayLeaveRegistryRpt { get; set; }
        public virtual DbSet<VwPayLoanApprovals> VwPayLoanApprovals { get; set; }
        public virtual DbSet<VwPayLoanClose> VwPayLoanClose { get; set; }
        public virtual DbSet<VwPayLoanDeductionBalancewise> VwPayLoanDeductionBalancewise { get; set; }
        public virtual DbSet<VwPayLoanIssue> VwPayLoanIssue { get; set; }
        public virtual DbSet<VwPayLoanIssueDisp> VwPayLoanIssueDisp { get; set; }
        public virtual DbSet<VwPayLoanIssueStatus> VwPayLoanIssueStatus { get; set; }
        public virtual DbSet<VwPayLoanRepaymentRpt> VwPayLoanRepaymentRpt { get; set; }
        public virtual DbSet<VwPayLoanStatus> VwPayLoanStatus { get; set; }
        public virtual DbSet<VwPayManagerEmailInformation> VwPayManagerEmailInformation { get; set; }
        public virtual DbSet<VwPayMaster> VwPayMaster { get; set; }
        public virtual DbSet<VwPayMasterDisp> VwPayMasterDisp { get; set; }
        public virtual DbSet<VwPayMedicalInsuranceDeletion> VwPayMedicalInsuranceDeletion { get; set; }
        public virtual DbSet<VwPayMonthlyAddOorDed> VwPayMonthlyAddOorDed { get; set; }
        public virtual DbSet<VwPayNationalityDisp> VwPayNationalityDisp { get; set; }
        public virtual DbSet<VwPayOffDays> VwPayOffDays { get; set; }
        public virtual DbSet<VwPayOpeningBalance> VwPayOpeningBalance { get; set; }
        public virtual DbSet<VwPayOpeningBalanceSearch> VwPayOpeningBalanceSearch { get; set; }
        public virtual DbSet<VwPayOverTimeRpt> VwPayOverTimeRpt { get; set; }
        public virtual DbSet<VwPayOvertimeRequestMasterDisp> VwPayOvertimeRequestMasterDisp { get; set; }
        public virtual DbSet<VwPayParunDetails> VwPayParunDetails { get; set; }
        public virtual DbSet<VwPayPayMaster> VwPayPayMaster { get; set; }
        public virtual DbSet<VwPayPaymasterAccounts> VwPayPaymasterAccounts { get; set; }
        public virtual DbSet<VwPayPaymentMster4rpt> VwPayPaymentMster4rpt { get; set; }
        public virtual DbSet<VwPayPendingAmtsForTermination> VwPayPendingAmtsForTermination { get; set; }
        public virtual DbSet<VwPayPendingLoansList> VwPayPendingLoansList { get; set; }
        public virtual DbSet<VwPayPositionDisp> VwPayPositionDisp { get; set; }
        public virtual DbSet<VwPayPositionDispAdvanced> VwPayPositionDispAdvanced { get; set; }
        public virtual DbSet<VwPayProcessedDetailsCsv> VwPayProcessedDetailsCsv { get; set; }
        public virtual DbSet<VwPayProcessingDetails> VwPayProcessingDetails { get; set; }
        public virtual DbSet<VwPayReceiptMaster> VwPayReceiptMaster { get; set; }
        public virtual DbSet<VwPayRelationDisp> VwPayRelationDisp { get; set; }
        public virtual DbSet<VwPayRoomMaster> VwPayRoomMaster { get; set; }
        public virtual DbSet<VwPaySal4perCal> VwPaySal4perCal { get; set; }
        public virtual DbSet<VwPaySal4perPaycodes> VwPaySal4perPaycodes { get; set; }
        public virtual DbSet<VwPaySalaryGrade> VwPaySalaryGrade { get; set; }
        public virtual DbSet<VwPaySalaryPaymentDisp> VwPaySalaryPaymentDisp { get; set; }
        public virtual DbSet<VwPaySalaryUpdateRpt> VwPaySalaryUpdateRpt { get; set; }
        public virtual DbSet<VwPaySetup> VwPaySetup { get; set; }
        public virtual DbSet<VwPaySetupAdditional> VwPaySetupAdditional { get; set; }
        public virtual DbSet<VwPaySetupForRevision> VwPaySetupForRevision { get; set; }
        public virtual DbSet<VwPaySetupRevision> VwPaySetupRevision { get; set; }
        public virtual DbSet<VwPaySummaryForHoursCalc> VwPaySummaryForHoursCalc { get; set; }
        public virtual DbSet<VwPaySummaryForHoursCalcDeduct> VwPaySummaryForHoursCalcDeduct { get; set; }
        public virtual DbSet<VwPayTickets> VwPayTickets { get; set; }
        public virtual DbSet<VwPayTimeSheet> VwPayTimeSheet { get; set; }
        public virtual DbSet<VwPayTimeSheetEditToExcel> VwPayTimeSheetEditToExcel { get; set; }
        public virtual DbSet<VwPayTimeSheetRpt> VwPayTimeSheetRpt { get; set; }
        public virtual DbSet<VwPayTimesheetMaster4rpt> VwPayTimesheetMaster4rpt { get; set; }
        public virtual DbSet<VwPayTransactionBatchDisp> VwPayTransactionBatchDisp { get; set; }
        public virtual DbSet<VwPayTransactionDetails> VwPayTransactionDetails { get; set; }
        public virtual DbSet<VwPayTransactionDisp> VwPayTransactionDisp { get; set; }
        public virtual DbSet<VwPayTransactionList> VwPayTransactionList { get; set; }
        public virtual DbSet<VwPayVacationCodes> VwPayVacationCodes { get; set; }
        public virtual DbSet<VwPayVacationDetails> VwPayVacationDetails { get; set; }
        public virtual DbSet<VwPayVacationDetailsDisp> VwPayVacationDetailsDisp { get; set; }
        public virtual DbSet<VwPayVacationEmployee> VwPayVacationEmployee { get; set; }
        public virtual DbSet<VwPayVacationList> VwPayVacationList { get; set; }
        public virtual DbSet<VwPayVacationMaster> VwPayVacationMaster { get; set; }
        public virtual DbSet<VwPayVacationMasterDisp> VwPayVacationMasterDisp { get; set; }
        public virtual DbSet<VwPayVacationRemaining> VwPayVacationRemaining { get; set; }
        public virtual DbSet<VwPayVacationRequstsDisp> VwPayVacationRequstsDisp { get; set; }
        public virtual DbSet<VwPayVacationReturn> VwPayVacationReturn { get; set; }
        public virtual DbSet<VwPayVacationTypeDisplay> VwPayVacationTypeDisplay { get; set; }
        public virtual DbSet<VwPayWorkingHours> VwPayWorkingHours { get; set; }
        public virtual DbSet<VwPaycodeGroup> VwPaycodeGroup { get; set; }
        public virtual DbSet<VwPaycodeItemDetails> VwPaycodeItemDetails { get; set; }
        public virtual DbSet<VwPaymentBatchDisp> VwPaymentBatchDisp { get; set; }
        public virtual DbSet<VwPaymentRequest> VwPaymentRequest { get; set; }
        public virtual DbSet<VwPaymentRequestCofigList> VwPaymentRequestCofigList { get; set; }
        public virtual DbSet<VwPaymentStatusDetail> VwPaymentStatusDetail { get; set; }
        public virtual DbSet<VwPaymentStatusDetailByAll> VwPaymentStatusDetailByAll { get; set; }
        public virtual DbSet<VwPaymentStatusDetailByCategory> VwPaymentStatusDetailByCategory { get; set; }
        public virtual DbSet<VwPaymentStatusDetailByProject> VwPaymentStatusDetailByProject { get; set; }
        public virtual DbSet<VwPaymentTypeDisp> VwPaymentTypeDisp { get; set; }
        public virtual DbSet<VwPaymentmethod> VwPaymentmethod { get; set; }
        public virtual DbSet<VwPayreceipt> VwPayreceipt { get; set; }
        public virtual DbSet<VwPendingPoqty> VwPendingPoqty { get; set; }
        public virtual DbSet<VwPendingSalesOrderForDelivery> VwPendingSalesOrderForDelivery { get; set; }
        public virtual DbSet<VwPendingSalesOrderForPrs> VwPendingSalesOrderForPrs { get; set; }
        public virtual DbSet<VwPoMrnStatus> VwPoMrnStatus { get; set; }
        public virtual DbSet<VwPoitemMasterDetails> VwPoitemMasterDetails { get; set; }
        public virtual DbSet<VwPomrnPending> VwPomrnPending { get; set; }
        public virtual DbSet<VwPomrnPendingDetail> VwPomrnPendingDetail { get; set; }
        public virtual DbSet<VwPorderItemDashboard> VwPorderItemDashboard { get; set; }
        public virtual DbSet<VwPrePayment> VwPrePayment { get; set; }
        public virtual DbSet<VwPrePaymentCategoryDetails> VwPrePaymentCategoryDetails { get; set; }
        public virtual DbSet<VwPrePaymentSchedule> VwPrePaymentSchedule { get; set; }
        public virtual DbSet<VwPreviousPaid> VwPreviousPaid { get; set; }
        public virtual DbSet<VwPreviousbalance> VwPreviousbalance { get; set; }
        public virtual DbSet<VwPriceCodeCustomer> VwPriceCodeCustomer { get; set; }
        public virtual DbSet<VwPriceCodeVendor> VwPriceCodeVendor { get; set; }
        public virtual DbSet<VwPrintSelectDisp> VwPrintSelectDisp { get; set; }
        public virtual DbSet<VwPrjClient> VwPrjClient { get; set; }
        public virtual DbSet<VwPrjClientDisp> VwPrjClientDisp { get; set; }
        public virtual DbSet<VwPrjCommission> VwPrjCommission { get; set; }
        public virtual DbSet<VwPrjCommissionDisp> VwPrjCommissionDisp { get; set; }
        public virtual DbSet<VwPrjCostCategory> VwPrjCostCategory { get; set; }
        public virtual DbSet<VwPrjMainProjectStock> VwPrjMainProjectStock { get; set; }
        public virtual DbSet<VwPrjPaymentsReceipts> VwPrjPaymentsReceipts { get; set; }
        public virtual DbSet<VwPrjProjectCodeSearch> VwPrjProjectCodeSearch { get; set; }
        public virtual DbSet<VwPrjProjectDetails> VwPrjProjectDetails { get; set; }
        public virtual DbSet<VwPrjProjectMasterDisp> VwPrjProjectMasterDisp { get; set; }
        public virtual DbSet<VwPrjProjectParameters> VwPrjProjectParameters { get; set; }
        public virtual DbSet<VwPrjProjectPurchaseSales> VwPrjProjectPurchaseSales { get; set; }
        public virtual DbSet<VwPrjProjectWorkLogDisp> VwPrjProjectWorkLogDisp { get; set; }
        public virtual DbSet<VwPrjPtojectPermissionInfo> VwPrjPtojectPermissionInfo { get; set; }
        public virtual DbSet<VwPrjPurchasePayments> VwPrjPurchasePayments { get; set; }
        public virtual DbSet<VwPrjPurchaseVendor> VwPrjPurchaseVendor { get; set; }
        public virtual DbSet<VwPrjSafetyInspection> VwPrjSafetyInspection { get; set; }
        public virtual DbSet<VwPrjSalesCustomer> VwPrjSalesCustomer { get; set; }
        public virtual DbSet<VwPrjSalesReceipts> VwPrjSalesReceipts { get; set; }
        public virtual DbSet<VwPrjTender> VwPrjTender { get; set; }
        public virtual DbSet<VwPrjTenderDashboard> VwPrjTenderDashboard { get; set; }
        public virtual DbSet<VwPrjTimesheet> VwPrjTimesheet { get; set; }
        public virtual DbSet<VwPrjTimesheetRpt> VwPrjTimesheetRpt { get; set; }
        public virtual DbSet<VwPrjVendor> VwPrjVendor { get; set; }
        public virtual DbSet<VwPrjVendorDisp> VwPrjVendorDisp { get; set; }
        public virtual DbSet<VwPrjWorkOrder> VwPrjWorkOrder { get; set; }
        public virtual DbSet<VwPrjWorkOrderDetails> VwPrjWorkOrderDetails { get; set; }
        public virtual DbSet<VwPrjWorkPermitDashBoard> VwPrjWorkPermitDashBoard { get; set; }
        public virtual DbSet<VwProcessedRfq> VwProcessedRfq { get; set; }
        public virtual DbSet<VwProcessedRfqDetails> VwProcessedRfqDetails { get; set; }
        public virtual DbSet<VwProductionRequestSearch> VwProductionRequestSearch { get; set; }
        public virtual DbSet<VwProjectAndCompany> VwProjectAndCompany { get; set; }
        public virtual DbSet<VwProjectAssTxnDetail> VwProjectAssTxnDetail { get; set; }
        public virtual DbSet<VwProjectBoqlist> VwProjectBoqlist { get; set; }
        public virtual DbSet<VwProjectItemDetails> VwProjectItemDetails { get; set; }
        public virtual DbSet<VwProjectQtyDetailsRpt> VwProjectQtyDetailsRpt { get; set; }
        public virtual DbSet<VwProjectTransferDetails> VwProjectTransferDetails { get; set; }
        public virtual DbSet<VwProjectTransferItemDetails> VwProjectTransferItemDetails { get; set; }
        public virtual DbSet<VwProjectTransferMaster> VwProjectTransferMaster { get; set; }
        public virtual DbSet<VwProjectType> VwProjectType { get; set; }
        public virtual DbSet<VwProjectWiseItems> VwProjectWiseItems { get; set; }
        public virtual DbSet<VwProjectWiseTxnDetail> VwProjectWiseTxnDetail { get; set; }
        public virtual DbSet<VwProjectWiseTxnDetailDriver> VwProjectWiseTxnDetailDriver { get; set; }
        public virtual DbSet<VwProjectWorkOrder> VwProjectWorkOrder { get; set; }
        public virtual DbSet<VwProjects> VwProjects { get; set; }
        public virtual DbSet<VwPrsDashboard> VwPrsDashboard { get; set; }
        public virtual DbSet<VwPrsPoMrnDetail> VwPrsPoMrnDetail { get; set; }
        public virtual DbSet<VwPrsPoMrnGroupBy> VwPrsPoMrnGroupBy { get; set; }
        public virtual DbSet<VwPrsPoMrnStatus> VwPrsPoMrnStatus { get; set; }
        public virtual DbSet<VwPrsandRfq> VwPrsandRfq { get; set; }
        public virtual DbSet<VwPrsitemDashboard> VwPrsitemDashboard { get; set; }
        public virtual DbSet<VwPrsnoSearch> VwPrsnoSearch { get; set; }
        public virtual DbSet<VwPurchaseBarcodeDisp> VwPurchaseBarcodeDisp { get; set; }
        public virtual DbSet<VwPurchaseFreightTaxamt> VwPurchaseFreightTaxamt { get; set; }
        public virtual DbSet<VwPurchaseOrderDashboard> VwPurchaseOrderDashboard { get; set; }
        public virtual DbSet<VwPurchaseOrderDisp> VwPurchaseOrderDisp { get; set; }
        public virtual DbSet<VwPurchaseOrderList> VwPurchaseOrderList { get; set; }
        public virtual DbSet<VwPurchaseOrderSo> VwPurchaseOrderSo { get; set; }
        public virtual DbSet<VwPurchaseOrderSub> VwPurchaseOrderSub { get; set; }
        public virtual DbSet<VwPurchasePaymentBarcodeDisp> VwPurchasePaymentBarcodeDisp { get; set; }
        public virtual DbSet<VwQuotaionFollowup> VwQuotaionFollowup { get; set; }
        public virtual DbSet<VwQuotationdetails> VwQuotationdetails { get; set; }
        public virtual DbSet<VwRackwiseRpt> VwRackwiseRpt { get; set; }
        public virtual DbSet<VwRecAppointmentDisp> VwRecAppointmentDisp { get; set; }
        public virtual DbSet<VwRecApproval> VwRecApproval { get; set; }
        public virtual DbSet<VwRecApprovalCycleDetails> VwRecApprovalCycleDetails { get; set; }
        public virtual DbSet<VwRecApprovalMaster> VwRecApprovalMaster { get; set; }
        public virtual DbSet<VwRecEmployeeDependence> VwRecEmployeeDependence { get; set; }
        public virtual DbSet<VwRecEmployeeRequestMaster> VwRecEmployeeRequestMaster { get; set; }
        public virtual DbSet<VwRecJobVacancyDetails> VwRecJobVacancyDetails { get; set; }
        public virtual DbSet<VwRecRecruitment> VwRecRecruitment { get; set; }
        public virtual DbSet<VwRecRecruitmentdetails> VwRecRecruitmentdetails { get; set; }
        public virtual DbSet<VwRecruitdetails> VwRecruitdetails { get; set; }
        public virtual DbSet<VwRecruitmentAcceptance> VwRecruitmentAcceptance { get; set; }
        public virtual DbSet<VwRecruitmentType> VwRecruitmentType { get; set; }
        public virtual DbSet<VwReminderSettingsScreen> VwReminderSettingsScreen { get; set; }
        public virtual DbSet<VwReportLedgerMapping> VwReportLedgerMapping { get; set; }
        public virtual DbSet<VwRequestQuotationDetailsDisp> VwRequestQuotationDetailsDisp { get; set; }
        public virtual DbSet<VwRequestQuotationDisp> VwRequestQuotationDisp { get; set; }
        public virtual DbSet<VwResPaymentStatus> VwResPaymentStatus { get; set; }
        public virtual DbSet<VwResevationEnroledDetailRpt> VwResevationEnroledDetailRpt { get; set; }
        public virtual DbSet<VwResponsiblePerson> VwResponsiblePerson { get; set; }
        public virtual DbSet<VwReturnPendingVacation> VwReturnPendingVacation { get; set; }
        public virtual DbSet<VwRfqVendorSearch> VwRfqVendorSearch { get; set; }
        public virtual DbSet<VwRfqgeneratingDetails> VwRfqgeneratingDetails { get; set; }
        public virtual DbSet<VwRfqgeneratingMaster> VwRfqgeneratingMaster { get; set; }
        public virtual DbSet<VwRstTenentDetails> VwRstTenentDetails { get; set; }
        public virtual DbSet<VwRstTenentInvoice> VwRstTenentInvoice { get; set; }
        public virtual DbSet<VwRstTenentInvoiceDetail> VwRstTenentInvoiceDetail { get; set; }
        public virtual DbSet<VwRstTenentInvoiceDisp> VwRstTenentInvoiceDisp { get; set; }
        public virtual DbSet<VwRstTenentInvoiceTransaction> VwRstTenentInvoiceTransaction { get; set; }
        public virtual DbSet<VwRstTenentInvoices> VwRstTenentInvoices { get; set; }
        public virtual DbSet<VwSalaryDepartment> VwSalaryDepartment { get; set; }
        public virtual DbSet<VwSalaryDetailByBatch> VwSalaryDetailByBatch { get; set; }
        public virtual DbSet<VwSalaryDetailByEmployee> VwSalaryDetailByEmployee { get; set; }
        public virtual DbSet<VwSalaryDetailByEmployeeDisp> VwSalaryDetailByEmployeeDisp { get; set; }
        public virtual DbSet<VwSalaryPaidDisp> VwSalaryPaidDisp { get; set; }
        public virtual DbSet<VwSalaryRivisionDisp> VwSalaryRivisionDisp { get; set; }
        public virtual DbSet<VwSalaryUpdateMonth> VwSalaryUpdateMonth { get; set; }
        public virtual DbSet<VwSalaryissuePaycode> VwSalaryissuePaycode { get; set; }
        public virtual DbSet<VwSalesAmount> VwSalesAmount { get; set; }
        public virtual DbSet<VwSalesAmountCustomer> VwSalesAmountCustomer { get; set; }
        public virtual DbSet<VwSalesBySalesOrder> VwSalesBySalesOrder { get; set; }
        public virtual DbSet<VwSalesCost> VwSalesCost { get; set; }
        public virtual DbSet<VwSalesFunnel> VwSalesFunnel { get; set; }
        public virtual DbSet<VwSalesInvoiceRegRpt> VwSalesInvoiceRegRpt { get; set; }
        public virtual DbSet<VwSalesInvoiceStatusRpt> VwSalesInvoiceStatusRpt { get; set; }
        public virtual DbSet<VwSalesOrderDashboard> VwSalesOrderDashboard { get; set; }
        public virtual DbSet<VwSalesOrderPo> VwSalesOrderPo { get; set; }
        public virtual DbSet<VwSalesOrderQtyDisp> VwSalesOrderQtyDisp { get; set; }
        public virtual DbSet<VwSalesPaymentType> VwSalesPaymentType { get; set; }
        public virtual DbSet<VwSalesQuotation> VwSalesQuotation { get; set; }
        public virtual DbSet<VwSalesRegisterRpt> VwSalesRegisterRpt { get; set; }
        public virtual DbSet<VwSalesReturnImei> VwSalesReturnImei { get; set; }
        public virtual DbSet<VwSalesReturnMasterWithoutSaleDisp> VwSalesReturnMasterWithoutSaleDisp { get; set; }
        public virtual DbSet<VwSalesReturnPending> VwSalesReturnPending { get; set; }
        public virtual DbSet<VwSalesReturnPendingRpt> VwSalesReturnPendingRpt { get; set; }
        public virtual DbSet<VwSalesReturnWithoutSaleDisp> VwSalesReturnWithoutSaleDisp { get; set; }
        public virtual DbSet<VwSalesRpt> VwSalesRpt { get; set; }
        public virtual DbSet<VwSalesUsers> VwSalesUsers { get; set; }
        public virtual DbSet<VwSalesmanAppcount> VwSalesmanAppcount { get; set; }
        public virtual DbSet<VwSalesmanFromSalesOrderDisp> VwSalesmanFromSalesOrderDisp { get; set; }
        public virtual DbSet<VwSalesmanSummary> VwSalesmanSummary { get; set; }
        public virtual DbSet<VwSatrtupmenuDisp> VwSatrtupmenuDisp { get; set; }
        public virtual DbSet<VwSchAccountUsers> VwSchAccountUsers { get; set; }
        public virtual DbSet<VwSchAdmission> VwSchAdmission { get; set; }
        public virtual DbSet<VwSchAdmissionClass> VwSchAdmissionClass { get; set; }
        public virtual DbSet<VwSchAdmissionDetailsDisp> VwSchAdmissionDetailsDisp { get; set; }
        public virtual DbSet<VwSchAdmissionDisp> VwSchAdmissionDisp { get; set; }
        public virtual DbSet<VwSchAdmissionDisp1> VwSchAdmissionDisp1 { get; set; }
        public virtual DbSet<VwSchAdmissionFee> VwSchAdmissionFee { get; set; }
        public virtual DbSet<VwSchAdmissionFeeCatogory> VwSchAdmissionFeeCatogory { get; set; }
        public virtual DbSet<VwSchAdmissionReservation> VwSchAdmissionReservation { get; set; }
        public virtual DbSet<VwSchAdmissionReservationDisp> VwSchAdmissionReservationDisp { get; set; }
        public virtual DbSet<VwSchAdmissionWthFeeCategory> VwSchAdmissionWthFeeCategory { get; set; }
        public virtual DbSet<VwSchAttendanceDisp> VwSchAttendanceDisp { get; set; }
        public virtual DbSet<VwSchBookDisp> VwSchBookDisp { get; set; }
        public virtual DbSet<VwSchBookDistibutionDetail> VwSchBookDistibutionDetail { get; set; }
        public virtual DbSet<VwSchBookDistributionDisp> VwSchBookDistributionDisp { get; set; }
        public virtual DbSet<VwSchBookTransDetails> VwSchBookTransDetails { get; set; }
        public virtual DbSet<VwSchBusRoute> VwSchBusRoute { get; set; }
        public virtual DbSet<VwSchBusRouteDetailDisp> VwSchBusRouteDetailDisp { get; set; }
        public virtual DbSet<VwSchBusRouteDisp> VwSchBusRouteDisp { get; set; }
        public virtual DbSet<VwSchBusScheduleRpt> VwSchBusScheduleRpt { get; set; }
        public virtual DbSet<VwSchBusStop> VwSchBusStop { get; set; }
        public virtual DbSet<VwSchCertificateSibblings> VwSchCertificateSibblings { get; set; }
        public virtual DbSet<VwSchClass> VwSchClass { get; set; }
        public virtual DbSet<VwSchClassDisp> VwSchClassDisp { get; set; }
        public virtual DbSet<VwSchClassDisp1> VwSchClassDisp1 { get; set; }
        public virtual DbSet<VwSchClassDivDisp> VwSchClassDivDisp { get; set; }
        public virtual DbSet<VwSchClassDivision> VwSchClassDivision { get; set; }
        public virtual DbSet<VwSchClassDivisionDisp> VwSchClassDivisionDisp { get; set; }
        public virtual DbSet<VwSchClassFeeCategorySelect> VwSchClassFeeCategorySelect { get; set; }
        public virtual DbSet<VwSchClassFeeSelect> VwSchClassFeeSelect { get; set; }
        public virtual DbSet<VwSchClassFeeSetup> VwSchClassFeeSetup { get; set; }
        public virtual DbSet<VwSchClassFeeSetupDisp> VwSchClassFeeSetupDisp { get; set; }
        public virtual DbSet<VwSchClassMasterDisp> VwSchClassMasterDisp { get; set; }
        public virtual DbSet<VwSchClassTypeAccounts> VwSchClassTypeAccounts { get; set; }
        public virtual DbSet<VwSchClassTypeDefAccount> VwSchClassTypeDefAccount { get; set; }
        public virtual DbSet<VwSchClassTypeDefGroup> VwSchClassTypeDefGroup { get; set; }
        public virtual DbSet<VwSchClassTypeDisp> VwSchClassTypeDisp { get; set; }
        public virtual DbSet<VwSchClassTypeFeeSetup> VwSchClassTypeFeeSetup { get; set; }
        public virtual DbSet<VwSchClinicDisp> VwSchClinicDisp { get; set; }
        public virtual DbSet<VwSchDriverRegistration> VwSchDriverRegistration { get; set; }
        public virtual DbSet<VwSchDriverRegistrationDisp> VwSchDriverRegistrationDisp { get; set; }
        public virtual DbSet<VwSchFeeAccountDefaults> VwSchFeeAccountDefaults { get; set; }
        public virtual DbSet<VwSchFeeAdvanceRpt> VwSchFeeAdvanceRpt { get; set; }
        public virtual DbSet<VwSchFeeCategoryType> VwSchFeeCategoryType { get; set; }
        public virtual DbSet<VwSchFeeCategoryTypeDirection> VwSchFeeCategoryTypeDirection { get; set; }
        public virtual DbSet<VwSchFeeDefaulters> VwSchFeeDefaulters { get; set; }
        public virtual DbSet<VwSchFeeListForReceipt> VwSchFeeListForReceipt { get; set; }
        public virtual DbSet<VwSchFeeListForReceiptEdit> VwSchFeeListForReceiptEdit { get; set; }
        public virtual DbSet<VwSchFeeMapping> VwSchFeeMapping { get; set; }
        public virtual DbSet<VwSchFeeReceiptDetails> VwSchFeeReceiptDetails { get; set; }
        public virtual DbSet<VwSchFeeReceiptDetailsTotal> VwSchFeeReceiptDetailsTotal { get; set; }
        public virtual DbSet<VwSchFeeReceiptDisp> VwSchFeeReceiptDisp { get; set; }
        public virtual DbSet<VwSchFeeReceiptPsd> VwSchFeeReceiptPsd { get; set; }
        public virtual DbSet<VwSchFeeReceiptStatemntRpt> VwSchFeeReceiptStatemntRpt { get; set; }
        public virtual DbSet<VwSchFeeReceiptTotal> VwSchFeeReceiptTotal { get; set; }
        public virtual DbSet<VwSchFeeReturnDetails> VwSchFeeReturnDetails { get; set; }
        public virtual DbSet<VwSchFeeReturnDetails1> VwSchFeeReturnDetails1 { get; set; }
        public virtual DbSet<VwSchFeeReturnDisp> VwSchFeeReturnDisp { get; set; }
        public virtual DbSet<VwSchFeeSummaryByFees> VwSchFeeSummaryByFees { get; set; }
        public virtual DbSet<VwSchFeeTypeDisp> VwSchFeeTypeDisp { get; set; }
        public virtual DbSet<VwSchFeeTypeDisp1> VwSchFeeTypeDisp1 { get; set; }
        public virtual DbSet<VwSchFeeTypeDisp2> VwSchFeeTypeDisp2 { get; set; }
        public virtual DbSet<VwSchFeeUpdateDisp> VwSchFeeUpdateDisp { get; set; }
        public virtual DbSet<VwSchFeesDetailsAnalysisRpt> VwSchFeesDetailsAnalysisRpt { get; set; }
        public virtual DbSet<VwSchFeesDetailsRpt> VwSchFeesDetailsRpt { get; set; }
        public virtual DbSet<VwSchFeesDueDetails> VwSchFeesDueDetails { get; set; }
        public virtual DbSet<VwSchFeesDueDetailsForRpt> VwSchFeesDueDetailsForRpt { get; set; }
        public virtual DbSet<VwSchFeesDueDetailsRpt> VwSchFeesDueDetailsRpt { get; set; }
        public virtual DbSet<VwSchFeesNoDueDetailsForRpt> VwSchFeesNoDueDetailsForRpt { get; set; }
        public virtual DbSet<VwSchFeesSummaryRpt> VwSchFeesSummaryRpt { get; set; }
        public virtual DbSet<VwSchFeesSummaryRpt1> VwSchFeesSummaryRpt1 { get; set; }
        public virtual DbSet<VwSchParentDetailsDisp> VwSchParentDetailsDisp { get; set; }
        public virtual DbSet<VwSchParentDetailsDisp1> VwSchParentDetailsDisp1 { get; set; }
        public virtual DbSet<VwSchParentDetailsDisp2> VwSchParentDetailsDisp2 { get; set; }
        public virtual DbSet<VwSchParentLetterRpt> VwSchParentLetterRpt { get; set; }
        public virtual DbSet<VwSchParentWithMoreStudents> VwSchParentWithMoreStudents { get; set; }
        public virtual DbSet<VwSchPrefectManagerDisp> VwSchPrefectManagerDisp { get; set; }
        public virtual DbSet<VwSchPromotionDisp> VwSchPromotionDisp { get; set; }
        public virtual DbSet<VwSchPromotionDisp1> VwSchPromotionDisp1 { get; set; }
        public virtual DbSet<VwSchPromotionFeeSetup> VwSchPromotionFeeSetup { get; set; }
        public virtual DbSet<VwSchPromotionMaster> VwSchPromotionMaster { get; set; }
        public virtual DbSet<VwSchReceiptSearch> VwSchReceiptSearch { get; set; }
        public virtual DbSet<VwSchReceiptSearchReturn> VwSchReceiptSearchReturn { get; set; }
        public virtual DbSet<VwSchReceiptprintCustom> VwSchReceiptprintCustom { get; set; }
        public virtual DbSet<VwSchRegDisp> VwSchRegDisp { get; set; }
        public virtual DbSet<VwSchReginAdmission> VwSchReginAdmission { get; set; }
        public virtual DbSet<VwSchRemainingBookStatus> VwSchRemainingBookStatus { get; set; }
        public virtual DbSet<VwSchReservationDetailsExisting> VwSchReservationDetailsExisting { get; set; }
        public virtual DbSet<VwSchReservationPaymentDetail> VwSchReservationPaymentDetail { get; set; }
        public virtual DbSet<VwSchReservationPaymentRpt> VwSchReservationPaymentRpt { get; set; }
        public virtual DbSet<VwSchReservationRpt> VwSchReservationRpt { get; set; }
        public virtual DbSet<VwSchSalesDetails> VwSchSalesDetails { get; set; }
        public virtual DbSet<VwSchSectionFee> VwSchSectionFee { get; set; }
        public virtual DbSet<VwSchSessionReservationCount> VwSchSessionReservationCount { get; set; }
        public virtual DbSet<VwSchStudenFeeReturnRpt> VwSchStudenFeeReturnRpt { get; set; }
        public virtual DbSet<VwSchStudenRegDisp> VwSchStudenRegDisp { get; set; }
        public virtual DbSet<VwSchStudentBookDetail> VwSchStudentBookDetail { get; set; }
        public virtual DbSet<VwSchStudentBusRegList> VwSchStudentBusRegList { get; set; }
        public virtual DbSet<VwSchStudentDashboard> VwSchStudentDashboard { get; set; }
        public virtual DbSet<VwSchStudentEnrollmentDisp> VwSchStudentEnrollmentDisp { get; set; }
        public virtual DbSet<VwSchStudentFeeAdvanceDetails> VwSchStudentFeeAdvanceDetails { get; set; }
        public virtual DbSet<VwSchStudentFeeDiscountDetails> VwSchStudentFeeDiscountDetails { get; set; }
        public virtual DbSet<VwSchStudentHistory> VwSchStudentHistory { get; set; }
        public virtual DbSet<VwSchStudentPersonalDetailsRpt> VwSchStudentPersonalDetailsRpt { get; set; }
        public virtual DbSet<VwSchStudentRegDetails> VwSchStudentRegDetails { get; set; }
        public virtual DbSet<VwSchStudentReservationDisp> VwSchStudentReservationDisp { get; set; }
        public virtual DbSet<VwSchStudentResidentialExpiry> VwSchStudentResidentialExpiry { get; set; }
        public virtual DbSet<VwSchStudentStatement> VwSchStudentStatement { get; set; }
        public virtual DbSet<VwSchTerm> VwSchTerm { get; set; }
        public virtual DbSet<VwSchVehicleRegistration> VwSchVehicleRegistration { get; set; }
        public virtual DbSet<VwSchVehicleRegistrationDisp> VwSchVehicleRegistrationDisp { get; set; }
        public virtual DbSet<VwSchYearSectinClass> VwSchYearSectinClass { get; set; }
        public virtual DbSet<VwSchYearSectionClass> VwSchYearSectionClass { get; set; }
        public virtual DbSet<VwSchstudentcountRpt> VwSchstudentcountRpt { get; set; }
        public virtual DbSet<VwSchstudentcountSummary> VwSchstudentcountSummary { get; set; }
        public virtual DbSet<VwScreenWisePosting> VwScreenWisePosting { get; set; }
        public virtual DbSet<VwScreens> VwScreens { get; set; }
        public virtual DbSet<VwSecAppSettings> VwSecAppSettings { get; set; }
        public virtual DbSet<VwSecApprovalSettingsEmployeeDetails> VwSecApprovalSettingsEmployeeDetails { get; set; }
        public virtual DbSet<VwSecUser> VwSecUser { get; set; }
        public virtual DbSet<VwSecUserApproval> VwSecUserApproval { get; set; }
        public virtual DbSet<VwSecUserLevelDisp> VwSecUserLevelDisp { get; set; }
        public virtual DbSet<VwSecUserLevelPermissionDisp> VwSecUserLevelPermissionDisp { get; set; }
        public virtual DbSet<VwSecUserList> VwSecUserList { get; set; }
        public virtual DbSet<VwSelGosiRpt> VwSelGosiRpt { get; set; }
        public virtual DbSet<VwSelectedPaycodes> VwSelectedPaycodes { get; set; }
        public virtual DbSet<VwServiceBookingDeliveryDisp> VwServiceBookingDeliveryDisp { get; set; }
        public virtual DbSet<VwServiceBookingSearch> VwServiceBookingSearch { get; set; }
        public virtual DbSet<VwServiceDashboard> VwServiceDashboard { get; set; }
        public virtual DbSet<VwServiceDashboard1> VwServiceDashboard1 { get; set; }
        public virtual DbSet<VwServiceEndSettings> VwServiceEndSettings { get; set; }
        public virtual DbSet<VwServiceScheduleDisp> VwServiceScheduleDisp { get; set; }
        public virtual DbSet<VwServiceSheetPurchase> VwServiceSheetPurchase { get; set; }
        public virtual DbSet<VwServiceSheetSales> VwServiceSheetSales { get; set; }
        public virtual DbSet<VwServiceStatus> VwServiceStatus { get; set; }
        public virtual DbSet<VwShowSerialList> VwShowSerialList { get; set; }
        public virtual DbSet<VwSoReturnDetails> VwSoReturnDetails { get; set; }
        public virtual DbSet<VwSoitemMasterDetails> VwSoitemMasterDetails { get; set; }
        public virtual DbSet<VwSrnInvDepartmentDisp> VwSrnInvDepartmentDisp { get; set; }
        public virtual DbSet<VwStartupmenu> VwStartupmenu { get; set; }
        public virtual DbSet<VwStatementsOfAccounts> VwStatementsOfAccounts { get; set; }
        public virtual DbSet<VwStatementsOfAccountsDetailed> VwStatementsOfAccountsDetailed { get; set; }
        public virtual DbSet<VwStatusUpdateRpt> VwStatusUpdateRpt { get; set; }
        public virtual DbSet<VwStockAgeingReport> VwStockAgeingReport { get; set; }
        public virtual DbSet<VwStockMasterMrnPurchase> VwStockMasterMrnPurchase { get; set; }
        public virtual DbSet<VwStockOut> VwStockOut { get; set; }
        public virtual DbSet<VwStockPeriodWise> VwStockPeriodWise { get; set; }
        public virtual DbSet<VwStockPeriodWiseRpt> VwStockPeriodWiseRpt { get; set; }
        public virtual DbSet<VwStockRePosting> VwStockRePosting { get; set; }
        public virtual DbSet<VwStockStatus1> VwStockStatus1 { get; set; }
        public virtual DbSet<VwStockstatusbylocation> VwStockstatusbylocation { get; set; }
        public virtual DbSet<VwStudentAttendanceDetail> VwStudentAttendanceDetail { get; set; }
        public virtual DbSet<VwStudentFeeStatementRpt> VwStudentFeeStatementRpt { get; set; }
        public virtual DbSet<VwStudentStatusRpt> VwStudentStatusRpt { get; set; }
        public virtual DbSet<VwStudentSummaryGenderRpt> VwStudentSummaryGenderRpt { get; set; }
        public virtual DbSet<VwSupervisor> VwSupervisor { get; set; }
        public virtual DbSet<VwSupervisorDisp> VwSupervisorDisp { get; set; }
        public virtual DbSet<VwSupervisorDisp1> VwSupervisorDisp1 { get; set; }
        public virtual DbSet<VwSupervisorReportTo> VwSupervisorReportTo { get; set; }
        public virtual DbSet<VwTaxCategoryDisp> VwTaxCategoryDisp { get; set; }
        public virtual DbSet<VwTaxCategoryType> VwTaxCategoryType { get; set; }
        public virtual DbSet<VwTaxDetailsRpt> VwTaxDetailsRpt { get; set; }
        public virtual DbSet<VwTaxMainReportRpt> VwTaxMainReportRpt { get; set; }
        public virtual DbSet<VwTemp> VwTemp { get; set; }
        public virtual DbSet<VwTerminalSettings> VwTerminalSettings { get; set; }
        public virtual DbSet<VwTerms> VwTerms { get; set; }
        public virtual DbSet<VwTicketDashBoard> VwTicketDashBoard { get; set; }
        public virtual DbSet<VwTickethistorypopup> VwTickethistorypopup { get; set; }
        public virtual DbSet<VwTicketingPayDetails> VwTicketingPayDetails { get; set; }
        public virtual DbSet<VwTimeSheetMasterDisp> VwTimeSheetMasterDisp { get; set; }
        public virtual DbSet<VwTimeSheetYearRpt> VwTimeSheetYearRpt { get; set; }
        public virtual DbSet<VwTimesheetImportDisp> VwTimesheetImportDisp { get; set; }
        public virtual DbSet<VwTotalDiscAppliedInvoices> VwTotalDiscAppliedInvoices { get; set; }
        public virtual DbSet<VwTrainingAttendanceDetails> VwTrainingAttendanceDetails { get; set; }
        public virtual DbSet<VwTrainingAttendanceMaster> VwTrainingAttendanceMaster { get; set; }
        public virtual DbSet<VwTrainingAttendanceRpt> VwTrainingAttendanceRpt { get; set; }
        public virtual DbSet<VwTrainingRequest> VwTrainingRequest { get; set; }
        public virtual DbSet<VwTransTypeRpt> VwTransTypeRpt { get; set; }
        public virtual DbSet<VwTransactionType> VwTransactionType { get; set; }
        public virtual DbSet<VwTransferReceiveDetails> VwTransferReceiveDetails { get; set; }
        public virtual DbSet<VwTransferStockRpt> VwTransferStockRpt { get; set; }
        public virtual DbSet<VwTvlPaymentDetails> VwTvlPaymentDetails { get; set; }
        public virtual DbSet<VwTvlReporting> VwTvlReporting { get; set; }
        public virtual DbSet<VwTvlTicketing> VwTvlTicketing { get; set; }
        public virtual DbSet<VwTvlTicketingPrimaryKeys> VwTvlTicketingPrimaryKeys { get; set; }
        public virtual DbSet<VwUcItem> VwUcItem { get; set; }
        public virtual DbSet<VwUcItemSearch> VwUcItemSearch { get; set; }
        public virtual DbSet<VwUcItemWithStockQty> VwUcItemWithStockQty { get; set; }
        public virtual DbSet<VwUcinvPrsnoDeliverySearch> VwUcinvPrsnoDeliverySearch { get; set; }
        public virtual DbSet<VwUcinvPrsnoDeliverySearchNested> VwUcinvPrsnoDeliverySearchNested { get; set; }
        public virtual DbSet<VwUcsalesOrderSearchInDelivery> VwUcsalesOrderSearchInDelivery { get; set; }
        public virtual DbSet<VwUcsalesOrderSearchInPrs> VwUcsalesOrderSearchInPrs { get; set; }
        public virtual DbSet<VwUserCategoryDisp> VwUserCategoryDisp { get; set; }
        public virtual DbSet<VwUserDetails> VwUserDetails { get; set; }
        public virtual DbSet<VwUserLevelApprovalSettings> VwUserLevelApprovalSettings { get; set; }
        public virtual DbSet<VwUserListLevelSettings> VwUserListLevelSettings { get; set; }
        public virtual DbSet<VwUserMenus> VwUserMenus { get; set; }
        public virtual DbSet<VwUserMenusAllDisp> VwUserMenusAllDisp { get; set; }
        public virtual DbSet<VwUserMenusDisp> VwUserMenusDisp { get; set; }
        public virtual DbSet<VwUserMenusList> VwUserMenusList { get; set; }
        public virtual DbSet<VwUserPrevileges> VwUserPrevileges { get; set; }
        public virtual DbSet<VwUserPrevilegesDisp> VwUserPrevilegesDisp { get; set; }
        public virtual DbSet<VwUserRoleDisp> VwUserRoleDisp { get; set; }
        public virtual DbSet<VwUserTransaction> VwUserTransaction { get; set; }
        public virtual DbSet<VwUserwiseEmployees> VwUserwiseEmployees { get; set; }
        public virtual DbSet<VwVacationCount> VwVacationCount { get; set; }
        public virtual DbSet<VwVacationDetails> VwVacationDetails { get; set; }
        public virtual DbSet<VwVchServiceDetails> VwVchServiceDetails { get; set; }
        public virtual DbSet<VwVchServicePrint> VwVchServicePrint { get; set; }
        public virtual DbSet<VwVchServiceReport> VwVchServiceReport { get; set; }
        public virtual DbSet<VwVehAuctionSearch> VwVehAuctionSearch { get; set; }
        public virtual DbSet<VwVehContractSearch> VwVehContractSearch { get; set; }
        public virtual DbSet<VwVehCustomerRemider> VwVehCustomerRemider { get; set; }
        public virtual DbSet<VwVehCustomerTrans> VwVehCustomerTrans { get; set; }
        public virtual DbSet<VwVehFileMoving> VwVehFileMoving { get; set; }
        public virtual DbSet<VwVehFileMovingNew> VwVehFileMovingNew { get; set; }
        public virtual DbSet<VwVehFileMovingSearch> VwVehFileMovingSearch { get; set; }
        public virtual DbSet<VwVehTruckDetails> VwVehTruckDetails { get; set; }
        public virtual DbSet<VwVendorBalanceAdjustment> VwVendorBalanceAdjustment { get; set; }
        public virtual DbSet<VwVendorRequest> VwVendorRequest { get; set; }
        public virtual DbSet<VwVendoradvancepay> VwVendoradvancepay { get; set; }
        public virtual DbSet<VwVendoradvpayall> VwVendoradvpayall { get; set; }
        public virtual DbSet<VwVoucherAssetLimit> VwVoucherAssetLimit { get; set; }
        public virtual DbSet<VwVoucherTransaction> VwVoucherTransaction { get; set; }
        public virtual DbSet<VwVsaAgeingreport> VwVsaAgeingreport { get; set; }
        public virtual DbSet<VwVsaAppointmentDisp> VwVsaAppointmentDisp { get; set; }
        public virtual DbSet<VwVsaClientFileStatusDetail> VwVsaClientFileStatusDetail { get; set; }
        public virtual DbSet<VwVsaConsultantDisp> VwVsaConsultantDisp { get; set; }
        public virtual DbSet<VwVsaCvRegistrationDisp> VwVsaCvRegistrationDisp { get; set; }
        public virtual DbSet<VwVsaDashBoard> VwVsaDashBoard { get; set; }
        public virtual DbSet<VwVsaDashBoardAppointment> VwVsaDashBoardAppointment { get; set; }
        public virtual DbSet<VwVsaFileCancel> VwVsaFileCancel { get; set; }
        public virtual DbSet<VwVsaFileCreationRpt> VwVsaFileCreationRpt { get; set; }
        public virtual DbSet<VwVsaFileDisp> VwVsaFileDisp { get; set; }
        public virtual DbSet<VwVsaFileHistoryDisp> VwVsaFileHistoryDisp { get; set; }
        public virtual DbSet<VwVsaFilePayDetail> VwVsaFilePayDetail { get; set; }
        public virtual DbSet<VwVsaFilePayDisp> VwVsaFilePayDisp { get; set; }
        public virtual DbSet<VwVsaFollowUpDisp> VwVsaFollowUpDisp { get; set; }
        public virtual DbSet<VwVsaHistory> VwVsaHistory { get; set; }
        public virtual DbSet<VwVsaOccupationDisp> VwVsaOccupationDisp { get; set; }
        public virtual DbSet<VwVsaParalegalDisp> VwVsaParalegalDisp { get; set; }
        public virtual DbSet<VwVsaPaymentdetails> VwVsaPaymentdetails { get; set; }
        public virtual DbSet<VwVsaPaymentdetailsDefault> VwVsaPaymentdetailsDefault { get; set; }
        public virtual DbSet<VwVsaRegistrationStatusDetail> VwVsaRegistrationStatusDetail { get; set; }
        public virtual DbSet<VwVsaWebDashBoard> VwVsaWebDashBoard { get; set; }
        public virtual DbSet<VwVsaWebFileStatus> VwVsaWebFileStatus { get; set; }
        public virtual DbSet<VwWarehouseDashboard> VwWarehouseDashboard { get; set; }
        public virtual DbSet<VwWebApprovalActionDisp> VwWebApprovalActionDisp { get; set; }
        public virtual DbSet<VwWebApprovalDashboard> VwWebApprovalDashboard { get; set; }
        public virtual DbSet<VwWebApprovalDashboardHistory> VwWebApprovalDashboardHistory { get; set; }
        public virtual DbSet<VwWebMyTeamList> VwWebMyTeamList { get; set; }
        public virtual DbSet<VwWebPayEmployeeDisp> VwWebPayEmployeeDisp { get; set; }
        public virtual DbSet<VwWebPayEmployeeUserProfile> VwWebPayEmployeeUserProfile { get; set; }
        public virtual DbSet<VwWebPayEmpoyeeSalaryDetails> VwWebPayEmpoyeeSalaryDetails { get; set; }
        public virtual DbSet<VwWebPayNewsDisp> VwWebPayNewsDisp { get; set; }
        public virtual DbSet<VwWebPayNoticeBoardDisp> VwWebPayNoticeBoardDisp { get; set; }
        public virtual DbSet<VwWebPaySupervisorEmail> VwWebPaySupervisorEmail { get; set; }
        public virtual DbSet<VwWebPaySupervisorEmployeeList> VwWebPaySupervisorEmployeeList { get; set; }
        public virtual DbSet<VwWebVacApprovalDashboard> VwWebVacApprovalDashboard { get; set; }
        public virtual DbSet<VwWorkOrderList> VwWorkOrderList { get; set; }
        public virtual DbSet<VwWorkOrderSearch> VwWorkOrderSearch { get; set; }
        public virtual DbSet<VwWorkOrderVendor> VwWorkOrderVendor { get; set; }
        public virtual DbSet<WebOnlineUpdate> WebOnlineUpdate { get; set; }
        public virtual DbSet<WebPayApprovalSystem> WebPayApprovalSystem { get; set; }
        public virtual DbSet<WebPayApprovalSystemDetails> WebPayApprovalSystemDetails { get; set; }
        public virtual DbSet<WebPayEmployeeLogin> WebPayEmployeeLogin { get; set; }
        public virtual DbSet<WebPayLoanIssue> WebPayLoanIssue { get; set; }
        public virtual DbSet<WebPayNews> WebPayNews { get; set; }
        public virtual DbSet<WebPayNoticeBoard> WebPayNoticeBoard { get; set; }
        public virtual DbSet<WebPayVacationRequest> WebPayVacationRequest { get; set; }
        public virtual DbSet<WebPayVacationStatus> WebPayVacationStatus { get; set; }
        public virtual DbSet<WebVsaCvRegistration> WebVsaCvRegistration { get; set; }
        public virtual DbSet<WebVwPayLoanIssueStatus> WebVwPayLoanIssueStatus { get; set; }
        public virtual DbSet<WwPayAccruedCodeList> WwPayAccruedCodeList { get; set; }
        public virtual DbSet<WwVsaFileCancel> WwVsaFileCancel { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=192.168.100.18;Database=Live_Sx20_Keir_RKS; User ID=sa; Password=b4u; Trusted_Connection=false;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccAccountDefaults>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NCompanyId, e.XFieldDescr })
                    .HasName("IND_Acc_AccountDefaults");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NType).HasDefaultValueSql("((0))");

                entity.Property(e => e.XFieldDescr).IsUnicode(false);
            });

            modelBuilder.Entity<AccAccountStatement>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NAgainstLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<AccAgedPayables>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<AccAgedReceivables>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<AccBankMaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NBankId, e.NFnYearId });

                entity.Property(e => e.BIscompany).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCsvtemplatePath).IsUnicode(false);

                entity.Property(e => e.XEmaiId).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIban).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XStreet).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<AccBranchMaster>(entity =>
            {
                entity.Property(e => e.NBranchId).ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XMapInfo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccBranchMaster)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Acc_BranchMaster_Acc_Company");
            });

            modelBuilder.Entity<AccBudgeting>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<AccCashFlowCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<AccChequeTransaction>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NChequeTranId, e.NFnYearId });

                entity.Property(e => e.NBankId).IsUnicode(false);

                entity.Property(e => e.XAmtInWords).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPlaceOfIssue).IsUnicode(false);

                entity.Property(e => e.XRemark).IsUnicode(false);
            });

            modelBuilder.Entity<AccCompany>(entity =>
            {
                entity.HasKey(e => e.NCompanyId)
                    .HasName("PK_Inv_Company");

                entity.Property(e => e.NCompanyId).ValueGeneratedNever();

                entity.Property(e => e.BInactive).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCertifications).IsUnicode(false);

                entity.Property(e => e.XColorCode).IsUnicode(false);

                entity.Property(e => e.XCompanyCode).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCompanyNameAr).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XFaxNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XHistory).IsUnicode(false);

                entity.Property(e => e.XOperatingSince).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XShippingAppartment).IsUnicode(false);

                entity.Property(e => e.XShippingCity).IsUnicode(false);

                entity.Property(e => e.XShippingName).IsUnicode(false);

                entity.Property(e => e.XShippingPhone).IsUnicode(false);

                entity.Property(e => e.XShippingState).IsUnicode(false);

                entity.Property(e => e.XShippingStreet).IsUnicode(false);

                entity.Property(e => e.XShippingZip).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XSlogan).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationName).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XWebsite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<AccCompanyAttachments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XExtension).IsUnicode(false);

                entity.Property(e => e.XFile).IsUnicode(false);

                entity.Property(e => e.XFileType).IsUnicode(false);

                entity.Property(e => e.XFilename).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<AccCostCentreMaster>(entity =>
            {
                entity.Property(e => e.NCostCentreId).ValueGeneratedNever();

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);
            });

            modelBuilder.Entity<AccCostCentreTransactions>(entity =>
            {
                entity.Property(e => e.NCostCenterTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XNaration)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XNarration)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AccCountry>(entity =>
            {
                entity.Property(e => e.NCountryId).ValueGeneratedNever();

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XCountryName).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);
            });

            modelBuilder.Entity<AccCurrencyMaster>(entity =>
            {
                entity.Property(e => e.NCurrencyId).ValueGeneratedNever();

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);
            });

            modelBuilder.Entity<AccDayclosing>(entity =>
            {
                entity.Property(e => e.NCloseId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XSystemName).IsUnicode(false);
            });

            modelBuilder.Entity<AccFnYear>(entity =>
            {
                entity.Property(e => e.NFnYearId).ValueGeneratedNever();

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccFnYear)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_FnYear_Inv_Company");
            });

            modelBuilder.Entity<AccGroupMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);
            });

            modelBuilder.Entity<AccImportBank>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.CrAmount).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DValueDate).IsUnicode(false);

                entity.Property(e => e.DateFormat).IsUnicode(false);

                entity.Property(e => e.DrAmount).IsUnicode(false);

                entity.Property(e => e.NTypeId).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccImportBank)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_ImportBank_Acc_Company");
            });

            modelBuilder.Entity<AccImportBankDetail>(entity =>
            {
                entity.Property(e => e.NDetailId).ValueGeneratedNever();

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DValueDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.NTypeId).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<AccLedgerBalForReporting>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NType).HasDefaultValueSql("((0))");

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<AccLedgerBehaviour>(entity =>
            {
                entity.Property(e => e.NLedgerBehaviourId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<AccLedgerGroupCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);
            });

            modelBuilder.Entity<AccMappingCashFlow>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);
            });

            modelBuilder.Entity<AccMastGroup>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NGroupId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NReserved).HasComment("1 - Fixed ; 0 - Not Fixed");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccMastGroup)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_MastGroup_Acc_Company");
            });

            modelBuilder.Entity<AccMastGroup123>(entity =>
            {
                entity.Property(e => e.NGroupId).ValueGeneratedNever();

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<AccMastGroupBackUp>(entity =>
            {
                entity.Property(e => e.NGroupId).ValueGeneratedNever();

                entity.Property(e => e.NReserved).HasComment("1 - Fixed ; 0 - Not Fixed");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<AccMastLedger>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NLedgerId, e.NFnYearId });

                entity.Property(e => e.BCostCenterEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NCashBahavId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XForm).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AccMastLedger)
                    .HasForeignKey(d => new { d.NCompanyId, d.NGroupId, d.NFnYearId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_MastLedger_Acc_MastGroup");
            });

            modelBuilder.Entity<AccMastLedger123>(entity =>
            {
                entity.Property(e => e.NLedgerId).ValueGeneratedNever();

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<AccMastLedgerBackUp>(entity =>
            {
                entity.Property(e => e.NLedgerId).ValueGeneratedNever();

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<AccMastLedgerExcel>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XLedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<AccNarration>(entity =>
            {
                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNarration).IsUnicode(false);
            });

            modelBuilder.Entity<AccOpeningBalance>(entity =>
            {
                entity.HasKey(e => new { e.NPeriodId, e.NLedgerId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AccOtherInformation>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NOtherCode, e.NPartyId });

                entity.Property(e => e.NPartyId).HasComment("It may be N_VEndorID,N_CustomerID,N_EmpID etc according to the formid(from master table)");

                entity.Property(e => e.XInformation).IsUnicode(false);
            });

            modelBuilder.Entity<AccOtherInformationMaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NOtherCode });

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<AccPandL>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XExpense).IsUnicode(false);

                entity.Property(e => e.XIncome).IsUnicode(false);
            });

            modelBuilder.Entity<AccPaymentMethodMaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NPaymentMethodId })
                    .HasName("PK_Acc_PaymentMethordMaste");

                entity.Property(e => e.BIsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.NTypeId).HasComment("From Acc_LedgerBehavoiur Type 5");

                entity.Property(e => e.XPayMethod).IsUnicode(false);
            });

            modelBuilder.Entity<AccPeriod>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NPeriodId, e.NFnYearId })
                    .HasName("PK_Acc_Period_1");

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XPeriodCode).IsUnicode(false);

                entity.HasOne(d => d.NFnYear)
                    .WithMany(p => p.AccPeriod)
                    .HasForeignKey(d => d.NFnYearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_Period_Acc_FnYear");
            });

            modelBuilder.Entity<AccReconciliation>(entity =>
            {
                entity.Property(e => e.NStatementId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatementCode).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccReconciliation)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_Reconciliation_Acc_Company");
            });

            modelBuilder.Entity<AccReconciliationDetails>(entity =>
            {
                entity.Property(e => e.NStatementDetailId).ValueGeneratedNever();

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XVoucherTypesId).IsUnicode(false);
            });

            modelBuilder.Entity<AccReportGroupDesc>(entity =>
            {
                entity.Property(e => e.NReportGroupId).ValueGeneratedNever();

                entity.Property(e => e.XReportGroupDesc).IsUnicode(false);
            });

            modelBuilder.Entity<AccReportLedgerCategory>(entity =>
            {
                entity.Property(e => e.NReportCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XReportCategoryDesc).IsUnicode(false);
            });

            modelBuilder.Entity<AccReportLedgerMapping>(entity =>
            {
                entity.Property(e => e.NLedgerMappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccReportType>(entity =>
            {
                entity.Property(e => e.NReportTypeId).ValueGeneratedNever();

                entity.Property(e => e.XReportTypeDesc).IsUnicode(false);
            });

            modelBuilder.Entity<AccSessionClosing>(entity =>
            {
                entity.Property(e => e.NCloseId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AccTaxCategory>(entity =>
            {
                entity.Property(e => e.NPkeyId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<AccTaxType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XMenuCaption).IsUnicode(false);

                entity.Property(e => e.XRepPathCaption).IsUnicode(false);

                entity.Property(e => e.XScreenCaption).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<AccTmpOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NCompanyId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NFnYearId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPeriodId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescr).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany()
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Acc_TmpOpeningBalance_Acc_MastLedger");
            });

            modelBuilder.Entity<AccVoucherCcamtDefference>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Acc_VoucherCCAmtDefference");

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<AccVoucherDetails>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NAccTransId, e.NLineNo, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NAgainstLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NVoucherDetailsId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NVoucherId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);

                entity.HasOne(d => d.NFnYear)
                    .WithMany(p => p.AccVoucherDetails)
                    .HasForeignKey(d => d.NFnYearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_VoucherDetails_Acc_FnYear");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AccVoucherDetails)
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Acc_VoucherDetails_Acc_MastLedger");
            });

            modelBuilder.Entity<AccVoucherDetailsSegments>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NLedgerId, e.NVoucherId })
                    .HasName("Indx_Acc_VoucherDetails_Segments");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNaration).IsUnicode(false);

                entity.Property(e => e.XTransType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.N)
                    .WithMany()
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_VoucherDetails_Segments_Acc_MastLedger");
            });

            modelBuilder.Entity<AccVoucherMaster>(entity =>
            {
                entity.HasKey(e => e.NVoucherId)
                    .HasName("PK_Acc_VoucherMaster_1");

                entity.Property(e => e.NVoucherId).ValueGeneratedNever();

                entity.Property(e => e.BIsAccPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NDefLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDefLedgerType).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XReferenceNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.AccVoucherMaster)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_VoucherMaster_Acc_Company");
            });

            modelBuilder.Entity<AccVoucherMasterDetails>(entity =>
            {
                entity.HasKey(e => new { e.NVoucherId, e.NVoucherDetailsId })
                    .HasName("PK_Acc_VoucheMaster_Details_1");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NAccId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NAccType).HasDefaultValueSql("((0))");

                entity.Property(e => e.NInventoryId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAmtInWordsAr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNarrationAr).IsUnicode(false);

                entity.HasOne(d => d.NVoucher)
                    .WithMany(p => p.AccVoucherMasterDetails)
                    .HasForeignKey(d => d.NVoucherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_VoucherMaster_Details_Acc_VoucherMaster");
            });

            modelBuilder.Entity<AccVoucherMasterDetailsSegments>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NVoucherSegmentId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNaration).IsUnicode(false);
            });

            modelBuilder.Entity<AccVoucherTypes>(entity =>
            {
                entity.Property(e => e.XId).IsUnicode(false);

                entity.Property(e => e.NTypeOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionAr).IsUnicode(false);

                entity.Property(e => e.XVoucherRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<AccYearWiseLedgerSettings>(entity =>
            {
                entity.HasKey(e => e.NYwlid)
                    .HasName("PK_Acc_YearWiseGroupSettings");

                entity.Property(e => e.NYwlid).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AccYearWiseLedgerSettings)
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Acc_YearWiseLedgerSettings_Acc_MastLedger");
            });

            modelBuilder.Entity<AlFarqanCustOpening>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanOpeningStock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanOpeningStockSnow>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanOpeningStockdead>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<AlFarquanVendor>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<AlFursanItemList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<AlforqanRemainingitem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<AlforqanStock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<AlforqanStockMainstore>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<ApiTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAccountCode).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XCompanyCode).IsUnicode(false);

                entity.Property(e => e.XCostCenterCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<Arabic>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);
            });

            modelBuilder.Entity<ArabicWords>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ArabicWords");

                entity.Property(e => e.SalesAmountInWords).IsUnicode(false);

                entity.Property(e => e.TaxAmountInWords).IsUnicode(false);
            });

            modelBuilder.Entity<ArabicWordsFreignt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ArabicWords_freignt");

                entity.Property(e => e.AmountInWords).IsUnicode(false);
            });

            modelBuilder.Entity<AssAssetAddlInfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<AssAssetCategory>(entity =>
            {
                entity.HasKey(e => new { e.NCategoryId, e.NFnYearId })
                    .HasName("PK_Inv_AssetCategory")
                    .IsClustered(false);

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NDepreciationLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSaleIncomeLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AssAssetCategory)
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Ass_AssetCategory_Acc_MastLedger");
            });

            modelBuilder.Entity<AssAssetMainCategory>(entity =>
            {
                entity.HasKey(e => new { e.NMainCategoryId, e.NFnYearId })
                    .IsClustered(false);

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMainCategory).IsUnicode(false);

                entity.Property(e => e.XMainCategoryCode).IsUnicode(false);

                entity.Property(e => e.XMainCategoryPrefix).IsUnicode(false);
            });

            modelBuilder.Entity<AssAssetMaster>(entity =>
            {
                entity.Property(e => e.NItemId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XDisposalRestrictions).IsUnicode(false);

                entity.Property(e => e.XGisrefNo).IsUnicode(false);

                entity.Property(e => e.XHypothecatedTo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);
            });

            modelBuilder.Entity<AssAssetStatusUpdate>(entity =>
            {
                entity.Property(e => e.NStatusUpdateId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XNoOfDays).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<AssDepreciation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDepriciationNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);
            });

            modelBuilder.Entity<AssDepreciationMaster>(entity =>
            {
                entity.Property(e => e.NDeprId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDepriciationNo).IsUnicode(false);
            });

            modelBuilder.Entity<AssPurchaseDetails>(entity =>
            {
                entity.HasKey(e => e.NAssetInventoryDetailsId)
                    .HasName("PK_Inv_AssetInventoryDetails");

                entity.Property(e => e.NAssetInventoryDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLifePeriod).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AssPurchaseDetails)
                    .HasForeignKey(d => new { d.NCategoryId, d.NFnYearId })
                    .HasConstraintName("FK__Ass_PurchaseDeta__1A0AC1F4");
            });

            modelBuilder.Entity<AssPurchaseMaster>(entity =>
            {
                entity.HasKey(e => e.NAssetInventoryId)
                    .HasName("PK_Inv_AssetInventory");

                entity.Property(e => e.NAssetInventoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<AssSalesDetails>(entity =>
            {
                entity.Property(e => e.NAssetInventoryDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AssSalesMaster>(entity =>
            {
                entity.Property(e => e.NAssetInventoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<AssSuspension>(entity =>
            {
                entity.Property(e => e.NSuspendId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemId).IsUnicode(false);
            });

            modelBuilder.Entity<AssTransactions>(entity =>
            {
                entity.Property(e => e.NActionId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XReference).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.AssTransactions)
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Ass_Transactions_Acc_MastLedger");
            });

            modelBuilder.Entity<AssTransfer>(entity =>
            {
                entity.HasKey(e => new { e.NTransferId, e.NLineNo })
                    .HasName("PK_Ass_Transfer_1");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemId).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);
            });

            modelBuilder.Entity<CharleEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Contract).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeFirstName).IsUnicode(false);

                entity.Property(e => e.EmployeeLastName).IsUnicode(false);

                entity.Property(e => e.MaritalStatus).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.Occupation).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);
            });

            modelBuilder.Entity<CharleStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Division).IsUnicode(false);

                entity.Property(e => e.Employer).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.GuardianMobileNo).IsUnicode(false);

                entity.Property(e => e.GuardianNameAr).IsUnicode(false);

                entity.Property(e => e.GuardianNumber).IsUnicode(false);

                entity.Property(e => e.GuardianRelation).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.StudentCode).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);

                entity.Property(e => e.StudentNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<ChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.ParentAccountNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<ChartOfAccount2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.ParentNo).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<Class>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Class");

                entity.Property(e => e.ClassCapacity).IsUnicode(false);

                entity.Property(e => e.ClassDescription).IsUnicode(false);

                entity.Property(e => e.ClassName).IsUnicode(false);
            });

            modelBuilder.Entity<ClassType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CLASS_TYPE");

                entity.Property(e => e.ClassTypeDescription).IsUnicode(false);

                entity.Property(e => e.ClassTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<ConvBranch>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BranchCode).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);
            });

            modelBuilder.Entity<ConvCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CusCode).IsUnicode(false);

                entity.Property(e => e.CusName).IsUnicode(false);
            });

            modelBuilder.Entity<ConvEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);
            });

            modelBuilder.Entity<ConvItemList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CatelogNo).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<ConvLocation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.LocationCode).IsUnicode(false);

                entity.Property(e => e.LocationName).IsUnicode(false);
            });

            modelBuilder.Entity<ConvSql>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XQuery).IsUnicode(false);

                entity.Property(e => e.XSourceTable).IsUnicode(false);

                entity.Property(e => e.XTargetTable).IsUnicode(false);
            });

            modelBuilder.Entity<ConvStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Guardian).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.StudentCode).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);
            });

            modelBuilder.Entity<ConvSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SupCode).IsUnicode(false);

                entity.Property(e => e.SupName).IsUnicode(false);
            });

            modelBuilder.Entity<CorClient>(entity =>
            {
                entity.Property(e => e.NClientId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<CorCorrespondence>(entity =>
            {
                entity.HasKey(e => e.NCorrespondenceId)
                    .HasName("PK_Inv_Correspondence");

                entity.Property(e => e.NCorrespondenceId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCorrespondenceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<CorCorrespondenceDetails>(entity =>
            {
                entity.HasKey(e => e.NCorDetailsId)
                    .HasName("PK_Inv_CorrespondenceDetails");

                entity.Property(e => e.NCorDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCurDetailsNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<DaoItemConv>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);

                entity.Property(e => e.Z1).IsUnicode(false);

                entity.Property(e => e.Z2).IsUnicode(false);
            });

            modelBuilder.Entity<DaoPaymentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.Payrunid).IsUnicode(false);

                entity.Property(e => e.SrNo).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayRunText).IsUnicode(false);
            });

            modelBuilder.Entity<DaoVacationDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EmployeeId).IsUnicode(false);
            });

            modelBuilder.Entity<DayClosingRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DayClosing_RPT");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);
            });

            modelBuilder.Entity<Division>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Division");

                entity.Property(e => e.DivisionName).IsUnicode(false);
            });

            modelBuilder.Entity<DiyarAddCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<DiyarAssetList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Asset).IsUnicode(false);

                entity.Property(e => e.AssetCode).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.CostCenter).IsUnicode(false);

                entity.Property(e => e.Depreciation).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.LifeYear).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.NetBookValue).IsUnicode(false);

                entity.Property(e => e.PurchaseCost).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);
            });

            modelBuilder.Entity<DiyarCustomerAsset>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<DiyarCustomerOpbal>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<DmsMasterFiles>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFileId })
                    .HasName("PK_DMS_MasterFiles_1");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XContents).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<DmsMasterFolder>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFolderId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFolderCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPath).IsUnicode(false);
            });

            modelBuilder.Entity<DmsReminderCategory>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<DmsReminderCategoryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XRecipient).IsUnicode(false);
            });

            modelBuilder.Entity<DmsScreenAttachments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XExtension).IsUnicode(false);

                entity.Property(e => e.XFile).IsUnicode(false);

                entity.Property(e => e.XFileType).IsUnicode(false);

                entity.Property(e => e.XFilename).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<DmsScreenDefaults>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<EducareChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.AccountType).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.DebitCredit).IsUnicode(false);

                entity.Property(e => e.FinalReport).IsUnicode(false);

                entity.Property(e => e.Level).IsUnicode(false);

                entity.Property(e => e.MainSub).IsUnicode(false);
            });

            modelBuilder.Entity<FfItemAr>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ArabicItemName).IsUnicode(false);

                entity.Property(e => e.EnglishItemName).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);
            });

            modelBuilder.Entity<FfProductList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<FfwAirport>(entity =>
            {
                entity.Property(e => e.NAirportId).ValueGeneratedNever();

                entity.Property(e => e.XAirportCode).IsUnicode(false);

                entity.Property(e => e.XAirportName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XTypeOfContainer).IsUnicode(false);
            });

            modelBuilder.Entity<FfwConsingee>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NConsingeeId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XConsingeeCode).IsUnicode(false);

                entity.Property(e => e.XConsingeeName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<FfwFlightMaster>(entity =>
            {
                entity.HasKey(e => new { e.NFlightId, e.NCompanyId });

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XFlightCode).IsUnicode(false);

                entity.Property(e => e.XFlightName).IsUnicode(false);

                entity.Property(e => e.XFlightNumber).IsUnicode(false);
            });

            modelBuilder.Entity<FfwGenDefaults>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<FfwInvoiceMaster>(entity =>
            {
                entity.Property(e => e.NInvoiceId).ValueGeneratedNever();

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XContainedDescription).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightNo).IsUnicode(false);

                entity.Property(e => e.XFreightPayment).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XServiceLevel).IsUnicode(false);

                entity.HasOne(d => d.NArrival)
                    .WithMany(p => p.FfwInvoiceMasterNArrival)
                    .HasForeignKey(d => d.NArrivalId)
                    .HasConstraintName("FK_Ffw_InvoiceMaster_Ffw_Airport");

                entity.HasOne(d => d.NDeparture)
                    .WithMany(p => p.FfwInvoiceMasterNDeparture)
                    .HasForeignKey(d => d.NDepartureId)
                    .HasConstraintName("FK_Ffw_InvoiceMaster_Ffw_Airport1");
            });

            modelBuilder.Entity<FfwInvoicePurchaseDetail>(entity =>
            {
                entity.Property(e => e.NInvoicePurchaseId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XVendorinvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<FfwInvoiceSaleDetail>(entity =>
            {
                entity.Property(e => e.NInvoiceSaleId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<FfwItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ffw_Item");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);
            });

            modelBuilder.Entity<FfwItemCategory>(entity =>
            {
                entity.HasKey(e => e.NCategoryId)
                    .HasName("PK_Fffw_ItemCategory");

                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<FfwItemMaster>(entity =>
            {
                entity.Property(e => e.NItemId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<FfwManifest>(entity =>
            {
                entity.Property(e => e.NManifestId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XManifestNo).IsUnicode(false);
            });

            modelBuilder.Entity<FfwManifestDetails>(entity =>
            {
                entity.Property(e => e.NManifestDetailId).ValueGeneratedNever();

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<FfwPriceList>(entity =>
            {
                entity.HasKey(e => e.NPriceId)
                    .HasName("PK__Ffw_Pric__50E6E9F30757E033");

                entity.Property(e => e.NPriceId).ValueGeneratedNever();

                entity.Property(e => e.XPriceCode).IsUnicode(false);
            });

            modelBuilder.Entity<FfwPriceListDetails>(entity =>
            {
                entity.HasKey(e => new { e.NPriceId, e.NPriceDetailsId })
                    .HasName("PriceListDetails_pk");
            });

            modelBuilder.Entity<FfwQuotationMaster>(entity =>
            {
                entity.Property(e => e.NQuotationId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightNo).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XServiceLevel).IsUnicode(false);

                entity.HasOne(d => d.NArrival)
                    .WithMany(p => p.FfwQuotationMasterNArrival)
                    .HasForeignKey(d => d.NArrivalId)
                    .HasConstraintName("FK_Ffw_QuotationMaster_Ffw_Airport");

                entity.HasOne(d => d.NDeparture)
                    .WithMany(p => p.FfwQuotationMasterNDeparture)
                    .HasForeignKey(d => d.NDepartureId)
                    .HasConstraintName("FK_Ffw_QuotationMaster_Ffw_Airport1");
            });

            modelBuilder.Entity<FfwQuotationPurchaseDetail>(entity =>
            {
                entity.Property(e => e.NQuotationPurchaseId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XVendorinvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<FfwQuotationSaleDetail>(entity =>
            {
                entity.Property(e => e.NQuotationSaleId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<FfwSalesExecutiveRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ffw_SalesExecutiveRpt");

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<FfwShipper>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NShipperId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XShipperCode).IsUnicode(false);

                entity.Property(e => e.XShipperName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<FingerPrintUser>(entity =>
            {
                entity.Property(e => e.NUserId).ValueGeneratedNever();

                entity.Property(e => e.DEnquirydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<FirstFocusBank>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XEmaiId).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XStreet).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusLotExpiry>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.CatlogNo).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusPosition>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocusVendor>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<FirstFocuzChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.AccountType).IsUnicode(false);

                entity.Property(e => e.Level).IsUnicode(false);

                entity.Property(e => e.MainSub).IsUnicode(false);
            });

            modelBuilder.Entity<GenActionStatus>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NStatusId });

                entity.Property(e => e.XMsgStatus).IsUnicode(false);

                entity.Property(e => e.XStatusCaption).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<GenApprovalCodes>(entity =>
            {
                entity.Property(e => e.NApprovalId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);
            });

            modelBuilder.Entity<GenApprovalCodesDetails>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<GenApprovalStatus>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NStatusId });

                entity.Property(e => e.XMsgStatus).IsUnicode(false);

                entity.Property(e => e.XStatusCaption).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<GenBackupType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<GenConfirmation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XConfirmName).IsUnicode(false);

                entity.Property(e => e.XConfirmStatus).IsUnicode(false);
            });

            modelBuilder.Entity<GenDefaults>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<GenFollowUp>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.DCompleteDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);
            });

            modelBuilder.Entity<GenLatestDb>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XBackup).IsUnicode(false);
            });

            modelBuilder.Entity<GenLatestLoginId>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<GenLoginDetails>(entity =>
            {
                entity.Property(e => e.NLoginId).ValueGeneratedNever();

                entity.Property(e => e.DLoginDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DLoginTime).IsUnicode(false);

                entity.Property(e => e.DLogoutTime).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<GenLookupTable>(entity =>
            {
                entity.Property(e => e.NPkeyId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<GenMailDetails>(entity =>
            {
                entity.Property(e => e.NMailId).ValueGeneratedNever();

                entity.Property(e => e.DDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBccmail).IsUnicode(false);

                entity.Property(e => e.XCcmail).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTomail).IsUnicode(false);
            });

            modelBuilder.Entity<GenMsgTemplets>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.NTypeId).HasComment("Type Id 1 For SMS , 2 For Email");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTemplets).IsUnicode(false);
            });

            modelBuilder.Entity<GenOnlineUplodeInterface>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XRefId).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);
            });

            modelBuilder.Entity<GenPaymentRequestConfig>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NConfigId })
                    .HasName("PK_Gen_PaymentRequestConfig_1");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<GenReminder>(entity =>
            {
                entity.Property(e => e.NReminderId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<GenReminderSettings>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NId });

                entity.Property(e => e.XFieldNo).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<GenSettings>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NUserCategoryId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroup).IsUnicode(false);

                entity.Property(e => e.XValue).IsUnicode(false);
            });

            modelBuilder.Entity<GenStatus>(entity =>
            {
                entity.Property(e => e.NStatusId).ValueGeneratedNever();

                entity.Property(e => e.XStatusCaption).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<GenStatusApproval>(entity =>
            {
                entity.Property(e => e.NApprovalId).ValueGeneratedNever();

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<GenSystemSettings>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAppVersion).IsUnicode(false);

                entity.Property(e => e.XExecutable).IsUnicode(false);
            });

            modelBuilder.Entity<GenUsefulLinks>(entity =>
            {
                entity.Property(e => e.NLinkId).ValueGeneratedNever();

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XUrl).IsUnicode(false);
            });

            modelBuilder.Entity<GtelAssetTl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.Mop).IsUnicode(false);

                entity.Property(e => e.Project).IsUnicode(false);

                entity.Property(e => e.PurchaseBy).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.Supplier).IsUnicode(false);

                entity.Property(e => e.TPrice).IsUnicode(false);

                entity.Property(e => e.ToolCategory).IsUnicode(false);
            });

            modelBuilder.Entity<IdcEntry>(entity =>
            {
                entity.HasKey(e => e.NCardId)
                    .HasName("pk_IDC_Entry");

                entity.Property(e => e.NCardId).ValueGeneratedNever();

                entity.Property(e => e.EEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCardCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);
            });

            modelBuilder.Entity<IdcEventMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XEvent).IsUnicode(false);

                entity.Property(e => e.XEventCode).IsUnicode(false);
            });

            modelBuilder.Entity<IdcLocationMaster>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<InvAmountSplitCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);
            });

            modelBuilder.Entity<InvAmountSplitType>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<InvAssembly>(entity =>
            {
                entity.Property(e => e.NAssemblyId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvAssemblyDetails>(entity =>
            {
                entity.Property(e => e.NAssemblyDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NAssembly)
                    .WithMany(p => p.InvAssemblyDetails)
                    .HasForeignKey(d => d.NAssemblyId)
                    .HasConstraintName("FK_Inv_AssemblyDetails_Inv_Assembly");

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvAssemblyDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_AssemblyDetails_Inv_ItemMaster");
            });

            modelBuilder.Entity<InvAssemblyStockWise>(entity =>
            {
                entity.Property(e => e.NDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NAssembly)
                    .WithMany(p => p.InvAssemblyStockWise)
                    .HasForeignKey(d => d.NAssemblyId)
                    .HasConstraintName("FK_Inv_AssemblyStockWise_Inv_Assembly");
            });

            modelBuilder.Entity<InvAssetStock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.N).IsFixedLength();
            });

            modelBuilder.Entity<InvAttachmentCategory>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvAutoSaveSettings>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFormId });

                entity.Property(e => e.BAutoSaveEnabled).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvBalanceAdjustmentMaster>(entity =>
            {
                entity.HasKey(e => e.NAdjustmentId)
                    .HasName("PK__Inv_Bala__0CD13B1F4924D839");

                entity.Property(e => e.NAdjustmentId).ValueGeneratedNever();

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvBalanceAdjustmentMasterDetails>(entity =>
            {
                entity.HasKey(e => e.NAdjustmentDetailsId)
                    .HasName("PK__Inv_Bala__75C9D9B351BA1E3A");

                entity.Property(e => e.NAdjustmentDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NAdjustment)
                    .WithMany(p => p.InvBalanceAdjustmentMasterDetails)
                    .HasForeignKey(d => d.NAdjustmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_BalanceAdjustmentMasterDetails_Inv_BalanceAdjustmentMaster");
            });

            modelBuilder.Entity<InvBarcodeFields>(entity =>
            {
                entity.Property(e => e.NFieldId).ValueGeneratedNever();

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);
            });

            modelBuilder.Entity<InvBarcodeTemplate>(entity =>
            {
                entity.Property(e => e.NTemplateId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XTemplateCode).IsUnicode(false);

                entity.Property(e => e.XTemplateName).IsUnicode(false);
            });

            modelBuilder.Entity<InvBarcodeTemplateDetails>(entity =>
            {
                entity.Property(e => e.NTemplateDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFont).IsUnicode(false);

                entity.Property(e => e.XFontName).IsUnicode(false);

                entity.Property(e => e.XTextAlignment).IsUnicode(false);
            });

            modelBuilder.Entity<InvBeneficiary>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XBeneficiaryAccount).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAddress).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBank).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBranch).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryNameAr).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryPhone).IsUnicode(false);

                entity.Property(e => e.XBeneficiarySwiftCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvCostCentreSaveDraft>(entity =>
            {
                entity.Property(e => e.NCostCenterTransId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InvCostCentreTransactions>(entity =>
            {
                entity.Property(e => e.NCostCenterTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XNaration)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XNarration)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NCostCentre)
                    .WithMany(p => p.InvCostCentreTransactions)
                    .HasForeignKey(d => d.NCostCentreId)
                    .HasConstraintName("FK_Inv_CostCentreTransactions_Acc_CostCentreMaster1");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvCostCentreTransactions)
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_CostCentreTransactions_Acc_MastLedger");
            });

            modelBuilder.Entity<InvCrmdetails>(entity =>
            {
                entity.Property(e => e.NCrmdetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XItemRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvCrmmaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NCrmid });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NStatusId).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContact).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCrmcode).IsUnicode(false);

                entity.Property(e => e.XLeadby).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayee).IsUnicode(false);

                entity.Property(e => e.XPlaceofTender).IsUnicode(false);

                entity.Property(e => e.XProjectImplementation).IsUnicode(false);

                entity.Property(e => e.XProjectRegion).IsUnicode(false);

                entity.Property(e => e.XSalesman).IsUnicode(false);

                entity.Property(e => e.XScopeofSummary).IsUnicode(false);

                entity.Property(e => e.XSource).IsUnicode(false);

                entity.Property(e => e.XTenderDescription).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);

                entity.Property(e => e.XTenderReferance).IsUnicode(false);

                entity.Property(e => e.XTypeofClarification).IsUnicode(false);

                entity.Property(e => e.XWaytype).IsUnicode(false);
            });

            modelBuilder.Entity<InvCustomer>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NCustomerId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.NDefaultSalesManId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDefaultSalesManPerc).HasDefaultValueSql("((0))");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAddressAr).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCrnumber).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XUrl).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvCustomerDiscount>(entity =>
            {
                entity.Property(e => e.NCustDiscountId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InvCustomerDiscountMaster>(entity =>
            {
                entity.Property(e => e.NCdmid).ValueGeneratedNever();

                entity.Property(e => e.XCdmcode).IsUnicode(false);
            });

            modelBuilder.Entity<InvCustomerProjects>(entity =>
            {
                entity.Property(e => e.NProjectId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XCustomers).IsUnicode(false);

                entity.Property(e => e.XDistrict).IsUnicode(false);

                entity.Property(e => e.XEmployee).IsUnicode(false);

                entity.Property(e => e.XEmpsId).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMainProject).IsUnicode(false);

                entity.Property(e => e.XPo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSuppliers).IsUnicode(false);

                entity.Property(e => e.XSuppsId).IsUnicode(false);
            });

            modelBuilder.Entity<InvCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NCompanyId, e.NLedgerId })
                    .HasName("Ind_Inv_CustomerStatement")
                    .IsClustered();

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XInvDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvCustomerType>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<InvDeliveryDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAssignedPerson).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<InvDeliveryDispatchDetails>(entity =>
            {
                entity.HasKey(e => e.NDispatchDetailsId)
                    .HasName("PK_DeliveryDispatchDetails");

                entity.Property(e => e.NDispatchDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XLocation).IsUnicode(false);
            });

            modelBuilder.Entity<InvDeliveryNote>(entity =>
            {
                entity.Property(e => e.NDeliveryNoteId).ValueGeneratedNever();

                entity.Property(e => e.BBeginingBalEntry).HasDefaultValueSql("((0))");

                entity.Property(e => e.BIsSaveDraft).HasDefaultValueSql("((0))");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDeliveryType).HasDefaultValueSql("((0))");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XDeliveryLocation).IsUnicode(false);

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTransType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvDeliveryNote)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_DeliveryNote_Acc_Company");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvDeliveryNote)
                    .HasForeignKey(d => new { d.NCompanyId, d.NCustomerId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_DeliveryNote_Inv_Customer");
            });

            modelBuilder.Entity<InvDeliveryNoteDetails>(entity =>
            {
                entity.Property(e => e.NDeliveryNoteDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvDeliveryNoteDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_DeliveryNoteDetails_Inv_ItemMaster");
            });

            modelBuilder.Entity<InvDepartment>(entity =>
            {
                entity.Property(e => e.NDepartmentId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvDiscountSettings>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NDiscId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDiscCode).IsUnicode(false);

                entity.Property(e => e.XDiscDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvDispatchReturn>(entity =>
            {
                entity.Property(e => e.NDispatchReturnId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDispatchReturnNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<InvDispatchReturnDetails>(entity =>
            {
                entity.Property(e => e.NDispatchReturnDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvFfwSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Inv_FFw_SalesReceipt");
            });

            modelBuilder.Entity<InvInvoiceCounter>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFormId, e.NFnYearId, e.NBranchId });

                entity.Property(e => e.BAutoInvoiceEnabled).HasDefaultValueSql("((0))");

                entity.Property(e => e.NMinimumLen).HasDefaultValueSql("((0))");

                entity.Property(e => e.XPrefix).IsUnicode(false);

                entity.Property(e => e.XSuffix).IsUnicode(false);
            });

            modelBuilder.Entity<InvInvoiceCounterDeleted>(entity =>
            {
                entity.Property(e => e.NEntryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvItemBrand>(entity =>
            {
                entity.Property(e => e.NItemBrandId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XItemBrand).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemClass>(entity =>
            {
                entity.Property(e => e.NClassId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemDepartment>(entity =>
            {
                entity.HasKey(e => e.NDepartmentId)
                    .IsClustered(false);

                entity.Property(e => e.NDepartmentId).ValueGeneratedNever();

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDepartmentLocale).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemDetails>(entity =>
            {
                entity.Property(e => e.NItemDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NMainItem)
                    .WithMany(p => p.InvItemDetails)
                    .HasForeignKey(d => d.NMainItemId)
                    .HasConstraintName("FK_Inv_ItemDetails_Inv_ItemMaster");
            });

            modelBuilder.Entity<InvItemLength>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemManufacturer>(entity =>
            {
                entity.Property(e => e.NItemManufacturerId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);
            });

            modelBuilder.Entity<InvItemMaster>(entity =>
            {
                entity.Property(e => e.NItemId).ValueGeneratedNever();

                entity.Property(e => e.BBarcodewithQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.BInActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemManufacturerId).HasDefaultValueSql("((1))");

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("((1))");

                entity.Property(e => e.NMinimumMargin).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPurchaseUnitId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesUnitId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NStockUnitId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBarcode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.HasOne(d => d.NCategory)
                    .WithMany(p => p.InvItemMaster)
                    .HasForeignKey(d => d.NCategoryId)
                    .HasConstraintName("FK_Inv_ItemMaster_Inv_ItemCategory");

                entity.HasOne(d => d.NClass)
                    .WithMany(p => p.InvItemMaster)
                    .HasForeignKey(d => d.NClassId)
                    .HasConstraintName("FK_Inv_ItemMaster_Inv_ItemClass");

                entity.HasOne(d => d.NItemUnit)
                    .WithMany(p => p.InvItemMaster)
                    .HasForeignKey(d => d.NItemUnitId)
                    .HasConstraintName("FK_Inv_ItemMaster_Inv_ItemUnit");
            });

            modelBuilder.Entity<InvItemMasterWhlink>(entity =>
            {
                entity.Property(e => e.NRowId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvItemPriceMaster>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvItemUnit>(entity =>
            {
                entity.Property(e => e.NItemUnitId).ValueGeneratedNever();

                entity.Property(e => e.BBaseUnit).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<InvJwlItemType>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<InvJwlPurchase>(entity =>
            {
                entity.Property(e => e.NPurchaseId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<InvJwlPurchaseDetails>(entity =>
            {
                entity.Property(e => e.NPurchaseDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XImgName).IsUnicode(false);

                entity.Property(e => e.XImgPath).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<InvJwlRateMaster>(entity =>
            {
                entity.Property(e => e.NRateId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InvLocation>(entity =>
            {
                entity.Property(e => e.NLocationId).ValueGeneratedNever();

                entity.Property(e => e.BIsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvLoyaltyPointMaster>(entity =>
            {
                entity.Property(e => e.NPointMasterId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPointMasterCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvLoyaltyPointOut>(entity =>
            {
                entity.Property(e => e.NPointOutId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvMaterialDispatch>(entity =>
            {
                entity.Property(e => e.NDispatchId).ValueGeneratedNever();

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XResponsible).IsUnicode(false);
            });

            modelBuilder.Entity<InvMaterialDispatchDetails>(entity =>
            {
                entity.HasKey(e => e.NDispatchDetailsId)
                    .HasName("PK_Inv_Inv_MaterialDispatchDetails");

                entity.Property(e => e.NDispatchDetailsId).ValueGeneratedNever();

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvMeetingTracker>(entity =>
            {
                entity.Property(e => e.NTrackId).ValueGeneratedNever();

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvMeetingTrackerCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XPositionId).IsUnicode(false);

                entity.Property(e => e.XPositions).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvMeetingTrackerCategory)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_MeetingTrackerCategory_Acc_Company");
            });

            modelBuilder.Entity<InvMeetingTrackerDetails>(entity =>
            {
                entity.Property(e => e.NMeetingTrackerDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XNextAction).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvMonthlyProcess>(entity =>
            {
                entity.Property(e => e.NProcessId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XProcessCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<InvMonthlyProcessDetails>(entity =>
            {
                entity.Property(e => e.NProcessDetailId).ValueGeneratedNever();

                entity.Property(e => e.XRunMonth).IsUnicode(false);
            });

            modelBuilder.Entity<InvMrn>(entity =>
            {
                entity.Property(e => e.NMrnid).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XVendorDeliveryNote).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<InvMrndetails>(entity =>
            {
                entity.Property(e => e.NMrndetailsId).ValueGeneratedNever();

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<InvMrnfreights>(entity =>
            {
                entity.Property(e => e.NMrnfreightId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<InvOpenStockMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NImeifrom).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);
            });

            modelBuilder.Entity<InvOpportunities>(entity =>
            {
                entity.Property(e => e.NReferenceId).ValueGeneratedNever();

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XScopeOfWork).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<InvParticipateComp>(entity =>
            {
                entity.Property(e => e.NParticipateId).ValueGeneratedNever();

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XRank).IsUnicode(false);

                entity.Property(e => e.XTenderCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvPayReceipt>(entity =>
            {
                entity.Property(e => e.NPayReceiptId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvPayReceiptDetails>(entity =>
            {
                entity.Property(e => e.NPayReceiptDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NAmtPaidFromAdvance).HasDefaultValueSql("((0))");

                entity.Property(e => e.NCreditInvId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.HasOne(d => d.NPayReceipt)
                    .WithMany(p => p.InvPayReceiptDetails)
                    .HasForeignKey(d => d.NPayReceiptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_PayReceiptDetails_Inv_PayReceipt");
            });

            modelBuilder.Entity<InvPayReceiptSettlement>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFnYearId, e.NSettlementId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvPayReceiptSettlementDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvPaymentDetails>(entity =>
            {
                entity.HasKey(e => new { e.NPaymentRefId, e.NCompanyId, e.NFnYearId });

                entity.Property(e => e.XAmountInWords).IsUnicode(false);

                entity.Property(e => e.XDocuments).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOracleNo).IsUnicode(false);

                entity.Property(e => e.XPrfNo).IsUnicode(false);

                entity.Property(e => e.XRequestor).IsUnicode(false);
            });

            modelBuilder.Entity<InvPaymentRequest>(entity =>
            {
                entity.Property(e => e.NRequestId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBeneficiary).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XPayTo).IsUnicode(false);

                entity.Property(e => e.XPaymentRefNo).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XTransNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvPaymentStatus>(entity =>
            {
                entity.Property(e => e.NStatusId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<InvPrePayment>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentNo).IsUnicode(false);

                entity.Property(e => e.XStartmonth).IsUnicode(false);
            });

            modelBuilder.Entity<InvPrePaymentCategory>(entity =>
            {
                entity.HasKey(e => e.NCategoryId)
                    .HasName("PK_Ass_AssetCategory")
                    .IsClustered(false);

                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NFrequency).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);
            });

            modelBuilder.Entity<InvPrePaymentSchedule>(entity =>
            {
                entity.HasKey(e => new { e.NPrePaymentId, e.NPrePaymentDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvPrePaymentScheduleMaster>(entity =>
            {
                entity.HasKey(e => new { e.NPrePaymentId, e.NPrePayScheduleId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvPreviousbalance>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DDay).IsUnicode(false);
            });

            modelBuilder.Entity<InvPriceLevel>(entity =>
            {
                entity.Property(e => e.NPriceLevelId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XOperand1).IsUnicode(false);

                entity.Property(e => e.XOperator).IsUnicode(false);
            });

            modelBuilder.Entity<InvProductionCost>(entity =>
            {
                entity.Property(e => e.NTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCompCode).IsUnicode(false);

                entity.Property(e => e.XCompName).IsUnicode(false);
            });

            modelBuilder.Entity<InvProjectReportDescription>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvPrs>(entity =>
            {
                entity.Property(e => e.NPrsid).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);
            });

            modelBuilder.Entity<InvPrsdetails>(entity =>
            {
                entity.Property(e => e.NPrsdetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchase>(entity =>
            {
                entity.Property(e => e.NPurchaseId).ValueGeneratedNever();

                entity.Property(e => e.BBeginingBalEntry).HasDefaultValueSql("((0))");

                entity.Property(e => e.BIsSaveDraft).HasDefaultValueSql("((0))");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDiscountAmtF).HasDefaultValueSql("((0))");

                entity.Property(e => e.NFreightAmtF).HasDefaultValueSql("((0))");

                entity.Property(e => e.NInvoiceAmtF).HasDefaultValueSql("((0))");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPorderId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPurchaseRefId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPurchaseType).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMusthakalasNo).IsUnicode(false);

                entity.Property(e => e.XTransType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvPurchase)
                    .HasForeignKey(d => new { d.NCompanyId, d.NVendorId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_Purchase_Inv_Vendor");
            });

            modelBuilder.Entity<InvPurchaseCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XCategory).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchaseDetails>(entity =>
            {
                entity.Property(e => e.NPurchaseDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.NImeifrom).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPorderId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvPurchaseDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_PurchaseDetails_Inv_ItemMaster");

                entity.HasOne(d => d.NPurchase)
                    .WithMany(p => p.InvPurchaseDetails)
                    .HasForeignKey(d => d.NPurchaseId)
                    .HasConstraintName("FK_Inv_PurchaseDetails_Inv_Purchase");
            });

            modelBuilder.Entity<InvPurchaseFreightReason>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NReasonId })
                    .HasName("PK_Inv_PurchaseFreightReason_1");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XReasonCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchaseFreights>(entity =>
            {
                entity.Property(e => e.NPurchaseFreightId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvPurchaseFreights)
                    .HasForeignKey(d => new { d.NCompanyId, d.NVendorId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_PurchaseFreights_Inv_Vendor");
            });

            modelBuilder.Entity<InvPurchaseItemTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Inv_PurchaseItemTimeSheet");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchaseOrder>(entity =>
            {
                entity.Property(e => e.NPorderId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.NPurchaseId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAttention).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XDeliveryPlace).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPaymentMode).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XQutationNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvPurchaseOrder)
                    .HasForeignKey(d => new { d.NCompanyId, d.NVendorId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_PurchaseOrder_Inv_Vendor");
            });

            modelBuilder.Entity<InvPurchaseOrderDetails>(entity =>
            {
                entity.Property(e => e.NPorderDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvPurchaseOrderDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_PurchaseOrderDetails_Inv_ItemMaster");

                entity.HasOne(d => d.NPorder)
                    .WithMany(p => p.InvPurchaseOrderDetails)
                    .HasForeignKey(d => d.NPorderId)
                    .HasConstraintName("FK_Inv_PurchaseOrderDetails_Inv_PurchaseOrder");
            });

            modelBuilder.Entity<InvPurchasePaymentStatus>(entity =>
            {
                entity.Property(e => e.NPaymentStatusId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCollectedBy).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchaseReturn>(entity =>
            {
                entity.Property(e => e.NDebitNoteId).ValueGeneratedNever();

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.HasOne(d => d.NPurchase)
                    .WithMany(p => p.InvPurchaseReturn)
                    .HasForeignKey(d => d.NPurchaseId)
                    .HasConstraintName("FK_Inv_PurchaseReturn_Inv_Purchase");
            });

            modelBuilder.Entity<InvPurchaseReturnDetails>(entity =>
            {
                entity.Property(e => e.NCreditNoteDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XImei).IsUnicode(false);
            });

            modelBuilder.Entity<InvPurchaseReturnMaster>(entity =>
            {
                entity.Property(e => e.NCreditNoteId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvPurchaseReturnMaster)
                    .HasForeignKey(d => new { d.NCompanyId, d.NVendorId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_PurchaseReturnMaster_Inv_Vendor");
            });

            modelBuilder.Entity<InvPurchaseSaveDraft>(entity =>
            {
                entity.Property(e => e.NPurchaseId).ValueGeneratedNever();

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvReceivableStock>(entity =>
            {
                entity.Property(e => e.NReceivableId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvReceivableStock)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_ReceivableStock_Acc_Company");

                entity.HasOne(d => d.NTransfer)
                    .WithMany(p => p.InvReceivableStock)
                    .HasForeignKey(d => d.NTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_ReceivableStock_Inv_TransferStock");
            });

            modelBuilder.Entity<InvReceivableStockDetails>(entity =>
            {
                entity.Property(e => e.NReceivableDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NReceivable)
                    .WithMany(p => p.InvReceivableStockDetails)
                    .HasForeignKey(d => d.NReceivableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_ReceivableStockDetails_Inv_ReceivableStock");

                entity.HasOne(d => d.NTransferDetails)
                    .WithMany(p => p.InvReceivableStockDetails)
                    .HasForeignKey(d => d.NTransferDetailsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inv_ReceivableStockDetails_Inv_TransferStockDetails");
            });

            modelBuilder.Entity<InvRequestQuotation>(entity =>
            {
                entity.Property(e => e.NRequestId).ValueGeneratedNever();

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvRequestQuotationDetails>(entity =>
            {
                entity.Property(e => e.NRequestDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvRequestQuotationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Inv_RequestQuotation_rpt");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<InvRfqgenerating>(entity =>
            {
                entity.Property(e => e.NPkeyId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPkeyNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvRfqgeneratingDetails>(entity =>
            {
                entity.Property(e => e.NReqstDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvSaleAmountDetails>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<InvSales>(entity =>
            {
                entity.Property(e => e.NSalesId).ValueGeneratedNever();

                entity.Property(e => e.BBeginingBalEntry).HasDefaultValueSql("((0))");

                entity.Property(e => e.DUpdatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NBillAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.NBranchId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NCashReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDeliveryNoteId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDiscountAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.NFreightAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NQuotationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesOrderId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesRefId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesType).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesmanAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesmanPerc).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerDetails).IsUnicode(false);

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XFreeText).IsUnicode(false);

                entity.Property(e => e.XGstin).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTransType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XWorkOrderNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvSales)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_Sales_Acc_Company");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvSales)
                    .HasForeignKey(d => new { d.NCompanyId, d.NCustomerId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_Sales_Inv_Customer");
            });

            modelBuilder.Entity<InvSalesBudget>(entity =>
            {
                entity.Property(e => e.NBudgetId).ValueGeneratedNever();

                entity.Property(e => e.XBudgetCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesDetails>(entity =>
            {
                entity.Property(e => e.NSalesDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvSalesDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_SalesDetails_Inv_ItemMaster");

                entity.HasOne(d => d.NSales)
                    .WithMany(p => p.InvSalesDetails)
                    .HasForeignKey(d => d.NSalesId)
                    .HasConstraintName("FK_Inv_SalesDetails_Inv_Sales");
            });

            modelBuilder.Entity<InvSalesItemTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Inv_SalesItemTimeSheet");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesNegativeStock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.BProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NQtyProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesDetailsId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NStockId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<InvSalesOrder>(entity =>
            {
                entity.Property(e => e.NSalesOrderId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.NQuotationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XJobOrderNotes).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvSalesOrder)
                    .HasForeignKey(d => new { d.NCompanyId, d.NCustomerId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_SalesOrder_Inv_Customer");
            });

            modelBuilder.Entity<InvSalesOrderDetails>(entity =>
            {
                entity.Property(e => e.NSalesOrderDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesOrderDistribution>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InvSalesQuotation>(entity =>
            {
                entity.Property(e => e.NQuotationId).ValueGeneratedNever();

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.XActualQuotationNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRequestedBy).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesQuotationDetails>(entity =>
            {
                entity.Property(e => e.NQuotationDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XMinMarginPerc).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesReturn>(entity =>
            {
                entity.Property(e => e.NCreditNoteId).ValueGeneratedNever();

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesReturnDetails>(entity =>
            {
                entity.Property(e => e.NDebitNoteDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<InvSalesReturnMaster>(entity =>
            {
                entity.Property(e => e.NDebitNoteId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NDeliveryNoteId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany(p => p.InvSalesReturnMaster)
                    .HasForeignKey(d => new { d.NCompanyId, d.NCustomerId, d.NFnYearId })
                    .HasConstraintName("FK_Inv_SalesReturnMaster_Inv_Customer");
            });

            modelBuilder.Entity<InvSalesReturnStockWise>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvSalesman>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NSalesmanId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NCommnPerc).HasDefaultValueSql("((0))");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvServiceAccessories>(entity =>
            {
                entity.Property(e => e.NServiceDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvServiceBooking>(entity =>
            {
                entity.Property(e => e.NServiceId).ValueGeneratedNever();

                entity.Property(e => e.BWarranty).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAdditionalNotes).IsUnicode(false);

                entity.Property(e => e.XBillNo).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XJobNo).IsUnicode(false);

                entity.Property(e => e.XJobTitle).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModelNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProductType).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);

                entity.Property(e => e.XServiceTag).IsUnicode(false);

                entity.HasOne(d => d.NAssigned)
                    .WithMany(p => p.InvServiceBooking)
                    .HasForeignKey(d => d.NAssignedId)
                    .HasConstraintName("FK_Inv_ServiceBooking_Gen_LookupTable");
            });

            modelBuilder.Entity<InvServiceContract>(entity =>
            {
                entity.HasKey(e => e.NContractId)
                    .HasName("Inv_ServiceContract1");

                entity.Property(e => e.NContractId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvServiceSheetDetails>(entity =>
            {
                entity.Property(e => e.NServiceSheetDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvServiceSheetMaster>(entity =>
            {
                entity.Property(e => e.NServiceSheetId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvSis>(entity =>
            {
                entity.Property(e => e.NSisid).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XSisno).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<InvSisdetails>(entity =>
            {
                entity.Property(e => e.NSisdetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvSrn>(entity =>
            {
                entity.Property(e => e.NSrnid).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XSrnno).IsUnicode(false);
            });

            modelBuilder.Entity<InvSrndetails>(entity =>
            {
                entity.Property(e => e.NSrndetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvStockAdjstmentReason>(entity =>
            {
                entity.Property(e => e.NReasonId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionAr).IsUnicode(false);

                entity.Property(e => e.XReasonCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvStockAdjustment>(entity =>
            {
                entity.Property(e => e.NAdjustmentId).ValueGeneratedNever();

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvStockAdjustmentDetails>(entity =>
            {
                entity.Property(e => e.NAdjustmentDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.HasOne(d => d.NAdjustment)
                    .WithMany(p => p.InvStockAdjustmentDetails)
                    .HasForeignKey(d => d.NAdjustmentId)
                    .HasConstraintName("FK_Inv_StockAdjustmentDetails_Inv_StockAdjustment");

                entity.HasOne(d => d.NReason)
                    .WithMany(p => p.InvStockAdjustmentDetails)
                    .HasForeignKey(d => d.NReasonId)
                    .HasConstraintName("FK_Inv_StockAdjustmentDetails_Inv_StockAdjstmentReason");
            });

            modelBuilder.Entity<InvStockMaster>(entity =>
            {
                entity.HasKey(e => e.NStockId)
                    .HasName("PK_Inv_StockTable");

                entity.Property(e => e.NStockId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesDetailsId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalesId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvStockMaster)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_StockMaster_Inv_ItemMaster1");
            });

            modelBuilder.Entity<InvStockMasterBarcode>(entity =>
            {
                entity.Property(e => e.NStockId).ValueGeneratedNever();

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XImgPath).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvStockMasterImei>(entity =>
            {
                entity.Property(e => e.NStockImeiid).ValueGeneratedNever();

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);
            });

            modelBuilder.Entity<InvStockOut>(entity =>
            {
                entity.HasKey(e => e.NSoldItemsId)
                    .HasName("PK_Inv_SalesStockWise");

                entity.Property(e => e.NSoldItemsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XType).IsUnicode(false);

                entity.HasOne(d => d.NStock)
                    .WithMany(p => p.InvStockOut)
                    .HasForeignKey(d => d.NStockId)
                    .HasConstraintName("FK_Inv_SalesStockWise_Inv_StockTable");
            });

            modelBuilder.Entity<InvStockOutByTransfer>(entity =>
            {
                entity.Property(e => e.NTransferedItemsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NStock)
                    .WithMany(p => p.InvStockOutByTransfer)
                    .HasForeignKey(d => d.NStockId)
                    .HasConstraintName("FK_Inv_TransferStockWise_Inv_StockTable");

                entity.HasOne(d => d.NTransferDetails)
                    .WithMany(p => p.InvStockOutByTransfer)
                    .HasForeignKey(d => d.NTransferDetailsId)
                    .HasConstraintName("FK_Inv_TransferStockWise_Inv_TransferStockDetails");
            });

            modelBuilder.Entity<InvStockStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvTaxCategoryType>(entity =>
            {
                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvTaxReportDescription>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<InvTerminal>(entity =>
            {
                entity.Property(e => e.NTerminalId).ValueGeneratedNever();

                entity.Property(e => e.XTerminalCode).IsUnicode(false);

                entity.Property(e => e.XTerminalName).IsUnicode(false);
            });

            modelBuilder.Entity<InvTerminalDetails>(entity =>
            {
                entity.Property(e => e.NSettingsId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XValue).IsUnicode(false);
            });

            modelBuilder.Entity<InvTerms>(entity =>
            {
                entity.Property(e => e.NTermsId).ValueGeneratedNever();

                entity.Property(e => e.XTerms).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvTransType>(entity =>
            {
                entity.Property(e => e.NTransTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTransName).IsUnicode(false);

                entity.Property(e => e.XTransNameDisp).IsUnicode(false);
            });

            modelBuilder.Entity<InvTransferStock>(entity =>
            {
                entity.Property(e => e.NTransferId).ValueGeneratedNever();

                entity.Property(e => e.NType).HasComment("");

                entity.Property(e => e.XIssuedTo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvTransferStock)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_TransferStock_Acc_Company");
            });

            modelBuilder.Entity<InvTransferStockDetails>(entity =>
            {
                entity.HasKey(e => e.NTransferDetailsId)
                    .HasName("PK_Inv_TransferDetails");

                entity.Property(e => e.NTransferDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.InvTransferStockDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Inv_TransferDetails_Inv_ItemMaster");

                entity.HasOne(d => d.NTransfer)
                    .WithMany(p => p.InvTransferStockDetails)
                    .HasForeignKey(d => d.NTransferId)
                    .HasConstraintName("FK_Inv_TransferStockDetails_Inv_Transfer");
            });

            modelBuilder.Entity<InvTruckMaster>(entity =>
            {
                entity.HasKey(e => e.NTruckId)
                    .HasName("PK__Inv_Truc__23534ACA69DC8BE5");

                entity.Property(e => e.NTruckId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendor>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NVendorId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XCrnumber).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVendorNameAr).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);

                entity.HasOne(d => d.NCurrency)
                    .WithMany(p => p.InvVendor)
                    .HasForeignKey(d => d.NCurrencyId)
                    .HasConstraintName("FK_Inv_Vendor_Acc_CurrencyMaster");
            });

            modelBuilder.Entity<InvVendorAttachments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XExtension).IsUnicode(false);

                entity.Property(e => e.XFile).IsUnicode(false);

                entity.Property(e => e.XFileType).IsUnicode(false);

                entity.Property(e => e.XFilename).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendorProjects>(entity =>
            {
                entity.HasKey(e => new { e.NProjectId, e.NCompanyId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendorRequest>(entity =>
            {
                entity.Property(e => e.NQuotationId).ValueGeneratedNever();

                entity.Property(e => e.NLocationId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendorRequestDetails>(entity =>
            {
                entity.Property(e => e.NQuotationDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InvVendorServiceSheet>(entity =>
            {
                entity.Property(e => e.NServiceSheetId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendorServiceSheetDetails>(entity =>
            {
                entity.Property(e => e.NServiceSheetDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<InvVendorStatement>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NCompanyId, e.NLedgerId })
                    .HasName("Ind_Inv_VenderStatement")
                    .IsClustered();

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XInvDescription).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<InvWarehouseMaster>(entity =>
            {
                entity.Property(e => e.NWarehouseId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XWarehouseCode).IsUnicode(false);

                entity.Property(e => e.XWarehouseName).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.InvWarehouseMaster)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Inv_WarehouseMaster_Acc_Company");
            });

            modelBuilder.Entity<InvWarranty>(entity =>
            {
                entity.Property(e => e.NWarrantyId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);

                entity.Property(e => e.XWarrantyCode).IsUnicode(false);
            });

            modelBuilder.Entity<InvWorkFlowCatalog>(entity =>
            {
                entity.HasKey(e => e.NSrno)
                    .HasName("PK__Inv_Work__FE74A9990B27A5C0");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<ItemMinPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ItemMInPrice");
            });

            modelBuilder.Entity<JeelArabicEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Arabic).IsUnicode(false);

                entity.Property(e => e.English).IsUnicode(false);

                entity.Property(e => e.LedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<JeelArabicEnglishMastgroup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Arabic).IsUnicode(false);

                entity.Property(e => e.English).IsUnicode(false);

                entity.Property(e => e.LedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<JwlColour>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XColor).IsUnicode(false);
            });

            modelBuilder.Entity<JwlKarat>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XKarat).IsUnicode(false);
            });

            modelBuilder.Entity<JwlPurchaseFreights>(entity =>
            {
                entity.HasKey(e => e.NPurchaseFreightId)
                    .HasName("PK_Jwl_PurchaseFreights_1");

                entity.Property(e => e.NPurchaseFreightId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JwlPurchaseReturnDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JwlPurchaseReturnMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<JwlSales>(entity =>
            {
                entity.HasKey(e => e.NSalesId)
                    .HasName("PK_Inv_Jwl_Sales");

                entity.Property(e => e.NSalesId).ValueGeneratedNever();

                entity.Property(e => e.NFreightAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<JwlSalesDetails>(entity =>
            {
                entity.HasKey(e => e.NSalesDetailsId)
                    .HasName("PK_Inv_Jwl_SalesDetails");

                entity.Property(e => e.NSalesDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XBarcode).IsUnicode(false);
            });

            modelBuilder.Entity<JwlSalesReturnDetails>(entity =>
            {
                entity.Property(e => e.NDebitNoteDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<JwlSalesReturnMaster>(entity =>
            {
                entity.Property(e => e.NDebitNoteId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<JwlSalesScrapReceived>(entity =>
            {
                entity.HasKey(e => e.NScrapDetailsId)
                    .HasName("PK_inv_Jwl_SalesScrapReceived");

                entity.Property(e => e.NScrapDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<JwlStockTransfer>(entity =>
            {
                entity.Property(e => e.NTransferId).ValueGeneratedNever();

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<JwlStockTransferDetails>(entity =>
            {
                entity.Property(e => e.NTransferDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<KesClassDivision>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClassName).IsUnicode(false);

                entity.Property(e => e.Division).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);
            });

            modelBuilder.Entity<KesEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.EmailId).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.JobTitle).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.Passport).IsUnicode(false);
            });

            modelBuilder.Entity<KesStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Guardian).IsUnicode(false);

                entity.Property(e => e.GuardianAr).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.NationalityId).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);

                entity.Property(e => e.StudentCode).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);
            });

            modelBuilder.Entity<LanLanguage>(entity =>
            {
                entity.Property(e => e.NLanguageId).ValueGeneratedNever();

                entity.Property(e => e.BRightToLeft).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCurrent).HasDefaultValueSql("((0))");

                entity.Property(e => e.XLanguage).IsUnicode(false);
            });

            modelBuilder.Entity<LanMultiLingual>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NFormId, e.XControlNo })
                    .HasName("IND_Lan_MultiLingual")
                    .IsClustered();

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<LogApprovalProcess>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DActionDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NActionId).ValueGeneratedOnAdd();

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<LogGenReminder>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<LogInvSales>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<LogInvSalesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<LogRecruitment>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NRecId).ValueGeneratedOnAdd();

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<LogScreenActivity>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DActionDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NActionId).ValueGeneratedOnAdd();

                entity.Property(e => e.XActionType).IsUnicode(false);

                entity.Property(e => e.XActionUser).IsUnicode(false);

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XIp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSystemName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<LogTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NActionId).ValueGeneratedOnAdd();

                entity.Property(e => e.NAgainstLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XErrorMessage).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSystemName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<MasterFee>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NTypeId).IsUnicode(false);

                entity.Property(e => e.XFeeName).IsUnicode(false);
            });

            modelBuilder.Entity<MayaseemItemList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemDescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemDescriptionE).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<MigBatchStock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Activate).IsUnicode(false);

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.BatchNo).IsUnicode(false);

                entity.Property(e => e.Cost).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.DrugId).IsUnicode(false);

                entity.Property(e => e.ExpDate).IsUnicode(false);

                entity.Property(e => e.Retail).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<MigCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ContactPer).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Credit).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Discount).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.LineId).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Pager).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.PinCode).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);
            });

            modelBuilder.Entity<MigCustomerList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.ContactNumber).IsUnicode(false);

                entity.Property(e => e.CreditLimit).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.PendingInv).IsUnicode(false);

                entity.Property(e => e.SalesExecutive).IsUnicode(false);
            });

            modelBuilder.Entity<MigDrugmaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Activate).IsUnicode(false);

                entity.Property(e => e.BinNum).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Control).IsUnicode(false);

                entity.Property(e => e.DateCre).IsUnicode(false);

                entity.Property(e => e.DrugName).IsUnicode(false);

                entity.Property(e => e.DrugSelection).IsUnicode(false);

                entity.Property(e => e.DrugType).IsUnicode(false);

                entity.Property(e => e.Expiry).IsUnicode(false);

                entity.Property(e => e.GName).IsUnicode(false);

                entity.Property(e => e.GenericName).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.LineId).IsUnicode(false);

                entity.Property(e => e.MafId).IsUnicode(false);

                entity.Property(e => e.MaxDiscount).IsUnicode(false);

                entity.Property(e => e.MeansQty).IsUnicode(false);

                entity.Property(e => e.MeansType).IsUnicode(false);

                entity.Property(e => e.QtyUnit).IsUnicode(false);

                entity.Property(e => e.Sp).IsUnicode(false);

                entity.Property(e => e.Sp2).IsUnicode(false);

                entity.Property(e => e.Sp3).IsUnicode(false);

                entity.Property(e => e.Unitcost).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<MigEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Bank).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmpType).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.JobTitle).IsUnicode(false);

                entity.Property(e => e.MaritalStatus).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.PassportNo).IsUnicode(false);

                entity.Property(e => e.PaymentMethod).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.Teacher).IsUnicode(false);
            });

            modelBuilder.Entity<MigItemList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BatchCode).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.OpeningStock).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XFullDescription).IsUnicode(false);
            });

            modelBuilder.Entity<MigItemListSmeh>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<MigLotExpiryItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<MigProductList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<MigProductsSmeh>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ExpDate).IsUnicode(false);

                entity.Property(e => e.In).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Out).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<MigStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XDivision).IsUnicode(false);

                entity.Property(e => e.XFatherName).IsUnicode(false);

                entity.Property(e => e.XFatherNationality).IsUnicode(false);

                entity.Property(e => e.XFatherPassportNo).IsUnicode(false);

                entity.Property(e => e.XFatherPhone).IsUnicode(false);

                entity.Property(e => e.XFatherResId).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XGuardianNameAr).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XMotherName).IsUnicode(false);

                entity.Property(e => e.XMotherNationality).IsUnicode(false);

                entity.Property(e => e.XMotherPassportNo).IsUnicode(false);

                entity.Property(e => e.XMotherPhone).IsUnicode(false);

                entity.Property(e => e.XMotherResId).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XParentAddress).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSection).IsUnicode(false);

                entity.Property(e => e.XStudentNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<MigStudentListCharle>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DFullName).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XDivision).IsUnicode(false);

                entity.Property(e => e.XFatherName).IsUnicode(false);

                entity.Property(e => e.XFatherNationality).IsUnicode(false);

                entity.Property(e => e.XFatherPassportNo).IsUnicode(false);

                entity.Property(e => e.XFatherPhone).IsUnicode(false);

                entity.Property(e => e.XFatherResId).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XGuardianNameAr).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XMotherName).IsUnicode(false);

                entity.Property(e => e.XMotherNationality).IsUnicode(false);

                entity.Property(e => e.XMotherPassportNo).IsUnicode(false);

                entity.Property(e => e.XMotherPhone).IsUnicode(false);

                entity.Property(e => e.XMotherResId).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XParentAddress).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSection).IsUnicode(false);

                entity.Property(e => e.XStudentNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<MigStudentOpening>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);
            });

            modelBuilder.Entity<MigTempBalanceSmeh>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AlHayer).IsUnicode(false);

                entity.Property(e => e.AlHayer1).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Office).IsUnicode(false);

                entity.Property(e => e.Office1).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Temp2016).IsUnicode(false);

                entity.Property(e => e.Temp20161).IsUnicode(false);

                entity.Property(e => e.Temp2017).IsUnicode(false);

                entity.Property(e => e.Temp20171).IsUnicode(false);

                entity.Property(e => e.TempOld).IsUnicode(false);

                entity.Property(e => e.TempOld1).IsUnicode(false);

                entity.Property(e => e.Total).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.WaadiLaban).IsUnicode(false);

                entity.Property(e => e.WaadiLaban1).IsUnicode(false);
            });

            modelBuilder.Entity<MigVendor>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ContactPer).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Credit).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.DateCreated).IsUnicode(false);

                entity.Property(e => e.Discount).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.LineId).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Pager).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.PinCode).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);
            });

            modelBuilder.Entity<MigVendorList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactNumber).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.InvDueAmount).IsUnicode(false);

                entity.Property(e => e.PendingInv).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);
            });

            modelBuilder.Entity<MnpDeMobilization>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NDeMobilizationId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDeMobilizationCode).IsUnicode(false);
            });

            modelBuilder.Entity<MnpDeMobilizationDetails>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NDeMobilizationDetailsId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MnpEmpPriceSettings>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XSettingsNo).IsUnicode(false);
            });

            modelBuilder.Entity<MnpEmpPriceSettingsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<MnpEmployeeMaintenance>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NMaintenanceId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XEmployeeType).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaintenanceCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XTrade).IsUnicode(false);
            });

            modelBuilder.Entity<MnpInvoice>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NInvoiceId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<MnpInvoiceDetails>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NInvoiceDetailsId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.MnpInvoiceDetails)
                    .HasForeignKey(d => new { d.NCompanyId, d.NInvoiceId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Mnp_InvoiceDetails");
            });

            modelBuilder.Entity<MnpInvoicePaycodes>(entity =>
            {
                entity.Property(e => e.NDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NSalaryPayMethod).HasDefaultValueSql("((0))");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<MnpMobilization>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NMobilizationId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<MnpMobilizationDetails>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NMobilizationDetailsId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MnpMobilizationDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Mnp_MobilizationDetails_Disp");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<MnpMobilizationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Mnp_Mobilization_Disp");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<Name>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Name1).IsUnicode(false);
            });

            modelBuilder.Entity<OlivoProductList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<OlivoProductListFf>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockLocation1).IsUnicode(false);

                entity.Property(e => e.StockLocation10).IsUnicode(false);

                entity.Property(e => e.StockLocation11).IsUnicode(false);

                entity.Property(e => e.StockLocation12).IsUnicode(false);

                entity.Property(e => e.StockLocation13).IsUnicode(false);

                entity.Property(e => e.StockLocation14).IsUnicode(false);

                entity.Property(e => e.StockLocation15).IsUnicode(false);

                entity.Property(e => e.StockLocation16).IsUnicode(false);

                entity.Property(e => e.StockLocation17).IsUnicode(false);

                entity.Property(e => e.StockLocation18).IsUnicode(false);

                entity.Property(e => e.StockLocation19).IsUnicode(false);

                entity.Property(e => e.StockLocation2).IsUnicode(false);

                entity.Property(e => e.StockLocation20).IsUnicode(false);

                entity.Property(e => e.StockLocation3).IsUnicode(false);

                entity.Property(e => e.StockLocation4).IsUnicode(false);

                entity.Property(e => e.StockLocation5).IsUnicode(false);

                entity.Property(e => e.StockLocation6).IsUnicode(false);

                entity.Property(e => e.StockLocation7).IsUnicode(false);

                entity.Property(e => e.StockLocation8).IsUnicode(false);

                entity.Property(e => e.StockLocation9).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<OlivoProductListSmeh>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<OlivoProductListSmehOrg>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DefaultVendor).IsUnicode(false);

                entity.Property(e => e.DescriptionArabic).IsUnicode(false);

                entity.Property(e => e.DescriptionEnglish).IsUnicode(false);

                entity.Property(e => e.ItemCategory).IsUnicode(false);

                entity.Property(e => e.ItemCost).IsUnicode(false);

                entity.Property(e => e.Manufacture).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.PurchaseUnit).IsUnicode(false);

                entity.Property(e => e.PurchaseUnitQty).IsUnicode(false);

                entity.Property(e => e.SalesUnit).IsUnicode(false);

                entity.Property(e => e.SalesUnitQty).IsUnicode(false);

                entity.Property(e => e.SellingPrice).IsUnicode(false);

                entity.Property(e => e.StockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<OlivoStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XDivision).IsUnicode(false);

                entity.Property(e => e.XFatherName).IsUnicode(false);

                entity.Property(e => e.XFatherNationality).IsUnicode(false);

                entity.Property(e => e.XFatherPassportNo).IsUnicode(false);

                entity.Property(e => e.XFatherPhone).IsUnicode(false);

                entity.Property(e => e.XFatherResId).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XGuardianNameAr).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XMotherName).IsUnicode(false);

                entity.Property(e => e.XMotherNationality).IsUnicode(false);

                entity.Property(e => e.XMotherPassportNo).IsUnicode(false);

                entity.Property(e => e.XMotherPhone).IsUnicode(false);

                entity.Property(e => e.XMotherResId).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XParentAddress).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSection).IsUnicode(false);

                entity.Property(e => e.XStudentNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<OptPrescription>(entity =>
            {
                entity.Property(e => e.NPrescriptionId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XColNo).IsUnicode(false);

                entity.Property(e => e.XEye).IsUnicode(false);

                entity.Property(e => e.XFrameModel).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<Parent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Parent");

                entity.Property(e => e.FamiliyMotherPassport).IsUnicode(false);

                entity.Property(e => e.FamilyFatherAddress).IsUnicode(false);

                entity.Property(e => e.FamilyFatherAge).IsUnicode(false);

                entity.Property(e => e.FamilyFatherAnnualIncome).IsUnicode(false);

                entity.Property(e => e.FamilyFatherBloodGroup).IsUnicode(false);

                entity.Property(e => e.FamilyFatherCity).IsUnicode(false);

                entity.Property(e => e.FamilyFatherEmail).IsUnicode(false);

                entity.Property(e => e.FamilyFatherFirstName).IsUnicode(false);

                entity.Property(e => e.FamilyFatherLastName).IsUnicode(false);

                entity.Property(e => e.FamilyFatherMiddleName).IsUnicode(false);

                entity.Property(e => e.FamilyFatherNationalId).IsUnicode(false);

                entity.Property(e => e.FamilyFatherNationality).IsUnicode(false);

                entity.Property(e => e.FamilyFatherPassport).IsUnicode(false);

                entity.Property(e => e.FamilyFatherPrimaryMobilePhone).IsUnicode(false);

                entity.Property(e => e.FamilyFatherPrimaryResidencePhone).IsUnicode(false);

                entity.Property(e => e.FamilyFatherProffession).IsUnicode(false);

                entity.Property(e => e.FamilyFatherSecondaryMobilePhone).IsUnicode(false);

                entity.Property(e => e.FamilyFatherSecondaryResidencePhone).IsUnicode(false);

                entity.Property(e => e.FamilyMotherAddress).IsUnicode(false);

                entity.Property(e => e.FamilyMotherAge).IsUnicode(false);

                entity.Property(e => e.FamilyMotherAnnualIncome).IsUnicode(false);

                entity.Property(e => e.FamilyMotherBloodGroup).IsUnicode(false);

                entity.Property(e => e.FamilyMotherEmail).IsUnicode(false);

                entity.Property(e => e.FamilyMotherFirstName).IsUnicode(false);

                entity.Property(e => e.FamilyMotherLastName).IsUnicode(false);

                entity.Property(e => e.FamilyMotherMiddileName).IsUnicode(false);

                entity.Property(e => e.FamilyMotherNationality).IsUnicode(false);

                entity.Property(e => e.FamilyMotherPrimaryMobilePhone).IsUnicode(false);

                entity.Property(e => e.FamilyMotherPrimaryResidencePhone).IsUnicode(false);

                entity.Property(e => e.FamilyMotherProffession).IsUnicode(false);

                entity.Property(e => e.FamilyMotherSecondaryMobilePhone).IsUnicode(false);

                entity.Property(e => e.FamilyMotherSecondaryResidencePhone).IsUnicode(false);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.FamilyNoOfBrothers).IsUnicode(false);

                entity.Property(e => e.FamilyNoOfSisters).IsUnicode(false);

                entity.Property(e => e.FamilyPassword).IsUnicode(false);

                entity.Property(e => e.FamilyRemarks).IsUnicode(false);

                entity.Property(e => e.FamilyTotalMembers).IsUnicode(false);

                entity.Property(e => e.FamilyUserId).IsUnicode(false);

                entity.Property(e => e.FamilyUsername).IsUnicode(false);
            });

            modelBuilder.Entity<PayAccountSetup>(entity =>
            {
                entity.Property(e => e.NAccSetupId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPayGroup).IsUnicode(false);
            });

            modelBuilder.Entity<PayAddOrDedImport>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NTransId, e.NFnYearId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XPayRunText).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XSalaryMonth).IsUnicode(false);
            });

            modelBuilder.Entity<PayAddOrDedImportDetails>(entity =>
            {
                entity.Property(e => e.NTransDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayAddOrDedImportFieldDetails>(entity =>
            {
                entity.Property(e => e.NDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XFieldType).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayAdditionalWorkingDays>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NCompanyId });
            });

            modelBuilder.Entity<PayAgent>(entity =>
            {
                entity.Property(e => e.NAgentId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAgentCode).IsUnicode(false);

                entity.Property(e => e.XAgentName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayAgentMaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NAgentId });

                entity.Property(e => e.XAgentCode).IsUnicode(false);

                entity.Property(e => e.XAgentName).IsUnicode(false);
            });

            modelBuilder.Entity<PayAmortization>(entity =>
            {
                entity.Property(e => e.NAmortizationId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayAmortizationDetails>(entity =>
            {
                entity.Property(e => e.NAmortizationDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayAnytimeRequest>(entity =>
            {
                entity.Property(e => e.NRequestId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<PayContactDetails>(entity =>
            {
                entity.Property(e => e.NContactDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XEmergencyAddress).IsUnicode(false);

                entity.Property(e => e.XEmergencyAddressH).IsUnicode(false);

                entity.Property(e => e.XEmergencyContctPerson).IsUnicode(false);

                entity.Property(e => e.XEmergencyContctPersonH).IsUnicode(false);

                entity.Property(e => e.XEmergencyEmail).IsUnicode(false);

                entity.Property(e => e.XEmergencyEmailH).IsUnicode(false);

                entity.Property(e => e.XEmergencyNum).IsUnicode(false);

                entity.Property(e => e.XEmergencyNumH).IsUnicode(false);

                entity.Property(e => e.XEmergencyRelation).IsUnicode(false);

                entity.Property(e => e.XEmergencyRelationH).IsUnicode(false);
            });

            modelBuilder.Entity<PayCourse>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCenter).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCourseCode).IsUnicode(false);

                entity.Property(e => e.XCourseName).IsUnicode(false);
            });

            modelBuilder.Entity<PayDepartment>(entity =>
            {
                entity.HasKey(e => new { e.NDepartmentId, e.NFnYearId })
                    .IsClustered(false);

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NEmpLoanDefGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDepartmentLocale).IsUnicode(false);
            });

            modelBuilder.Entity<PayDepartmentSettings>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NSettingsId, e.NFnYearId });

                entity.Property(e => e.NCrLedgerId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1 Employe wise , 0 Default");

                entity.Property(e => e.NLedgerId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PayDisciplinaryAction>(entity =>
            {
                entity.Property(e => e.NActionId).ValueGeneratedNever();

                entity.Property(e => e.DDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XActionCode).IsUnicode(false);

                entity.Property(e => e.XEmpStatement).IsUnicode(false);

                entity.Property(e => e.XInvestigation).IsUnicode(false);

                entity.Property(e => e.XPlaceOfViolation).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XWarningDecision).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpAccruls>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NEmpAccId });

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.PayEmpAccruls)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_EmpAccruls_Acc_Company");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.PayEmpAccruls)
                    .HasForeignKey(d => new { d.NVacTypeId, d.NCompanyId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_EmpAccruls_Pay_VacationType");
            });

            modelBuilder.Entity<PayEmpAddlInfo>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NInfoId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAchivmnts).IsUnicode(false);

                entity.Property(e => e.XAddEduInfo).IsUnicode(false);

                entity.Property(e => e.XClgCourse).IsUnicode(false);

                entity.Property(e => e.XClgLevel).IsUnicode(false);

                entity.Property(e => e.XDginclusiveDate).IsUnicode(false);

                entity.Property(e => e.XDguniverity).IsUnicode(false);

                entity.Property(e => e.XDrCourse).IsUnicode(false);

                entity.Property(e => e.XDrInclusiveDate).IsUnicode(false);

                entity.Property(e => e.XDrUnits).IsUnicode(false);

                entity.Property(e => e.XDrUniverity).IsUnicode(false);

                entity.Property(e => e.XHsLevel).IsUnicode(false);

                entity.Property(e => e.XHschool).IsUnicode(false);

                entity.Property(e => e.XPgcourse).IsUnicode(false);

                entity.Property(e => e.XPginclusiveDate).IsUnicode(false);

                entity.Property(e => e.XPglastSchool).IsUnicode(false);

                entity.Property(e => e.XPgunits).IsUnicode(false);

                entity.Property(e => e.XPguniverity).IsUnicode(false);

                entity.Property(e => e.XPrcreg).IsUnicode(false);

                entity.Property(e => e.XPrcregNo).IsUnicode(false);

                entity.Property(e => e.XPrcvalidity).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpAnyRequest>(entity =>
            {
                entity.Property(e => e.NRequestId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpEvaluation>(entity =>
            {
                entity.Property(e => e.NEvalId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEvalCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpEvaluationDetails>(entity =>
            {
                entity.Property(e => e.NEvalDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XReference).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpEvaluationSettings>(entity =>
            {
                entity.Property(e => e.NEvaluationId).ValueGeneratedNever();

                entity.Property(e => e.XEmpDep).IsUnicode(false);

                entity.Property(e => e.XEmpDepId).IsUnicode(false);

                entity.Property(e => e.XEvaluationCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpEvaluationSettingsDetails>(entity =>
            {
                entity.Property(e => e.NEvaluationDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XQuestion).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmpEvaluators>(entity =>
            {
                entity.Property(e => e.NEvaluatorsDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayEmployee>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NEmpId, e.NFnYearId })
                    .HasName("pk_myConstraint");

                entity.Property(e => e.BEnablePortalLogin).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.NCatagoryId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NLoanLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NSalaryPayMethod).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDefEmpCode).IsUnicode(false);

                entity.Property(e => e.XDrivingLicense).IsUnicode(false);

                entity.Property(e => e.XEducationQual).IsUnicode(false);

                entity.Property(e => e.XEligibility).IsUnicode(false);

                entity.Property(e => e.XEmail2).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmergencyNum).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpInsFile).IsUnicode(false);

                entity.Property(e => e.XEmpInsRefFile).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmpPatakaName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XEmrgncyContact).IsUnicode(false);

                entity.Property(e => e.XHeir).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XIqamaFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XIqamaProfession).IsUnicode(false);

                entity.Property(e => e.XIqamaRefName).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPassportRefName).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPlaceOfBirth).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);

                entity.Property(e => e.XScenumber).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XSpousePassportFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XTicketNotes).IsUnicode(false);

                entity.Property(e => e.XTicketRoute).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.PayEmployee)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_Employee_Acc_Company");

                entity.HasOne(d => d.NPosition)
                    .WithMany(p => p.PayEmployee)
                    .HasForeignKey(d => d.NPositionId)
                    .HasConstraintName("FK_Pay_Employee_Pay_Position");

                entity.HasOne(d => d.N)
                    .WithMany(p => p.PayEmployee)
                    .HasForeignKey(d => new { d.NDepartmentId, d.NFnYearId })
                    .HasConstraintName("FK_Pay_Employee_Pay_Department");
            });

            modelBuilder.Entity<PayEmployeeAlerts>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BDonotShow).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAlertType).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeAttachments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XExtension).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeClearance>(entity =>
            {
                entity.Property(e => e.NClearanceId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeClearanceDetails>(entity =>
            {
                entity.Property(e => e.NClearanceDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeClearanceSettings>(entity =>
            {
                entity.Property(e => e.NClearanceSettingsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XPurposeName).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeClearanceSettingsDetails>(entity =>
            {
                entity.Property(e => e.NClearanceSettingsDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XClearanceItem).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeDependence>(entity =>
            {
                entity.Property(e => e.NDependenceId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDlname).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);

                entity.Property(e => e.XFamInsFile).IsUnicode(false);

                entity.Property(e => e.XFamInsRefFile).IsUnicode(false);

                entity.Property(e => e.XFamIqamaFile).IsUnicode(false);

                entity.Property(e => e.XFamIqamaRefFile).IsUnicode(false);

                entity.Property(e => e.XFamPassportFile).IsUnicode(false);

                entity.Property(e => e.XFamPassportRefFile).IsUnicode(false);

                entity.Property(e => e.XFgender).IsUnicode(false);

                entity.Property(e => e.XFmaritalStatus).IsUnicode(false);

                entity.Property(e => e.XFnationality).IsUnicode(false);

                entity.Property(e => e.XInsDuration).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeEducation>(entity =>
            {
                entity.Property(e => e.NEduId).ValueGeneratedNever();

                entity.Property(e => e.XCourse).IsUnicode(false);

                entity.Property(e => e.XInstitution).IsUnicode(false);

                entity.Property(e => e.XMark).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeGroup>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NPkeyId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XIqamaFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPlaceOfBirth).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XReportTo).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XSpousePassportFileName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeePayHistory>(entity =>
            {
                entity.Property(e => e.NPayHistoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NAmountOld).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PayEmployeePayment>(entity =>
            {
                entity.Property(e => e.NReceiptId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTotalAmountAr).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.PayEmployeePayment)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_EmployeePayment_Acc_Company");
            });

            modelBuilder.Entity<PayEmployeePaymentDetails>(entity =>
            {
                entity.HasKey(e => new { e.NReceiptId, e.NReceiptDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NReceipt)
                    .WithMany(p => p.PayEmployeePaymentDetails)
                    .HasForeignKey(d => d.NReceiptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_EmployeePaymentDetails_Pay_EmployeePayment");
            });

            modelBuilder.Entity<PayEmployeeRequestType>(entity =>
            {
                entity.Property(e => e.NRequestTypeId).ValueGeneratedNever();

                entity.Property(e => e.XRequestTypeDesc).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmployeeStatus>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<PayEmploymentHistory>(entity =>
            {
                entity.Property(e => e.NJobId).ValueGeneratedNever();

                entity.Property(e => e.XCompany).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XIndustry).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<PayEndOfServiceSdetails>(entity =>
            {
                entity.Property(e => e.NEosdetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<PayEndOfservice>(entity =>
            {
                entity.Property(e => e.NServiceEndId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceEndCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayGosipayment>(entity =>
            {
                entity.Property(e => e.NReceiptId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTotalAmountAr).IsUnicode(false);
            });

            modelBuilder.Entity<PayGosipaymentDetails>(entity =>
            {
                entity.HasKey(e => new { e.NReceiptId, e.NReceiptDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayGosiprocessing>(entity =>
            {
                entity.HasKey(e => new { e.NTransId, e.NCompanyId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NProcessId).HasComment("Primary key of pay_paymentmaster");

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<PayGosiprocessingDetails>(entity =>
            {
                entity.Property(e => e.NTransDetailsId).ValueGeneratedNever();

                entity.Property(e => e.BBeginingBalEntry).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayHealthSafety>(entity =>
            {
                entity.Property(e => e.NReferenceId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCoverage).IsUnicode(false);

                entity.Property(e => e.XInsPolicy).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSituation).IsUnicode(false);

                entity.Property(e => e.XWitness).IsUnicode(false);
            });

            modelBuilder.Entity<PayInsuranceCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);
            });

            modelBuilder.Entity<PayInsuranceSettings>(entity =>
            {
                entity.Property(e => e.NInsuranceSettingsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XInsuranceSettingsCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceSettingsDesc).IsUnicode(false);
            });

            modelBuilder.Entity<PayInsuranceSettingsDetails>(entity =>
            {
                entity.Property(e => e.NInsuranceSettingsDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayLoanClose>(entity =>
            {
                entity.Property(e => e.NLoanCloseId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XLoanClosingCode).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);
            });

            modelBuilder.Entity<PayLoanIssue>(entity =>
            {
                entity.Property(e => e.NLoanTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NDefLedgerId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XGuarantor1).IsUnicode(false);

                entity.Property(e => e.XGuarantor2).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XRefFrom).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayLoanIssueDetails>(entity =>
            {
                entity.HasKey(e => new { e.NLoanTransId, e.NLoanTransDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayMedicalInsurance>(entity =>
            {
                entity.Property(e => e.NMedicalInsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XPolicyDetails).IsUnicode(false);
            });

            modelBuilder.Entity<PayMedicalInsuranceAddition>(entity =>
            {
                entity.Property(e => e.NAdditionId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPolicyCode).IsUnicode(false);

                entity.Property(e => e.XPolicyNo).IsUnicode(false);
            });

            modelBuilder.Entity<PayMedicalInsuranceAdditionDetails>(entity =>
            {
                entity.Property(e => e.NAdditionDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayMedicalInsuranceDeletion>(entity =>
            {
                entity.Property(e => e.NDeletionId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDeletionCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayMedicalInsuranceDeletionDetails>(entity =>
            {
                entity.Property(e => e.NDeletionDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayMonthLeaveRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Pay_MonthLeave_rpt");

                entity.Property(e => e.MonthNmbr).IsUnicode(false);
            });

            modelBuilder.Entity<PayMonthlyAddOrDed>(entity =>
            {
                entity.HasKey(e => e.NTransId)
                    .HasName("PK_PayMonthlyAddOrDed");

                entity.Property(e => e.NTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<PayMonthlyAddOrDedDetails>(entity =>
            {
                entity.Property(e => e.NTransDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayNationality>(entity =>
            {
                entity.Property(e => e.NNationalityId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNationalityCode).IsUnicode(false);

                entity.Property(e => e.XNationalityLocale).IsUnicode(false);
            });

            modelBuilder.Entity<PayOvertimeRequestDetail>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NOvertimeRequestDetailId, e.NFnYearId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayOvertimeRequestMaster>(entity =>
            {
                entity.HasKey(e => new { e.NOvertimeRequestId, e.NCompanyId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayCalulationMethod>(entity =>
            {
                entity.Property(e => e.NMethodId).ValueGeneratedNever();

                entity.Property(e => e.XMethod).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayCodeAdjustment>(entity =>
            {
                entity.HasKey(e => e.NAdjustmentId)
                    .HasName("PK_Pay_EosAdjustment");

                entity.Property(e => e.NAdjustmentId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAdjustmentCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayCodeAdjustmentDetails>(entity =>
            {
                entity.HasKey(e => e.NAdjustmentDetailsId)
                    .HasName("PK_Pay_EosAdjustmentDetails");

                entity.Property(e => e.NAdjustmentDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PayPayCodeGroupDetails>(entity =>
            {
                entity.Property(e => e.NGroupDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayPayCodeGroupMaster>(entity =>
            {
                entity.Property(e => e.NGroupId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayCodeItemwiseMapping>(entity =>
            {
                entity.Property(e => e.NMappingId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayCodeItemwiseMappingDetails>(entity =>
            {
                entity.Property(e => e.NMappingDetailsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayPayFormulae>(entity =>
            {
                entity.Property(e => e.NFormulaeId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XOperator).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayHistoryMaster>(entity =>
            {
                entity.Property(e => e.NHistoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XHistoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayMaster>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NPayId, e.NFnYearId });

                entity.Property(e => e.BAutoIncludePayrun).HasDefaultValueSql("((1))");

                entity.Property(e => e.BEditable).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NPayableDefAccountId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionLocale).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XTaxCategory).IsUnicode(false);
            });

            modelBuilder.Entity<PayPaySetup>(entity =>
            {
                entity.Property(e => e.NPaySetupId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMethod).IsUnicode(false);
            });

            modelBuilder.Entity<PayPayType>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NPayTypeId });

                entity.Property(e => e.CrMappingLevel)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DrMappingLevel)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NPerPayMethod).HasComment("0 - Fixed Amount ;-1 - No permenant Paymethod");

                entity.Property(e => e.NType).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XDrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<PayPaymentDetails>(entity =>
            {
                entity.Property(e => e.NTransDetailsId).ValueGeneratedNever();

                entity.Property(e => e.BBeginingBalEntry).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NSalaryPayMethod).HasDefaultValueSql("((0))");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NTrans)
                    .WithMany(p => p.PayPaymentDetails)
                    .HasForeignKey(d => d.NTransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pay_PaymentDetails_Pay_PaymentMaster");
            });

            modelBuilder.Entity<PayPaymentMaster>(entity =>
            {
                entity.HasKey(e => e.NTransId)
                    .HasName("PK_PayTransActionMaster");

                entity.Property(e => e.NTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XBatchRemarks).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<PayPosition>(entity =>
            {
                entity.Property(e => e.NPositionId).ValueGeneratedNever();

                entity.Property(e => e.BIsSupervisor).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XPositionLocale).IsUnicode(false);
            });

            modelBuilder.Entity<PayRelation>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NRelationId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRelation).IsUnicode(false);
            });

            modelBuilder.Entity<PayRoomMaster>(entity =>
            {
                entity.Property(e => e.NRoomId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomCode).IsUnicode(false);

                entity.Property(e => e.XRoomName).IsUnicode(false);
            });

            modelBuilder.Entity<PaySalaryGrade>(entity =>
            {
                entity.Property(e => e.NGradeId).ValueGeneratedNever();

                entity.Property(e => e.XGradeCode).IsUnicode(false);

                entity.Property(e => e.XGradename).IsUnicode(false);

                entity.Property(e => e.XInsClass).IsUnicode(false);
            });

            modelBuilder.Entity<PaySalaryGradeDetails>(entity =>
            {
                entity.Property(e => e.NGradeDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XTicketNotes).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);
            });

            modelBuilder.Entity<PaySalaryLevel>(entity =>
            {
                entity.Property(e => e.NLevelId).ValueGeneratedNever();

                entity.Property(e => e.XLevelCode).IsUnicode(false);

                entity.Property(e => e.XLevelName).IsUnicode(false);
            });

            modelBuilder.Entity<PayServiceEnd>(entity =>
            {
                entity.Property(e => e.NServiceEndId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XServiceEndCode).IsUnicode(false);

                entity.Property(e => e.XServiceEndStatusDesc).IsUnicode(false);
            });

            modelBuilder.Entity<PayServiceEndSettings>(entity =>
            {
                entity.Property(e => e.NEndSettiingsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PayServiceEndType>(entity =>
            {
                entity.Property(e => e.NEndTypeId).ValueGeneratedNever();

                entity.Property(e => e.XEndType).IsUnicode(false);
            });

            modelBuilder.Entity<PaySummaryPercentage>(entity =>
            {
                entity.Property(e => e.NPerCalcId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PaySupervisor>(entity =>
            {
                entity.Property(e => e.NSupervisorId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NPositionId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XSupervisor).IsUnicode(false);

                entity.Property(e => e.XSupervisorCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayTickets>(entity =>
            {
                entity.Property(e => e.NTicketsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XTicketCode).IsUnicode(false);

                entity.Property(e => e.XTicketName).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);
            });

            modelBuilder.Entity<PayTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayTimeSheetImport>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayTimeSheetMaster>(entity =>
            {
                entity.Property(e => e.NTimeSheetId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<PayTimesheetLog>(entity =>
            {
                entity.Property(e => e.IndexKey).ValueGeneratedNever();

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<PayTrainers>(entity =>
            {
                entity.Property(e => e.NTraineeId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XTraineeAddress).IsUnicode(false);

                entity.Property(e => e.XTraineeCode).IsUnicode(false);

                entity.Property(e => e.XTraineeName).IsUnicode(false);
            });

            modelBuilder.Entity<PayTrainingAttendance>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NAttendanceId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAttendanceCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<PayTrainingAttendanceDetails>(entity =>
            {
                entity.Property(e => e.NAttendanceDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PayTrainingRequest>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTrainingRsn).IsUnicode(false);

                entity.Property(e => e.XVenue).IsUnicode(false);
            });

            modelBuilder.Entity<PayVacationDetails>(entity =>
            {
                entity.HasKey(e => e.NVacationId)
                    .HasName("PK_Pay_Vacation");

                entity.Property(e => e.NVacationId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NVacRequestId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayVacationMaster>(entity =>
            {
                entity.Property(e => e.NVacationGroupId).ValueGeneratedNever();

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacationGroupCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayVacationReturn>(entity =>
            {
                entity.HasKey(e => e.NVacationReturnId)
                    .HasName("PK__Pay_Vaca__08BD849C6166761E");

                entity.Property(e => e.NVacationReturnId).ValueGeneratedNever();

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XVacationReturnCode).IsUnicode(false);
            });

            modelBuilder.Entity<PayVacationType>(entity =>
            {
                entity.HasKey(e => new { e.NVacTypeId, e.NCompanyId })
                    .HasName("PK_Pay_VacationType_1");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NPayId).HasComment("Paid vacation or non paid vacation");

                entity.Property(e => e.NProportionalFlag).HasComment("vacation proportional to date of work or fixed");

                entity.Property(e => e.NStartType).HasComment("Vacation start begining of year or date of joining");

                entity.Property(e => e.XPeriod)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<PayVillaMaster>(entity =>
            {
                entity.Property(e => e.NVillaId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XVillaName).IsUnicode(false);

                entity.Property(e => e.XVillaNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.PayVillaMaster)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Pay_VillaMaster_Acc_Company");
            });

            modelBuilder.Entity<PayWorkingHours>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NCompanyId });

                entity.Property(e => e.XDay).IsUnicode(false);
            });

            modelBuilder.Entity<PayYearlyOffDays>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<Pbcatcol>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PbcTnam, e.PbcOwnr, e.PbcCnam })
                    .HasName("pbcatc_x")
                    .IsUnique();

                entity.Property(e => e.PbcBmap)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbcCmnt).IsUnicode(false);

                entity.Property(e => e.PbcCnam)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbcEdit).IsUnicode(false);

                entity.Property(e => e.PbcHdr).IsUnicode(false);

                entity.Property(e => e.PbcInit).IsUnicode(false);

                entity.Property(e => e.PbcLabl).IsUnicode(false);

                entity.Property(e => e.PbcMask).IsUnicode(false);

                entity.Property(e => e.PbcOwnr)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbcPtrn).IsUnicode(false);

                entity.Property(e => e.PbcTag).IsUnicode(false);

                entity.Property(e => e.PbcTnam)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pbcatedt>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PbeName, e.PbeSeqn })
                    .HasName("pbcate_x")
                    .IsUnique();

                entity.Property(e => e.PbeEdit).IsUnicode(false);

                entity.Property(e => e.PbeName).IsUnicode(false);

                entity.Property(e => e.PbeWork)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pbcatfmt>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.PbfName)
                    .HasName("pbcatf_x")
                    .IsUnique();

                entity.Property(e => e.PbfFrmt).IsUnicode(false);

                entity.Property(e => e.PbfName).IsUnicode(false);
            });

            modelBuilder.Entity<Pbcattbl>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PbtTnam, e.PbtOwnr })
                    .HasName("pbcatt_x")
                    .IsUnique();

                entity.Property(e => e.PbdFfce)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbdFitl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbdFunl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbhFfce)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbhFitl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbhFunl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PblFfce)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PblFitl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PblFunl)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbtCmnt).IsUnicode(false);

                entity.Property(e => e.PbtOwnr)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PbtTnam)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pbcatvld>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.PbvName)
                    .HasName("pbcatv_x")
                    .IsUnique();

                entity.Property(e => e.PbvMsg).IsUnicode(false);

                entity.Property(e => e.PbvName).IsUnicode(false);

                entity.Property(e => e.PbvVald).IsUnicode(false);
            });

            modelBuilder.Entity<PrjBoq>(entity =>
            {
                entity.HasKey(e => new { e.NBoqid, e.NCompanyId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PrjBoqlist>(entity =>
            {
                entity.Property(e => e.NOrderListId).ValueGeneratedNever();

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XFdtno).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XLongDesc).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XShortDesc).IsUnicode(false);
            });

            modelBuilder.Entity<PrjBoqproduct>(entity =>
            {
                entity.Property(e => e.NBoqproductId).ValueGeneratedNever();

                entity.Property(e => e.XProductName).IsUnicode(false);
            });

            modelBuilder.Entity<PrjClient>(entity =>
            {
                entity.Property(e => e.NClientId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<PrjCommission>(entity =>
            {
                entity.Property(e => e.NCommnId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCommnCode).IsUnicode(false);

                entity.Property(e => e.XCommnName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<PrjCostCategory>(entity =>
            {
                entity.Property(e => e.NCategoryId).ValueGeneratedNever();

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);
            });

            modelBuilder.Entity<PrjCustomerMaterialDetails>(entity =>
            {
                entity.Property(e => e.NMaterialDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemDescription).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<PrjCustomerMaterials>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NMaterialId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<PrjEmployeeWorkLog>(entity =>
            {
                entity.Property(e => e.NWorkLogId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMonthYear).IsUnicode(false);
            });

            modelBuilder.Entity<PrjMainProject>(entity =>
            {
                entity.Property(e => e.NMainProjectId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XMainProjectCode).IsUnicode(false);

                entity.Property(e => e.XMainProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<PrjPaymentReceipt>(entity =>
            {
                entity.Property(e => e.NTransId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NProjectClientId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProjectCommnId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NProjectVendorId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NProject)
                    .WithMany(p => p.PrjPaymentReceipt)
                    .HasForeignKey(d => d.NProjectId)
                    .HasConstraintName("FK_Prj_PaymentReceipt_Prj_ProjectMaster");
            });

            modelBuilder.Entity<PrjProjectClients>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NClient)
                    .WithMany()
                    .HasForeignKey(d => d.NClientId)
                    .HasConstraintName("FK_Prj_ProjectClients_Prj_Client");

                entity.HasOne(d => d.NProject)
                    .WithMany()
                    .HasForeignKey(d => d.NProjectId)
                    .HasConstraintName("FK_Prj_ProjectClients_Prj_ProjectMaster");
            });

            modelBuilder.Entity<PrjProjectCommns>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NCommn)
                    .WithMany()
                    .HasForeignKey(d => d.NCommnId)
                    .HasConstraintName("FK_Prj_ProjectCommns_Prj_Commission");

                entity.HasOne(d => d.NProject)
                    .WithMany()
                    .HasForeignKey(d => d.NProjectId)
                    .HasConstraintName("FK_Prj_ProjectCommns_Prj_ProjectMaster");
            });

            modelBuilder.Entity<PrjProjectMaster>(entity =>
            {
                entity.Property(e => e.NProjectId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescr).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<PrjProjectParameters>(entity =>
            {
                entity.Property(e => e.NPrjParametersId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PrjProjectPermissionInfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XLength).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPenalty).IsUnicode(false);

                entity.Property(e => e.XPermissionCode).IsUnicode(false);

                entity.Property(e => e.XPermissionNo).IsUnicode(false);

                entity.Property(e => e.XPermitUpdate).IsUnicode(false);

                entity.Property(e => e.XPermits).IsUnicode(false);

                entity.Property(e => e.XTeam).IsUnicode(false);
            });

            modelBuilder.Entity<PrjProjectTransfer>(entity =>
            {
                entity.Property(e => e.NTransferId).ValueGeneratedNever();

                entity.Property(e => e.XIssuedTo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.PrjProjectTransfer)
                    .HasForeignKey(d => d.NCompanyId)
                    .HasConstraintName("FK_Prj_ProjectTransfer_Acc_Company");
            });

            modelBuilder.Entity<PrjProjectTransferDetails>(entity =>
            {
                entity.Property(e => e.NTransferDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NItemUnitId).HasDefaultValueSql("('')");

                entity.Property(e => e.NQtyDisplay).HasDefaultValueSql("((0))");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XItemRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NItem)
                    .WithMany(p => p.PrjProjectTransferDetails)
                    .HasForeignKey(d => d.NItemId)
                    .HasConstraintName("FK_Prj_ProjectTransferDetails_Inv_ItemMaster");

                entity.HasOne(d => d.NTransfer)
                    .WithMany(p => p.PrjProjectTransferDetails)
                    .HasForeignKey(d => d.NTransferId)
                    .HasConstraintName("FK_Prj_ProjectTransferDetails_Prj_ProjectTransfer");
            });

            modelBuilder.Entity<PrjProjectVendors>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NProject)
                    .WithMany()
                    .HasForeignKey(d => d.NProjectId)
                    .HasConstraintName("FK_Prj_ProjectVendors_Prj_ProjectMaster");

                entity.HasOne(d => d.NVendor)
                    .WithMany()
                    .HasForeignKey(d => d.NVendorId)
                    .HasConstraintName("FK_Prj_ProjectVendors_Prj_Vendor");
            });

            modelBuilder.Entity<PrjSafetyInspection>(entity =>
            {
                entity.Property(e => e.NInspectionId).ValueGeneratedNever();

                entity.Property(e => e.XInspectionCode).IsUnicode(false);

                entity.Property(e => e.XInspectionName).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);
            });

            modelBuilder.Entity<PrjSafetyInspectionDetails>(entity =>
            {
                entity.Property(e => e.NInspectionDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XObservedNote).IsUnicode(false);
            });

            modelBuilder.Entity<PrjStockOutByTransfer>(entity =>
            {
                entity.Property(e => e.NTransferedItemsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NStock)
                    .WithMany(p => p.PrjStockOutByTransfer)
                    .HasForeignKey(d => d.NStockId)
                    .HasConstraintName("FK_Prj_StockOutByTransfer_Inv_StockTable");

                entity.HasOne(d => d.NTransferDetails)
                    .WithMany(p => p.PrjStockOutByTransfer)
                    .HasForeignKey(d => d.NTransferDetailsId)
                    .HasConstraintName("FK_Prj_StockOutByTransfer_Prj_ProjectTransferDetails");
            });

            modelBuilder.Entity<PrjTender>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NTenderId, e.NFnYearId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBidRemark).IsUnicode(false);

                entity.Property(e => e.XBidStatus).IsUnicode(false);

                entity.Property(e => e.XClientContact).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XMoreDetails).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayee).IsUnicode(false);

                entity.Property(e => e.XPlaceOfSubmission).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XProjectPlace).IsUnicode(false);

                entity.Property(e => e.XProjectReference).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XReview).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTenderCode).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);
            });

            modelBuilder.Entity<PrjTimeSheet>(entity =>
            {
                entity.Property(e => e.NTimeSheetId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<PrjTimeSlotMaster>(entity =>
            {
                entity.Property(e => e.NTimeSlotId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XTimeSlot).IsUnicode(false);
            });

            modelBuilder.Entity<PrjVendor>(entity =>
            {
                entity.Property(e => e.NVendorId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NInvDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<PrjWorkOrder>(entity =>
            {
                entity.Property(e => e.NWorkOrderId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XFdtno).IsUnicode(false);

                entity.Property(e => e.XJobNo).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XWorkOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<PrjWorkOrderDetails>(entity =>
            {
                entity.Property(e => e.NWorkOrderDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XLongDesc).IsUnicode(false);

                entity.Property(e => e.XShortDesc).IsUnicode(false);
            });

            modelBuilder.Entity<PsdChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);
            });

            modelBuilder.Entity<PsdChartOfAccountNew>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);
            });

            modelBuilder.Entity<PsdEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Bank).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.Inactive).IsUnicode(false);

                entity.Property(e => e.JobTitle).IsUnicode(false);

                entity.Property(e => e.MaritalStatus).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.Nationality).IsUnicode(false);

                entity.Property(e => e.PassportNo).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.Teacher).IsUnicode(false);
            });

            modelBuilder.Entity<PsdRemList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Prvgrade).IsUnicode(false);

                entity.Property(e => e.Schooladd).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);

                entity.Property(e => e.Sysyr).IsUnicode(false);
            });

            modelBuilder.Entity<PsdStudentList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAbmStem).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBridgeProgram).IsUnicode(false);

                entity.Property(e => e.XClassId).IsUnicode(false);

                entity.Property(e => e.XDivisionId).IsUnicode(false);

                entity.Property(e => e.XFatherCompany).IsUnicode(false);

                entity.Property(e => e.XFatherEmail).IsUnicode(false);

                entity.Property(e => e.XFatherName).IsUnicode(false);

                entity.Property(e => e.XFatherNationality).IsUnicode(false);

                entity.Property(e => e.XFatherOfficeNo).IsUnicode(false);

                entity.Property(e => e.XFatherPhoneNo).IsUnicode(false);

                entity.Property(e => e.XFatherResId).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XGradePrevious).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XGuardianNameAr).IsUnicode(false);

                entity.Property(e => e.XHomeNo).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastGrade).IsUnicode(false);

                entity.Property(e => e.XLastLevel).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAddress).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttended).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XMotherCompany).IsUnicode(false);

                entity.Property(e => e.XMotherEmail).IsUnicode(false);

                entity.Property(e => e.XMotherName).IsUnicode(false);

                entity.Property(e => e.XMotherNationality).IsUnicode(false);

                entity.Property(e => e.XMotherOccupation).IsUnicode(false);

                entity.Property(e => e.XMotherOfficeNo).IsUnicode(false);

                entity.Property(e => e.XMotherPhoneNo).IsUnicode(false);

                entity.Property(e => e.XMotherResId).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlaceOfBirth).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSchoolAdd).IsUnicode(false);

                entity.Property(e => e.XSection).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XStudentNameAr).IsUnicode(false);

                entity.Property(e => e.XSysPreviousYear).IsUnicode(false);
            });

            modelBuilder.Entity<PsdStudentList2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XAbmStem).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBridgeProgram).IsUnicode(false);

                entity.Property(e => e.XClassId).IsUnicode(false);

                entity.Property(e => e.XDivisionId).IsUnicode(false);

                entity.Property(e => e.XFatherCompany).IsUnicode(false);

                entity.Property(e => e.XFatherEmail).IsUnicode(false);

                entity.Property(e => e.XFatherName).IsUnicode(false);

                entity.Property(e => e.XFatherNationality).IsUnicode(false);

                entity.Property(e => e.XFatherOfficeNo).IsUnicode(false);

                entity.Property(e => e.XFatherPhoneNo).IsUnicode(false);

                entity.Property(e => e.XFatherResId).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XGradePrevious).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XGuardianNameAr).IsUnicode(false);

                entity.Property(e => e.XHomeNo).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastGrade).IsUnicode(false);

                entity.Property(e => e.XLastLevel).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAddress).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttended).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XMotherCompany).IsUnicode(false);

                entity.Property(e => e.XMotherEmail).IsUnicode(false);

                entity.Property(e => e.XMotherName).IsUnicode(false);

                entity.Property(e => e.XMotherNationality).IsUnicode(false);

                entity.Property(e => e.XMotherOccupation).IsUnicode(false);

                entity.Property(e => e.XMotherOfficeNo).IsUnicode(false);

                entity.Property(e => e.XMotherPhoneNo).IsUnicode(false);

                entity.Property(e => e.XMotherResId).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlaceOfBirth).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSchoolAdd).IsUnicode(false);

                entity.Property(e => e.XSection).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XStudentNameAr).IsUnicode(false);

                entity.Property(e => e.XSysPreviousYear).IsUnicode(false);
            });

            modelBuilder.Entity<PsdStudentListTemp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<RecAppointment>(entity =>
            {
                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.DCompleteDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<RecApproval>(entity =>
            {
                entity.Property(e => e.NApprovalId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);
            });

            modelBuilder.Entity<RecApprovalCycle>(entity =>
            {
                entity.Property(e => e.NApprovalId).ValueGeneratedNever();

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalName).IsUnicode(false);
            });

            modelBuilder.Entity<RecApprovalCycleDetails>(entity =>
            {
                entity.Property(e => e.NApprovalDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<RecApprovalDetails>(entity =>
            {
                entity.Property(e => e.NApprovalDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<RecEmployeeDependence>(entity =>
            {
                entity.Property(e => e.NDependenceId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDlname).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);
            });

            modelBuilder.Entity<RecEmployeeRequest>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NRequestId });

                entity.Property(e => e.XRequestCode).IsUnicode(false);
            });

            modelBuilder.Entity<RecEmployeeRequestDetails>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NRequestId, e.NRequestDetailId });

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XVacancyName).IsUnicode(false);
            });

            modelBuilder.Entity<RecJobSalaryDetails>(entity =>
            {
                entity.Property(e => e.NSalaryDetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCandidateCode).IsUnicode(false);
            });

            modelBuilder.Entity<RecJobVacancy>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NVacancyId })
                    .HasName("PK_Rec_Vacancy");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XVacancyCode).IsUnicode(false);

                entity.Property(e => e.XVacancyName).IsUnicode(false);
            });

            modelBuilder.Entity<RecRegistration>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NRecruitmentId });

                entity.Property(e => e.Cv).IsUnicode(false);

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NEmpId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCurrrentLocation).IsUnicode(false);

                entity.Property(e => e.XCvName).IsUnicode(false);

                entity.Property(e => e.XDocumentDescription).IsUnicode(false);

                entity.Property(e => e.XEduBackground).IsUnicode(false);

                entity.Property(e => e.XEduMajor).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XFlightNo).IsUnicode(false);

                entity.Property(e => e.XIdno).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInsuranceType).IsUnicode(false);

                entity.Property(e => e.XIntName).IsUnicode(false);

                entity.Property(e => e.XLastCompany).IsUnicode(false);

                entity.Property(e => e.XLastPosition).IsUnicode(false);

                entity.Property(e => e.XLicenceNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XPostboxNo).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);

                entity.Property(e => e.XResidanceNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSponserName).IsUnicode(false);

                entity.Property(e => e.XSponserProfession).IsUnicode(false);

                entity.Property(e => e.XSponserResidenseNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTelephone).IsUnicode(false);

                entity.Property(e => e.XVacancy).IsUnicode(false);

                entity.Property(e => e.XVisaNo).IsUnicode(false);

                entity.Property(e => e.XVisaTitle).IsUnicode(false);
            });

            modelBuilder.Entity<RelClassDivision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("REL_CLASS_DIVISION");

                entity.Property(e => e.ClassDescription).IsUnicode(false);
            });

            modelBuilder.Entity<RfqDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RFQ_Details");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<RptBankOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Rpt_BankOpeningBalance");

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<RptPayTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<RstTenent>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NTenentId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRoomNo).IsUnicode(false);

                entity.Property(e => e.XTenentCode).IsUnicode(false);

                entity.Property(e => e.XTenentName).IsUnicode(false);
            });

            modelBuilder.Entity<RstTenentDetail>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NTenentDetailId });

                entity.Property(e => e.NItemId).IsUnicode(false);

                entity.Property(e => e.XExtensionCode).IsUnicode(false);
            });

            modelBuilder.Entity<RstTenentInvoice>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NBatchId });

                entity.Property(e => e.XBatchCode).IsUnicode(false);
            });

            modelBuilder.Entity<RstTenentInvoiceDetail>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NInvoiceId });
            });

            modelBuilder.Entity<RstTenentInvoiceDetailItem>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NInvoiceDetail });

                entity.Property(e => e.XExtensionCode).IsUnicode(false);
            });

            modelBuilder.Entity<SchAcademicYear>(entity =>
            {
                entity.Property(e => e.NAcYearId).ValueGeneratedNever();

                entity.Property(e => e.BYearClosed).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAcYear).IsUnicode(false);
            });

            modelBuilder.Entity<SchAdditionalFeeDetails>(entity =>
            {
                entity.Property(e => e.NFeeDetailsId).ValueGeneratedNever();

                entity.Property(e => e.XFeeDescription).IsUnicode(false);
            });

            modelBuilder.Entity<SchAdmission>(entity =>
            {
                entity.Property(e => e.NAdmissionId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NAdmittedDivisionId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NClassTypeId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NDivisionId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NInactive).HasDefaultValueSql("((0))");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XAlergies).IsUnicode(false);

                entity.Property(e => e.XAssesmentRemarks).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XBookCode).IsUnicode(false);

                entity.Property(e => e.XBridgePgm).IsUnicode(false);

                entity.Property(e => e.XBridgeProgramYear).IsUnicode(false);

                entity.Property(e => e.XContactPersonName1).IsUnicode(false);

                entity.Property(e => e.XContactPersonName2).IsUnicode(false);

                entity.Property(e => e.XContactPersonNo1).IsUnicode(false);

                entity.Property(e => e.XContactPersonNo2).IsUnicode(false);

                entity.Property(e => e.XDisPhysicalAbility).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttnd).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttnd1).IsUnicode(false);

                entity.Property(e => e.XLastSchoolGrade).IsUnicode(false);

                entity.Property(e => e.XLastSchoolGrade1).IsUnicode(false);

                entity.Property(e => e.XLastSchoolyear).IsUnicode(false);

                entity.Property(e => e.XLastSchoolyear1).IsUnicode(false);

                entity.Property(e => e.XLrn).IsUnicode(false);

                entity.Property(e => e.XMedicationDetails).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XPlaceofBirth).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomNo).IsUnicode(false);

                entity.Property(e => e.XSpecialCareRequirement).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);

                entity.Property(e => e.XTransferReason).IsUnicode(false);

                entity.Property(e => e.XTransportationBusNo).IsUnicode(false);

                entity.Property(e => e.XTransportationType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.HasOne(d => d.NAcYear)
                    .WithMany(p => p.SchAdmission)
                    .HasForeignKey(d => d.NAcYearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_Admission_Sch_AcademicYear");

                entity.HasOne(d => d.NClass)
                    .WithMany(p => p.SchAdmission)
                    .HasForeignKey(d => d.NClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_Admission_Sch_Class");

                entity.HasOne(d => d.NParent)
                    .WithMany(p => p.SchAdmission)
                    .HasForeignKey(d => d.NParentId)
                    .HasConstraintName("FK_Sch_Admission_Sch_ParentDetails");
            });

            modelBuilder.Entity<SchAdmissionClass>(entity =>
            {
                entity.Property(e => e.NAdmissionClassId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NPromotionId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SchAdmissionFeeSetup>(entity =>
            {
                entity.Property(e => e.NAdmissionFeeSetupId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NClassTypeId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NFrequencyId).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.NAdmission)
                    .WithMany(p => p.SchAdmissionFeeSetup)
                    .HasForeignKey(d => d.NAdmissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_AdmissionFeeSetup_Sch_Admission");
            });

            modelBuilder.Entity<SchBookDistibution>(entity =>
            {
                entity.Property(e => e.NDistibutionId).ValueGeneratedNever();

                entity.Property(e => e.XBookCde).IsUnicode(false);

                entity.Property(e => e.XDistibutionNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<SchBookDistibutionDetails>(entity =>
            {
                entity.Property(e => e.NDistibutionDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchBusRegistration>(entity =>
            {
                entity.Property(e => e.NRegistrationId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.XBuildingName).IsUnicode(false);

                entity.Property(e => e.XBuildingNo).IsUnicode(false);

                entity.Property(e => e.XLandMark).IsUnicode(false);

                entity.Property(e => e.XRegistrationCode).IsUnicode(false);

                entity.Property(e => e.XStreetName).IsUnicode(false);

                entity.Property(e => e.XStreetNo).IsUnicode(false);

                entity.Property(e => e.XZoneName).IsUnicode(false);

                entity.Property(e => e.XZoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchBusRoute>(entity =>
            {
                entity.Property(e => e.NRouteId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DTime).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchBusRouteDetail>(entity =>
            {
                entity.Property(e => e.NRouteDetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DTime).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchBusStop>(entity =>
            {
                entity.Property(e => e.NStopId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);
            });

            modelBuilder.Entity<SchClass>(entity =>
            {
                entity.Property(e => e.NClassId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NStudentAccountGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassCode).IsUnicode(false);

                entity.HasOne(d => d.NClassType)
                    .WithMany(p => p.SchClass)
                    .HasForeignKey(d => d.NClassTypeId)
                    .HasConstraintName("FK_Sch_Class_Sch_ClassType");
            });

            modelBuilder.Entity<SchClassDivision>(entity =>
            {
                entity.Property(e => e.NClassDivisionId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClassDivision).IsUnicode(false);
            });

            modelBuilder.Entity<SchClassDivisionSetup>(entity =>
            {
                entity.Property(e => e.NClassDivisionSetupId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NClassDivision)
                    .WithMany(p => p.SchClassDivisionSetup)
                    .HasForeignKey(d => d.NClassDivisionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_ClassDivisionSetup_Sch_ClassDivision1");

                entity.HasOne(d => d.NClass)
                    .WithMany(p => p.SchClassDivisionSetup)
                    .HasForeignKey(d => d.NClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_ClassDivisionSetup_Sch_Class1");
            });

            modelBuilder.Entity<SchClassFeeSetup>(entity =>
            {
                entity.Property(e => e.NClassFeeId).ValueGeneratedNever();

                entity.Property(e => e.BIsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NClass)
                    .WithMany(p => p.SchClassFeeSetup)
                    .HasForeignKey(d => d.NClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_ClassFeeSetup_Sch_ClassType");

                entity.HasOne(d => d.NFeeType)
                    .WithMany(p => p.SchClassFeeSetup)
                    .HasForeignKey(d => d.NFeeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_ClassFeeSetup_Sch_FeeType");

                entity.HasOne(d => d.NFrequency)
                    .WithMany(p => p.SchClassFeeSetup)
                    .HasForeignKey(d => d.NFrequencyId)
                    .HasConstraintName("FK_Sch_ClassFeeSetup_Sch_Frequency");
            });

            modelBuilder.Entity<SchClassItemDetail>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NClassId, e.NItemId });
            });

            modelBuilder.Entity<SchClassType>(entity =>
            {
                entity.Property(e => e.NClassTypeId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NFeeIncomeDefAccountId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NFeeProposedIncomeDefAccountId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NStudentDefAccountId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NStudentDefGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XClassType).IsUnicode(false);
            });

            modelBuilder.Entity<SchClinicManager>(entity =>
            {
                entity.Property(e => e.NClinicManagerId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClinicCode).IsUnicode(false);

                entity.Property(e => e.XHclocation).IsUnicode(false);

                entity.Property(e => e.XHcno).IsUnicode(false);

                entity.Property(e => e.XHospitalReason).IsUnicode(false);

                entity.Property(e => e.XInterpretation).IsUnicode(false);

                entity.Property(e => e.XOtherDiseases).IsUnicode(false);

                entity.Property(e => e.XSurgeryOperation).IsUnicode(false);
            });

            modelBuilder.Entity<SchDriverRegistration>(entity =>
            {
                entity.HasKey(e => e.NDriverId)
                    .HasName("PK_Trans_DriverRegis");

                entity.Property(e => e.NDriverId).ValueGeneratedNever();

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XDrivingLicenseId).IsUnicode(false);

                entity.Property(e => e.XIqamaNumber).IsUnicode(false);

                entity.HasOne(d => d.NNationality)
                    .WithMany(p => p.SchDriverRegistration)
                    .HasForeignKey(d => d.NNationalityId)
                    .HasConstraintName("FK_Trans_DriverRegis_Pay_Nationality");
            });

            modelBuilder.Entity<SchFeeAccountDefaults>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NAccDefaultId, e.NFnYearId });
            });

            modelBuilder.Entity<SchFeeAdvance>(entity =>
            {
                entity.Property(e => e.NAdvanceId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAdvanceNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("sch_FeeBalance");
            });

            modelBuilder.Entity<SchFeeCategory>(entity =>
            {
                entity.Property(e => e.NFeeCategoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeCategoryAr).IsUnicode(false);

                entity.Property(e => e.XFeeCategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeCategoryType>(entity =>
            {
                entity.Property(e => e.NFeeCategoryTypeId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeDiscount>(entity =>
            {
                entity.Property(e => e.NDiscountId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDiscountNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeMapping>(entity =>
            {
                entity.Property(e => e.NFeeMappingId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchFeeMappingDetails>(entity =>
            {
                entity.HasKey(e => e.NFeeMappingDetailsId)
                    .HasName("PK_Sch_FeeMappingDetailsID");

                entity.Property(e => e.NFeeMappingDetailsId).ValueGeneratedNever();

                entity.Property(e => e.BActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchFeeProcessing>(entity =>
            {
                entity.HasKey(e => e.NProcessingId)
                    .HasName("PK_Sch_FeeProcessing_1");

                entity.Property(e => e.NProcessingId).ValueGeneratedNever();

                entity.Property(e => e.XProcessingId).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeReceipt>(entity =>
            {
                entity.Property(e => e.NReceiptId).ValueGeneratedNever();

                entity.Property(e => e.BIsTransfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.HasOne(d => d.NAdmission)
                    .WithMany(p => p.SchFeeReceipt)
                    .HasForeignKey(d => d.NAdmissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sch_FeeReceipt_Sch_Admission");
            });

            modelBuilder.Entity<SchFeeReceiptDetails>(entity =>
            {
                entity.HasKey(e => new { e.NReceiptId, e.NReceiptDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchFeeReturn>(entity =>
            {
                entity.Property(e => e.NReturnId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XMemoNo).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeReturnDetails>(entity =>
            {
                entity.HasKey(e => new { e.NReturnId, e.NReturnDetailsId });

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchFeeType>(entity =>
            {
                entity.Property(e => e.NFeeTypeId).ValueGeneratedNever();

                entity.Property(e => e.BAuthenticationReQuired).HasDefaultValueSql("((0))");

                entity.Property(e => e.BIsActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.XDirection).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.HasOne(d => d.NFrequencyNavigation)
                    .WithMany(p => p.SchFeeType)
                    .HasForeignKey(d => d.NFrequencyId)
                    .HasConstraintName("FK_Sch_FeeType_Sch_Frequency");
            });

            modelBuilder.Entity<SchFeeUpdate>(entity =>
            {
                entity.Property(e => e.NFeeUpdateId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XFeeUpdateNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchFeeUpdateDetail>(entity =>
            {
                entity.Property(e => e.NFeeUpdateDetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchFrequency>(entity =>
            {
                entity.Property(e => e.NFrequencyId).ValueGeneratedNever();

                entity.Property(e => e.XFrequencyName).IsUnicode(false);
            });

            modelBuilder.Entity<SchParentDetails>(entity =>
            {
                entity.Property(e => e.NParentId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XBuildingName).IsUnicode(false);

                entity.Property(e => e.XBuildingNo).IsUnicode(false);

                entity.Property(e => e.XCompanyF).IsUnicode(false);

                entity.Property(e => e.XCompanyM).IsUnicode(false);

                entity.Property(e => e.XEmailF).IsUnicode(false);

                entity.Property(e => e.XEmailM).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XJobF).IsUnicode(false);

                entity.Property(e => e.XJobM).IsUnicode(false);

                entity.Property(e => e.XLandMark).IsUnicode(false);

                entity.Property(e => e.XOfficeNoF).IsUnicode(false);

                entity.Property(e => e.XOfficeNoM).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XParentCode).IsUnicode(false);

                entity.Property(e => e.XPcity).IsUnicode(false);

                entity.Property(e => e.XPfamilyName).IsUnicode(false);

                entity.Property(e => e.XPfatherName).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPmotherName).IsUnicode(false);

                entity.Property(e => e.XPnationalIdf).IsUnicode(false);

                entity.Property(e => e.XPnationalIdm).IsUnicode(false);

                entity.Property(e => e.XPnationalityF).IsUnicode(false);

                entity.Property(e => e.XPnationalityM).IsUnicode(false);

                entity.Property(e => e.XPpassportNoF).IsUnicode(false);

                entity.Property(e => e.XPpassportNoM).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);

                entity.Property(e => e.XStreetName).IsUnicode(false);

                entity.Property(e => e.XStreetNo).IsUnicode(false);

                entity.Property(e => e.XTelephoneF).IsUnicode(false);

                entity.Property(e => e.XTelephoneM).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XZoneName).IsUnicode(false);

                entity.Property(e => e.XZoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchPrefectManager>(entity =>
            {
                entity.Property(e => e.NCaseId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCaseCode).IsUnicode(false);

                entity.Property(e => e.XOther).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XViolation).IsUnicode(false);
            });

            modelBuilder.Entity<SchPromotionMaster>(entity =>
            {
                entity.HasKey(e => e.NPromotionId)
                    .HasName("PK_Sch_PromotionLog");

                entity.Property(e => e.NPromotionId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPromotionCode).IsUnicode(false);
            });

            modelBuilder.Entity<SchRegistration>(entity =>
            {
                entity.Property(e => e.NRegId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NQatarId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPhone).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<SchReservationPayment>(entity =>
            {
                entity.Property(e => e.NPaymentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SchReservationPaymentDetail>(entity =>
            {
                entity.Property(e => e.NPaymentDetailsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchSales>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BIsDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.BIsRemoved).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NRefFormId).HasDefaultValueSql("((0))");

                entity.Property(e => e.NType).HasDefaultValueSql("((0))");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.HasOne(d => d.N)
                    .WithMany()
                    .HasForeignKey(d => new { d.NCompanyId, d.NLedgerId, d.NFnYearId })
                    .HasConstraintName("FK_Sch_Sales_Acc_MastLedger");
            });

            modelBuilder.Entity<SchSalesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchStudentAssessment>(entity =>
            {
                entity.Property(e => e.NAssessmentId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAssessmentCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentAttendenceDetail>(entity =>
            {
                entity.Property(e => e.NEntryDetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentAttendenceMaster>(entity =>
            {
                entity.Property(e => e.NEntryId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XEntryNo).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentClub>(entity =>
            {
                entity.Property(e => e.NPkeyId).ValueGeneratedNever();

                entity.Property(e => e.DDay).IsUnicode(false);

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XClubName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XSchedule).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentClubDetail>(entity =>
            {
                entity.HasKey(e => e.NClubDetailId)
                    .HasName("PK_StudentClubDetail");

                entity.Property(e => e.NClubDetailId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchStudentHealth>(entity =>
            {
                entity.Property(e => e.NHealthId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XHealthRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentHistory>(entity =>
            {
                entity.Property(e => e.NStudHistoryId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.NPromotion)
                    .WithMany(p => p.SchStudentHistory)
                    .HasForeignKey(d => d.NPromotionId)
                    .HasConstraintName("FK_Sch_StudentHistory_Sch_PromotionMaster");
            });

            modelBuilder.Entity<SchStudentHouse>(entity =>
            {
                entity.Property(e => e.NHouseId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XHouseCode).IsUnicode(false);

                entity.Property(e => e.XHouseDesc).IsUnicode(false);

                entity.Property(e => e.XHouseName).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentStatus>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<SchStudentVaccine>(entity =>
            {
                entity.Property(e => e.NVaccineId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SchTeacher>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NTeacherId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XResidencePhone).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XTeacherCode).IsUnicode(false);

                entity.Property(e => e.XTeacherName).IsUnicode(false);
            });

            modelBuilder.Entity<SchTransportationDirection>(entity =>
            {
                entity.Property(e => e.NDirectionId).ValueGeneratedNever();

                entity.Property(e => e.XDirection).IsUnicode(false);
            });

            modelBuilder.Entity<SchVehicleExpence>(entity =>
            {
                entity.HasKey(e => e.NVehicleExpenseId)
                    .HasName("PK_Trans_VehicleExpence");

                entity.Property(e => e.NVehicleExpenseId).ValueGeneratedNever();

                entity.Property(e => e.XNote).IsUnicode(false);

                entity.HasOne(d => d.NDriver)
                    .WithMany(p => p.SchVehicleExpence)
                    .HasForeignKey(d => d.NDriverId)
                    .HasConstraintName("FK_Sch_VehicleExpence_Sch_DriverRegistration");

                entity.HasOne(d => d.NVehicle)
                    .WithMany(p => p.SchVehicleExpence)
                    .HasForeignKey(d => d.NVehicleId)
                    .HasConstraintName("FK_Sch_VehicleExpence_Sch_VehicleRegistration");
            });

            modelBuilder.Entity<SchVehicleRegistration>(entity =>
            {
                entity.HasKey(e => e.NVehicleId)
                    .HasName("PK_Trans_VehicleRegistration");

                entity.Property(e => e.NVehicleId).ValueGeneratedNever();

                entity.Property(e => e.XNumberPlate).IsUnicode(false);

                entity.Property(e => e.XRoot).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);

                entity.HasOne(d => d.NDriver)
                    .WithMany(p => p.SchVehicleRegistration)
                    .HasForeignKey(d => d.NDriverId)
                    .HasConstraintName("FK_Trans_VehicleRegistration_Trans_DriverRegis");
            });

            modelBuilder.Entity<SecApprovalSettingsEmployee>(entity =>
            {
                entity.Property(e => e.NApprovalSettingsId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XApprovalSettingsCode).IsUnicode(false);

                entity.Property(e => e.XApprovalSettingsDesc).IsUnicode(false);
            });

            modelBuilder.Entity<SecApprovalSettingsEmployeeDetails>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<SecApprovalSettingsGeneral>(entity =>
            {
                entity.Property(e => e.NSecApprovalId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SecFormComponents>(entity =>
            {
                entity.Property(e => e.NCtrlId).ValueGeneratedNever();

                entity.Property(e => e.NLabelCtrlId).HasDefaultValueSql("((0))");

                entity.Property(e => e.XControl).IsUnicode(false);

                entity.Property(e => e.XCtrlName).IsUnicode(false);

                entity.Property(e => e.XCtrlText).IsUnicode(false);

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XProcCode).IsUnicode(false);

                entity.Property(e => e.XRptCompanyIdfield).IsUnicode(false);

                entity.Property(e => e.XRptYearIdfield).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);

                entity.Property(e => e.XTag).IsUnicode(false);
            });

            modelBuilder.Entity<SecMenus>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NMenuId, e.XMenuName })
                    .HasName("IND_Sec_Menus")
                    .IsClustered();

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);
            });

            modelBuilder.Entity<SecModuleContents>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<SecModules>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XModuleCode).IsUnicode(false);

                entity.Property(e => e.XModuleName).IsUnicode(false);
            });

            modelBuilder.Entity<SecQuickAccess>(entity =>
            {
                entity.HasKey(e => new { e.NQaccessId, e.NUserId });
            });

            modelBuilder.Entity<SecReportsComponents>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NCompId, e.NMenuId })
                    .HasName("IND_Sec_ReportsComponents")
                    .IsClustered();

                entity.Property(e => e.BEnableMultiselect).HasDefaultValueSql("((0))");

                entity.Property(e => e.XCompType).IsUnicode(false);

                entity.Property(e => e.XCriteria).IsUnicode(false);

                entity.Property(e => e.XDataField).IsUnicode(false);

                entity.Property(e => e.XDataFieldBranchId).IsUnicode(false);

                entity.Property(e => e.XDataFieldCompanyId).IsUnicode(false);

                entity.Property(e => e.XDataFieldUserId).IsUnicode(false);

                entity.Property(e => e.XDataFieldYearId).IsUnicode(false);

                entity.Property(e => e.XDefVal1).IsUnicode(false);

                entity.Property(e => e.XDefVal2).IsUnicode(false);

                entity.Property(e => e.XFieldList).IsUnicode(false);

                entity.Property(e => e.XFieldType).IsUnicode(false);

                entity.Property(e => e.XFieldWidth).IsUnicode(false);

                entity.Property(e => e.XFieldtoReturn).IsUnicode(false);

                entity.Property(e => e.XFixedValList).IsUnicode(false);

                entity.Property(e => e.XHideFieldList).IsUnicode(false);

                entity.Property(e => e.XLangControlNo).IsUnicode(false);

                entity.Property(e => e.XLinkField).IsUnicode(false);

                entity.Property(e => e.XOperator).IsUnicode(false);

                entity.Property(e => e.XOrderByField).IsUnicode(false);

                entity.Property(e => e.XProcCode).IsUnicode(false);

                entity.Property(e => e.XReportCode).IsUnicode(false);

                entity.Property(e => e.XRptFile).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);
            });

            modelBuilder.Entity<SecUser>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NUserId });

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.SecUser)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sec_User_Inv_Company");
            });

            modelBuilder.Entity<SecUserCategory>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NUserCategoryId });

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.HasOne(d => d.NCompany)
                    .WithMany(p => p.SecUserCategory)
                    .HasForeignKey(d => d.NCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sec_UserCategory_Acc_Company");
            });

            modelBuilder.Entity<SecUserLevel>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<SecUserPrevileges>(entity =>
            {
                entity.HasKey(e => new { e.NUserCategoryId, e.NMenuId });
            });

            modelBuilder.Entity<SmehItemUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiry>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryAl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryAlhayerDate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryAlhayerDate1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryNew>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.QtyBalance).IsUnicode(false);

                entity.Property(e => e.QtyIn).IsUnicode(false);

                entity.Property(e => e.QtyOut).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryWadiLabenDate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehLotExpiryWadiLabenDate1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Lot).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Qty).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<SmehSerials>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Srl1).IsUnicode(false);

                entity.Property(e => e.Srl10).IsUnicode(false);

                entity.Property(e => e.Srl11).IsUnicode(false);

                entity.Property(e => e.Srl12).IsUnicode(false);

                entity.Property(e => e.Srl13).IsUnicode(false);

                entity.Property(e => e.Srl14).IsUnicode(false);

                entity.Property(e => e.Srl15).IsUnicode(false);

                entity.Property(e => e.Srl16).IsUnicode(false);

                entity.Property(e => e.Srl17).IsUnicode(false);

                entity.Property(e => e.Srl18).IsUnicode(false);

                entity.Property(e => e.Srl19).IsUnicode(false);

                entity.Property(e => e.Srl2).IsUnicode(false);

                entity.Property(e => e.Srl20).IsUnicode(false);

                entity.Property(e => e.Srl21).IsUnicode(false);

                entity.Property(e => e.Srl22).IsUnicode(false);

                entity.Property(e => e.Srl23).IsUnicode(false);

                entity.Property(e => e.Srl24).IsUnicode(false);

                entity.Property(e => e.Srl25).IsUnicode(false);

                entity.Property(e => e.Srl3).IsUnicode(false);

                entity.Property(e => e.Srl4).IsUnicode(false);

                entity.Property(e => e.Srl5).IsUnicode(false);

                entity.Property(e => e.Srl6).IsUnicode(false);

                entity.Property(e => e.Srl7).IsUnicode(false);

                entity.Property(e => e.Srl8).IsUnicode(false);

                entity.Property(e => e.Srl9).IsUnicode(false);

                entity.Property(e => e.StoreNo).IsUnicode(false);

                entity.Property(e => e.Total).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STUDENT");

                entity.Property(e => e.Mobileno).IsUnicode(false);

                entity.Property(e => e.Mobileno1).IsUnicode(false);

                entity.Property(e => e.Phone1).IsUnicode(false);

                entity.Property(e => e.Phone2).IsUnicode(false);

                entity.Property(e => e.StudentAddress).IsUnicode(false);

                entity.Property(e => e.StudentFirstName).IsUnicode(false);

                entity.Property(e => e.StudentGender).IsUnicode(false);

                entity.Property(e => e.StudentLastName).IsUnicode(false);

                entity.Property(e => e.StudentMiddileName).IsUnicode(false);

                entity.Property(e => e.StudentNationality).IsUnicode(false);

                entity.Property(e => e.StudentPassport).IsUnicode(false);

                entity.Property(e => e.StudentPassword).IsUnicode(false);

                entity.Property(e => e.StudentQuran).IsUnicode(false);

                entity.Property(e => e.StudentRemarks).IsUnicode(false);

                entity.Property(e => e.StudentUsername).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);
            });

            modelBuilder.Entity<TaxDetailsGstRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TaxDetailsGST_rpt");

                entity.Property(e => e.Cgst).IsUnicode(false);

                entity.Property(e => e.Sgst).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Teacher");

                entity.Property(e => e.CategoryId).IsUnicode(false);

                entity.Property(e => e.DepartmentId).IsUnicode(false);

                entity.Property(e => e.DesignationId).IsUnicode(false);

                entity.Property(e => e.IquamaNo).IsUnicode(false);

                entity.Property(e => e.TeacherAddress).IsUnicode(false);

                entity.Property(e => e.TeacherCode).IsUnicode(false);

                entity.Property(e => e.TeacherEmail).IsUnicode(false);

                entity.Property(e => e.TeacherFirstName).IsUnicode(false);

                entity.Property(e => e.TeacherGender).IsUnicode(false);

                entity.Property(e => e.TeacherLastName).IsUnicode(false);

                entity.Property(e => e.TeacherMiddleName).IsUnicode(false);

                entity.Property(e => e.TeacherNationality).IsUnicode(false);

                entity.Property(e => e.TeacherPassport).IsUnicode(false);

                entity.Property(e => e.TeacherPassword).IsUnicode(false);

                entity.Property(e => e.TeacherPrimaryMobilePhone).IsUnicode(false);

                entity.Property(e => e.TeacherPrimaryResidencePhone).IsUnicode(false);

                entity.Property(e => e.TeacherQualification).IsUnicode(false);

                entity.Property(e => e.TeacherRemarks).IsUnicode(false);

                entity.Property(e => e.TeacherResume).IsUnicode(false);

                entity.Property(e => e.TeacherSecondaryMobilePhone).IsUnicode(false);
            });

            modelBuilder.Entity<TempAccVoucherCcamtDefference>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<TempEiaEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<TempEiaStudent>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.B).IsUnicode(false);

                entity.Property(e => e.C).IsUnicode(false);

                entity.Property(e => e.D).IsUnicode(false);

                entity.Property(e => e.E).IsUnicode(false);

                entity.Property(e => e.F).IsUnicode(false);

                entity.Property(e => e.G).IsUnicode(false);

                entity.Property(e => e.H).IsUnicode(false);

                entity.Property(e => e.I).IsUnicode(false);

                entity.Property(e => e.J).IsUnicode(false);

                entity.Property(e => e.K).IsUnicode(false);

                entity.Property(e => e.L).IsUnicode(false);

                entity.Property(e => e.M).IsUnicode(false);

                entity.Property(e => e.N).IsUnicode(false);

                entity.Property(e => e.O).IsUnicode(false);

                entity.Property(e => e.P).IsUnicode(false);

                entity.Property(e => e.Q).IsUnicode(false);

                entity.Property(e => e.R).IsUnicode(false);

                entity.Property(e => e.S).IsUnicode(false);

                entity.Property(e => e.T).IsUnicode(false);

                entity.Property(e => e.U).IsUnicode(false);

                entity.Property(e => e.V).IsUnicode(false);

                entity.Property(e => e.W).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);
            });

            modelBuilder.Entity<TempTable>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Col1).IsUnicode(false);

                entity.Property(e => e.Col2).IsUnicode(false);

                entity.Property(e => e.Col3).IsUnicode(false);

                entity.Property(e => e.Col4).IsUnicode(false);

                entity.Property(e => e.Col5).IsUnicode(false);

                entity.Property(e => e.Col6).IsUnicode(false);

                entity.Property(e => e.Col7).IsUnicode(false);

                entity.Property(e => e.Col8).IsUnicode(false);

                entity.Property(e => e.Col9).IsUnicode(false);
            });

            modelBuilder.Entity<TestPsdStudentList>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<TvlTicketType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XTicketType).IsUnicode(false);
            });

            modelBuilder.Entity<TvlTicketing>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFnyearId, e.NTicketId });

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NCustPenalty).HasDefaultValueSql("((0.00))");

                entity.Property(e => e.NSuppPenalty).HasDefaultValueSql("((0.00))");

                entity.Property(e => e.NUsedFare).HasDefaultValueSql("((0.00))");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPassenger).IsUnicode(false);

                entity.Property(e => e.XRoute).IsUnicode(false);

                entity.Property(e => e.XTicketNo).IsUnicode(false);
            });

            modelBuilder.Entity<VchService>(entity =>
            {
                entity.HasKey(e => new { e.NCompanyId, e.NFnYearId, e.NRefId });

                entity.Property(e => e.XPlateNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRefCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceTime).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VehAuctionDetails>(entity =>
            {
                entity.Property(e => e.NAuctionId).ValueGeneratedNever();

                entity.Property(e => e.NVehModel).IsUnicode(false);

                entity.Property(e => e.XAuctionNo).IsUnicode(false);

                entity.Property(e => e.XOwnerMobileNo).IsUnicode(false);

                entity.Property(e => e.XOwnerName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVehBookNo).IsUnicode(false);

                entity.Property(e => e.XVehBookOwner).IsUnicode(false);

                entity.Property(e => e.XVehBookSource).IsUnicode(false);

                entity.Property(e => e.XVehChaseNo).IsUnicode(false);

                entity.Property(e => e.XVehColor).IsUnicode(false);

                entity.Property(e => e.XVehIdno)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehName).IsUnicode(false);

                entity.Property(e => e.XVehRegNo).IsUnicode(false);

                entity.Property(e => e.XVehRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehSize).IsUnicode(false);
            });

            modelBuilder.Entity<VehContractFile>(entity =>
            {
                entity.Property(e => e.NContractId).ValueGeneratedNever();

                entity.Property(e => e.DBuyIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.DSelIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.NTotalInWords)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NVehModel).IsUnicode(false);

                entity.Property(e => e.XBuyAddress).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaNo).IsUnicode(false);

                entity.Property(e => e.XBuyMobileNo).IsUnicode(false);

                entity.Property(e => e.XBuyName).IsUnicode(false);

                entity.Property(e => e.XBuyNationality).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XOldVehBookName).IsUnicode(false);

                entity.Property(e => e.XSelIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XSelIqamaNo).IsUnicode(false);

                entity.Property(e => e.XSelMobileNo).IsUnicode(false);

                entity.Property(e => e.XSelName).IsUnicode(false);

                entity.Property(e => e.XSelNationality).IsUnicode(false);

                entity.Property(e => e.XSelNotes).IsUnicode(false);

                entity.Property(e => e.XVehBookNo).IsUnicode(false);

                entity.Property(e => e.XVehBookOwner).IsUnicode(false);

                entity.Property(e => e.XVehBookSource).IsUnicode(false);

                entity.Property(e => e.XVehChaseNo).IsUnicode(false);

                entity.Property(e => e.XVehColor).IsUnicode(false);

                entity.Property(e => e.XVehIdno)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehName).IsUnicode(false);

                entity.Property(e => e.XVehRegNo).IsUnicode(false);

                entity.Property(e => e.XVehRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehSize).IsUnicode(false);
            });

            modelBuilder.Entity<VehDrivers>(entity =>
            {
                entity.Property(e => e.NDriversId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XDriversCode).IsUnicode(false);

                entity.Property(e => e.XDriversName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VehFileMoving>(entity =>
            {
                entity.Property(e => e.NTransId).ValueGeneratedNever();

                entity.Property(e => e.NOtherExpAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.NVehModel).IsUnicode(false);

                entity.Property(e => e.XOwnerAddress).IsUnicode(false);

                entity.Property(e => e.XOwnerIqamaNo).IsUnicode(false);

                entity.Property(e => e.XOwnerName).IsUnicode(false);

                entity.Property(e => e.XTransNo).IsUnicode(false);

                entity.Property(e => e.XVehBookNo).IsUnicode(false);

                entity.Property(e => e.XVehBookOwner).IsUnicode(false);

                entity.Property(e => e.XVehBookSource).IsUnicode(false);

                entity.Property(e => e.XVehChaseNo).IsUnicode(false);

                entity.Property(e => e.XVehColor).IsUnicode(false);

                entity.Property(e => e.XVehIdno)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehName).IsUnicode(false);

                entity.Property(e => e.XVehRegNo).IsUnicode(false);

                entity.Property(e => e.XVehRemarks)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XVehSize).IsUnicode(false);
            });

            modelBuilder.Entity<View1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_1");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<View2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_2");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<View3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_3");
            });

            modelBuilder.Entity<View4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_4");

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XUrl).IsUnicode(false);
            });

            modelBuilder.Entity<VsaAppointment>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PK_vsa_appointment");

                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.DCompleteDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NRefTypeId)
                    .IsUnicode(false)
                    .HasComment("1 To 4 Walker Davis , 5 Crm FollowUp");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VsaAuthority>(entity =>
            {
                entity.HasKey(e => e.NAuthorityId)
                    .HasName("pk_vsa_Authority");

                entity.Property(e => e.NAuthorityId).ValueGeneratedNever();

                entity.Property(e => e.NOccupationCode).IsUnicode(false);

                entity.Property(e => e.XAuthority).IsUnicode(false);
            });

            modelBuilder.Entity<VsaClientFile>(entity =>
            {
                entity.Property(e => e.NFileId).ValueGeneratedNever();

                entity.Property(e => e.BIsSaveDraft).HasDefaultValueSql("((0))");

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NMainStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XFolloupNote).IsUnicode(false);

                entity.Property(e => e.XNote1).IsUnicode(false);

                entity.Property(e => e.XNote2).IsUnicode(false);

                entity.Property(e => e.XNote3).IsUnicode(false);

                entity.Property(e => e.XStatusNote).IsUnicode(false);

                entity.Property(e => e.XVsaBcc).IsUnicode(false);

                entity.Property(e => e.XVsaTrnno).IsUnicode(false);
            });

            modelBuilder.Entity<VsaConsultant>(entity =>
            {
                entity.Property(e => e.NConsultantId).ValueGeneratedNever();

                entity.Property(e => e.XConsultantCode).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaCustomerRcptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vsa_CustomerRcptDetail");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VsaCustomerSpouseWorkExp>(entity =>
            {
                entity.Property(e => e.NExpId).ValueGeneratedNever();

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VsaCustomerWorkExp>(entity =>
            {
                entity.HasKey(e => e.NExpId)
                    .HasName("PK__vsa_Customer_WorkExp");

                entity.Property(e => e.NExpId).ValueGeneratedNever();

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VsaCvRegistration>(entity =>
            {
                entity.Property(e => e.NRegId).ValueGeneratedNever();

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseName).IsUnicode(false);

                entity.Property(e => e.XSpouseProfession).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XStatusDescription).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFileCancel>(entity =>
            {
                entity.Property(e => e.NCancelId).ValueGeneratedNever();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XCancelNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFileCancelDetail>(entity =>
            {
                entity.Property(e => e.NCancelDetailId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFilePaymentDetails>(entity =>
            {
                entity.Property(e => e.NPaymentId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFileStages>(entity =>
            {
                entity.HasKey(e => e.NStageId)
                    .HasName("pk_vsa_FileStages");

                entity.Property(e => e.NStageId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFileStatus>(entity =>
            {
                entity.HasKey(e => e.NStatusId)
                    .HasName("pk_vsa_FileStatus");

                entity.Property(e => e.NStatusId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFileStatusHistory>(entity =>
            {
                entity.Property(e => e.NFileStatusId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XStatusDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VsaFollowUp>(entity =>
            {
                entity.Property(e => e.NFollowUpId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VsaGenDefaults>(entity =>
            {
                entity.HasKey(e => e.NTypeId)
                    .HasName("PK_Vsa_gen_Defaults");

                entity.Property(e => e.NTypeId).ValueGeneratedNever();

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaOccupation>(entity =>
            {
                entity.HasKey(e => e.NOccupationId)
                    .HasName("pk_vsa_Occupation");

                entity.Property(e => e.NOccupationId).ValueGeneratedNever();

                entity.Property(e => e.NOccupationCode).IsUnicode(false);

                entity.Property(e => e.XAnzscoCode).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);
            });

            modelBuilder.Entity<VsaParalegal>(entity =>
            {
                entity.Property(e => e.NParalegalId).ValueGeneratedNever();

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XParalegalCode).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaRegistrationStatus>(entity =>
            {
                entity.Property(e => e.NStatusId).ValueGeneratedNever();

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VsaRegistrationStatusDetail>(entity =>
            {
                entity.Property(e => e.NRegStatusId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XStatusDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccAccountWiseTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_AccountWiseTotal");

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccAccountWiseTotalByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_AccountWiseTotal_ByMonth");

                entity.Property(e => e.NMonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccBankDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_BankDetails");

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccBankDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccBank_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCsvtemplatePath).IsUnicode(false);

                entity.Property(e => e.XEmaiId).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIban).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XStreet).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccBranchDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccBranch_Disp");

                entity.Property(e => e.BranchCode).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccBranchMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_BranchMaster_Disp");

                entity.Property(e => e.XBranchName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccBudgeting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccBudgeting");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.Year).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCashFlow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCashFlow");

                entity.Property(e => e.CashLedger).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCashFlowStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_CashFlowStatement");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCashFlowStatementRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Acc_CashFlowStatement_rpt");

                entity.Property(e => e.Narration).IsUnicode(false);

                entity.Property(e => e.NarrationAr).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCcledgerSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCCLedgerSum");
            });

            modelBuilder.Entity<VwAccChequeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccChequeDetails");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCompanyBankMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_CompanyBankMaster");

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCompanyDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCompany_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCostCenterReports>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCostCenterReports");
            });

            modelBuilder.Entity<VwAccCostCentreMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_CostCentreMaster");
            });

            modelBuilder.Entity<VwAccCostCentreMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCostCentreMaster_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CostCentreName).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccCostCentreMasterList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_CostCentreMaster_List");
            });

            modelBuilder.Entity<VwAccCountryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccCountryDetails");

                entity.Property(e => e.CountryCode).IsUnicode(false);

                entity.Property(e => e.CountryName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccDayClosing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_DayClosing");

                entity.Property(e => e.DClosedDate).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccDetails4ChequePrint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_Details4ChequePrint");

                entity.Property(e => e.XAmtInWords).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPlaceOfIssue).IsUnicode(false);

                entity.Property(e => e.XRemark).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccFinancialYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccFinancialYear");

                entity.Property(e => e.FnYearId).IsUnicode(false);

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccFnYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccFnYear");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccGroupTrialBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccGroupTrialBalance");

                entity.Property(e => e.NLevel).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccGroupTrialBalance1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccGroupTrialBalance1");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccGroupTrialBalanceDrCr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccGroupTrialBalanceDrCr");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccGroupWiseTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_GroupWiseTotal");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccGroupWiseTotalByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_GroupWiseTotal_ByMonth");

                entity.Property(e => e.NMonth).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccLedgerGroupCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccLedgerGroupCategory");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XReportGroupDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccLedgerReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_LedgerReport");

                entity.Property(e => e.AgainstLedgerCode).IsUnicode(false);

                entity.Property(e => e.AgainstLedgerName).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccLedgerTrialBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccLedgerTrialBalance");

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccLedgerTrialBalance1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccLedgerTrialBalance1");

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMastGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccMastGroup");

                entity.Property(e => e.GroupCode).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMastGroupAr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccMastGroup_Ar");

                entity.Property(e => e.GroupCode).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMastLedger>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccMastLedger");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMastLedgerAr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccMastLedger_Ar");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMastLedgerForEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccMastLedgerForEmployee");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccMasterGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_MasterGroup");

                entity.Property(e => e.GroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccOtherInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_OtherInformation");

                entity.Property(e => e.XInformation).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccPeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_Period");

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.PeriodId).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccPeriodDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccPeriod_Disp");

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.PeriodCode).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);

                entity.Property(e => e.XPeriod).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccProjectDetailsExpense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccProjectDetailsExpense");

                entity.Property(e => e.DocName).IsUnicode(false);

                entity.Property(e => e.DocNo).IsUnicode(false);

                entity.Property(e => e.NDays).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccProjectDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccProjectDetails_rpt");

                entity.Property(e => e.DocName).IsUnicode(false);

                entity.Property(e => e.DocNo).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccPurchasePaymentTotals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccPurchasePaymentTotals");
            });

            modelBuilder.Entity<VwAccReconciliationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccReconciliation_Disp");

                entity.Property(e => e.StatementDate).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XStatementCode).IsUnicode(false);

                entity.Property(e => e.XVoucherTypesId).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccSalesReceiptTotals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccSalesReceiptTotals");
            });

            modelBuilder.Entity<VwAccStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_Statement");

                entity.Property(e => e.AgainstLedgerCode).IsUnicode(false);

                entity.Property(e => e.AgainstLedgerName).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccStatementImportRulesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccStatementImportRulesDetails");

                entity.Property(e => e.CrAmount).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DValueDate).IsUnicode(false);

                entity.Property(e => e.DateFormat).IsUnicode(false);

                entity.Property(e => e.DrAmount).IsUnicode(false);

                entity.Property(e => e.NTypeId).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccStatementImportRulesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccStatementImportRules_List");

                entity.Property(e => e.XCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccTransType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_TransType");

                entity.Property(e => e.XEntryForm).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherCcamtDefference>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherCCAmtDefference");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherDetailByMonthRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherDetailByMonth_Rpt");

                entity.Property(e => e.NMonth).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XParentGroup).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherDetails");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucher_Disp");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.ChequeNo).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.Posted).IsUnicode(false);

                entity.Property(e => e.VoucherDate).IsUnicode(false);

                entity.Property(e => e.VoucherNo).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherJrnlCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherJrnlCC");

                entity.Property(e => e.DChequeDate).IsUnicode(false);

                entity.Property(e => e.XAmtInWordsAr).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDefLedgerType).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XNarrationAr).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherMasterDetailsSegments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherMaster_Details_Segments");

                entity.Property(e => e.XNaration).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Acc_VoucherMaster_Disp");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDefLedgerType).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XForm).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccVoucherOb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccVoucherOB");

                entity.Property(e => e.DChequeDate).IsUnicode(false);

                entity.Property(e => e.XAmtInWordsAr).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDefLedgerType).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAccoutBehaviourSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AccoutBehaviour_Search");

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAddOrDedImportDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AddOrDedImportDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XRefFieldName).IsUnicode(false);

                entity.Property(e => e.XRefFieldType).IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ageingreport");

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAirPort>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AirPort");

                entity.Property(e => e.XAirportCode).IsUnicode(false);

                entity.Property(e => e.XAirportName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XTypeOfContainer).IsUnicode(false);
            });

            modelBuilder.Entity<VwAmortization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Amortization");
            });

            modelBuilder.Entity<VwAnyEmployeeApprovalDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AnyEmployeeApprovalDetails");

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalCodeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalCodeDetails");

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalCycleStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalCycleStatus");

                entity.Property(e => e.XApprovalName).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XStatusCaption).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalDashBoard");

                entity.Property(e => e.ApprovedUser).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XPartyCode).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalDashBoardHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalDashBoardHistory");

                entity.Property(e => e.ApprovedUser).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XPartyCode).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalDetail");

                entity.Property(e => e.DActionDate).IsUnicode(false);

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XActionUser).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalHistoryPopup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalHistoryPopup");

                entity.Property(e => e.ApprovedBy).IsUnicode(false);

                entity.Property(e => e.DActionDate).IsUnicode(false);

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwApprovalSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ApprovalSummary");

                entity.Property(e => e.DActionDate).IsUnicode(false);

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XActionUser).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwArabicDateFormat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ArabicDateFormat");

                entity.Property(e => e.HijriDate).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssAssetCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_AssetCategory_Disp");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssAssetItemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_AssetItem_Search");

                entity.Property(e => e.PlacedDate).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssDepreciationUcsearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_Depreciation_Ucsearch");

                entity.Property(e => e.DRunDate).IsUnicode(false);

                entity.Property(e => e.XDepriciationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssItemHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_ItemHistory");

                entity.Property(e => e.NTypeOrder).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XBranch).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssItemHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_ItemHistory_rpt");

                entity.Property(e => e.NTypeOrder).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XBranch).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_PO");

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssPosearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_POSearch");

                entity.Property(e => e.NTotAmt).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssPurchaseDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_PurchaseDetails_Disp");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssPurchaseMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_PurchaseMaster_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssSalesDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_SalesDetails_Disp");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssSalesMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_SalesMaster_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssSuspensionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_Suspension_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.DFromDate).IsUnicode(false);

                entity.Property(e => e.DToDate).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssTransactionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_Transaction_Disp");

                entity.Property(e => e.DepriciationNo).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);

                entity.Property(e => e.XDepriciationNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssTransferDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ass_Transfer_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssTransferdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ass_transferdetails");

                entity.Property(e => e.BranchFrom).IsUnicode(false);

                entity.Property(e => e.BranchTo).IsUnicode(false);

                entity.Property(e => e.CostCentreFrom).IsUnicode(false);

                entity.Property(e => e.CostCentreTo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetAddlInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetAddlInfo");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetCategoryTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Asset_CategoryTotal");
            });

            modelBuilder.Entity<VwAssetCategoryTotalSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Asset_CategoryTotal_Sales");
            });

            modelBuilder.Entity<VwAssetDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetDashBoard");

                entity.Property(e => e.AccuDepLedgerName).IsUnicode(false);

                entity.Property(e => e.AssetLedger).IsUnicode(false);

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.DPurchaseDate).IsUnicode(false);

                entity.Property(e => e.NBookValue).IsUnicode(false);

                entity.Property(e => e.NLifePeriod).IsUnicode(false);

                entity.Property(e => e.NPrice).IsUnicode(false);

                entity.Property(e => e.PhysicalLocation).IsUnicode(false);

                entity.Property(e => e.PurchaseLedger).IsUnicode(false);

                entity.Property(e => e.SalesLedger).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDisposalRestrictions).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGisrefNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetMaster");

                entity.Property(e => e.AccuDepLedgerName).IsUnicode(false);

                entity.Property(e => e.AssetLedger).IsUnicode(false);

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.DPurchaseDate).IsUnicode(false);

                entity.Property(e => e.PhysicalLocation).IsUnicode(false);

                entity.Property(e => e.PurchaseLedger).IsUnicode(false);

                entity.Property(e => e.SalesLedger).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDisposalRestrictions).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGisrefNo).IsUnicode(false);

                entity.Property(e => e.XHypothecatedTo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetPofit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetPofit");
            });

            modelBuilder.Entity<VwAssetProfit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetProfit");
            });

            modelBuilder.Entity<VwAssetPurchaseBarcodeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetPurchaseBarcode_Disp");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetPurchasefromPoDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetPurchasefromPO_Details");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetStatusUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetStatusUpdate");

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XNoOfDays).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XReturnStatus).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwAssetStatusUpdateRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AssetStatusUpdateRPT");

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XNoOfDays).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwAttachmentsSync>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_AttachmentsSync");

                entity.Property(e => e.DocumentName).IsUnicode(false);

                entity.Property(e => e.XRecipient).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwBankDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_BankDetails_rpt");

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XEmaiId).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIban).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XStreet).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwBankmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_bankmaster");

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCsvtemplatePath).IsUnicode(false);

                entity.Property(e => e.XEmaiId).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIban).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRptPath).IsUnicode(false);

                entity.Property(e => e.XStreet).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwBankreconsilization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_bankreconsilization");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwBarcodeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_BarcodeDisp");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XTransactionNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwBarcodeFields>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BarcodeFields");

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBarcodeMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_BarcodeMaster_Disp");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XTransactionNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwBarcodeTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BarcodeTemplate");

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XFont).IsUnicode(false);

                entity.Property(e => e.XFontName).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);

                entity.Property(e => e.XTemplateCode).IsUnicode(false);

                entity.Property(e => e.XTemplateName).IsUnicode(false);

                entity.Property(e => e.XTextAlignment).IsUnicode(false);
            });

            modelBuilder.Entity<VwBatchPostingDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BatchPosting_Disp");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionAr).IsUnicode(false);

                entity.Property(e => e.XId).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwBatchwiseStockDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BatchwiseStockDisp");

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwBeneficiaryPartyList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BeneficiaryPartyList");

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XFormId).IsUnicode(false);

                entity.Property(e => e.XPartyCode).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBeneficiaryPurchaseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BeneficiaryPurchaseDetail");

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBoqTender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BOQ_Tender");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XTenderCode).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBoqdetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BOQDetails_Disp");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XFdtno).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XLongDesc).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XShortDesc).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBoqhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BOQHistory");

                entity.Property(e => e.NCost).IsUnicode(false);

                entity.Property(e => e.NSprice).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XFdtno).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XLongDesc).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XShortDesc).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBranchMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BranchMaster");

                entity.Property(e => e.BranchCode).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBudgetingBrachRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BudgetingBrach_rpt");
            });

            modelBuilder.Entity<VwBusDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BusDetails_Disp");

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwBusRegistrationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BusRegistration_Disp");

                entity.Property(e => e.NFees).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegistrationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwBusRegistrationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BusRegistration_rpt");

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCandidateOfferHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CandidateOfferHistory_RPT");

                entity.Property(e => e.XCandidateCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwCashBookDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CashBookDashboard");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAgainstLedger).IsUnicode(false);

                entity.Property(e => e.XAgainstLedgercode).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransactionRef).IsUnicode(false);
            });

            modelBuilder.Entity<VwCashFlowStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CashFlowStatement");

                entity.Property(e => e.AgainstGroup).IsUnicode(false);

                entity.Property(e => e.AgainstGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwCheckCustUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CheckCustUsed");

                entity.Property(e => e.XMsg).IsUnicode(false);
            });

            modelBuilder.Entity<VwCheckPrjUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CheckPrjUsed");

                entity.Property(e => e.XMsg).IsUnicode(false);
            });

            modelBuilder.Entity<VwCheckTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CheckTransaction");

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwChequeTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ChequeTransactions");

                entity.Property(e => e.XAccType).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCompanyBankDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_companyBankDetail");

                entity.Property(e => e.XAccountHolderName).IsUnicode(false);

                entity.Property(e => e.XAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBankNameLocale).IsUnicode(false);

                entity.Property(e => e.XIban).IsUnicode(false);

                entity.Property(e => e.XSwiftNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwContactDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ContactDetails");

                entity.Property(e => e.XEmergencyAddress).IsUnicode(false);

                entity.Property(e => e.XEmergencyAddressH).IsUnicode(false);

                entity.Property(e => e.XEmergencyContctPerson).IsUnicode(false);

                entity.Property(e => e.XEmergencyContctPersonH).IsUnicode(false);

                entity.Property(e => e.XEmergencyEmail).IsUnicode(false);

                entity.Property(e => e.XEmergencyEmailH).IsUnicode(false);

                entity.Property(e => e.XEmergencyNum).IsUnicode(false);

                entity.Property(e => e.XEmergencyNumH).IsUnicode(false);

                entity.Property(e => e.XEmergencyRelation).IsUnicode(false);

                entity.Property(e => e.XEmergencyRelationH).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorClientDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Cor_Client_Disp");

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorrTransDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Corr_TransDetails");

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XCorrespondenceNo).IsUnicode(false);

                entity.Property(e => e.XCurDetailsNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorrespondDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_correspond_dashboard");

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDetailDate).IsUnicode(false);

                entity.Property(e => e.DDetailEntryDate).IsUnicode(false);

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XCorrespondenceNo).IsUnicode(false);

                entity.Property(e => e.XCurDetailsNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorrespondenceDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Correspondence_Dashboard");

                entity.Property(e => e.ClientDescription).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDetailDate).IsUnicode(false);

                entity.Property(e => e.DDetailEntryDate).IsUnicode(false);

                entity.Property(e => e.XCorrespondenceNo).IsUnicode(false);

                entity.Property(e => e.XCurDetailsNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorrespondenceDashboardDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Correspondence_DashboardDetail");

                entity.Property(e => e.ClientDescription).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDetailDate).IsUnicode(false);

                entity.Property(e => e.DDetailEntryDate).IsUnicode(false);

                entity.Property(e => e.XCorrespondenceNo).IsUnicode(false);

                entity.Property(e => e.XCurDetailsNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTrnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwCorrespondenceMax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Correspondence_Max");
            });

            modelBuilder.Entity<VwCostCenterTrans>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CostCenterTrans");

                entity.Property(e => e.NSegment3).IsUnicode(false);

                entity.Property(e => e.NSegment4).IsUnicode(false);

                entity.Property(e => e.NVoucherId).IsUnicode(false);

                entity.Property(e => e.XAssetCode).IsUnicode(false);

                entity.Property(e => e.XAssetName).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNaration).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCostCentreMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CostCentreMaster");

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCrmDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CrmDashboard");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DFollowupdate).IsUnicode(false);

                entity.Property(e => e.NBillAmount).IsUnicode(false);

                entity.Property(e => e.NDiscount).IsUnicode(false);

                entity.Property(e => e.NOtherCharge).IsUnicode(false);

                entity.Property(e => e.NProbability).IsUnicode(false);

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.NStatusId).IsUnicode(false);

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContact).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCrmcode).IsUnicode(false);

                entity.Property(e => e.XFollowupdesc).IsUnicode(false);

                entity.Property(e => e.XLeadby).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XSalesman).IsUnicode(false);

                entity.Property(e => e.XSource).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwCrmdetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CRMDetails_Disp");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCrmmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_crmmaster");

                entity.Property(e => e.DAppintmentDate).IsUnicode(false);

                entity.Property(e => e.DFollowupdate).IsUnicode(false);

                entity.Property(e => e.EnquiryDate).IsUnicode(false);

                entity.Property(e => e.EnquiryType).IsUnicode(false);

                entity.Property(e => e.EnquiryTypeCode).IsUnicode(false);

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.NStatusId).IsUnicode(false);

                entity.Property(e => e.ProjectType).IsUnicode(false);

                entity.Property(e => e.ProjectTypeCode).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContact).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCrmcode).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLeadby).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayee).IsUnicode(false);

                entity.Property(e => e.XPlaceofTender).IsUnicode(false);

                entity.Property(e => e.XProjectImplementation).IsUnicode(false);

                entity.Property(e => e.XProjectRegion).IsUnicode(false);

                entity.Property(e => e.XSalesman).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XScopeofSummary).IsUnicode(false);

                entity.Property(e => e.XSource).IsUnicode(false);

                entity.Property(e => e.XTenderDescription).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);

                entity.Property(e => e.XTenderReferance).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XTypeofClarification).IsUnicode(false);

                entity.Property(e => e.XWaytype).IsUnicode(false);
            });

            modelBuilder.Entity<VwCsvbankDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CSVBankDetails");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCurrentStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CurrentStock");
            });

            modelBuilder.Entity<VwCustomerBalanceAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerBalanceAdjustment");

                entity.Property(e => e.AdjustmentDate).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerDetailsInPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerDetailsInPrs");

                entity.Property(e => e.DIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerDiscSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerDiscSettings");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDiscCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerDiscountMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerDiscountMaster");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCdmcode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerMaterialDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerMaterial_Disp");

                entity.Property(e => e.Project).IsUnicode(false);

                entity.Property(e => e.TransferProject).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemDescription).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerMaterialListDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerMaterialList_Disp");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerMaterialsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerMaterials_List");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomerPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CustomerPrs");

                entity.Property(e => e.DIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomeradvancepay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_customeradvancepay");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwCustomeradvpayall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_customeradvpayall");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwDailyCashSalesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_DailyCashSalesSummary");

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwDailyCollection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DailyCollection");

                entity.Property(e => e.DDay).IsUnicode(false);

                entity.Property(e => e.XCashTypeBehaviour).IsUnicode(false);
            });

            modelBuilder.Entity<VwDailySalesReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DailySalesReport");
            });

            modelBuilder.Entity<VwDailySalesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_DailySalesSummary");

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwDailySalesSummaryDayClose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_DailySalesSummary_DayClose");

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwDefaultAccountDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DefaultAccount_Disp");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.AccountCode).IsUnicode(false);

                entity.Property(e => e.XFieldDescr).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);
            });

            modelBuilder.Entity<VwDeliveryDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DeliveryDispatch");

                entity.Property(e => e.CustomerAddress).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.DCheckDate).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DeliveryDate).IsUnicode(false);

                entity.Property(e => e.DeliveryTime).IsUnicode(false);

                entity.Property(e => e.DispatchStatus).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.XAssignedPerson).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);
            });

            modelBuilder.Entity<VwDeliveryDispatch1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DeliveryDispatch1");

                entity.Property(e => e.CustomerAddress).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Dispatch");
            });

            modelBuilder.Entity<VwDispatchNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DispatchNo_Search");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.DeliveryAddress).IsUnicode(false);

                entity.Property(e => e.DeliveryDate).IsUnicode(false);

                entity.Property(e => e.DeliveryTime).IsUnicode(false);

                entity.Property(e => e.DispatchNo).IsUnicode(false);

                entity.Property(e => e.DispatchStatus).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);
            });

            modelBuilder.Entity<VwDispatchReturnDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DispatchReturnDetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwDispatchReturnDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DispatchReturnDisp");

                entity.Property(e => e.DReturnDate).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XDispatchReturnNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwDispatchSummRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DispatchSumm_RPT");

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XDispatchReturnNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XResponsible).IsUnicode(false);
            });

            modelBuilder.Entity<VwDmsExpiryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DMS_ExpiryDetails");

                entity.Property(e => e.DEmailDate).IsUnicode(false);

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.DSmsdate).IsUnicode(false);

                entity.Property(e => e.XContents).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFolderName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPath).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwDmsFileDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DMS_FileDetail");

                entity.Property(e => e.XContents).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFolderName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPath).IsUnicode(false);

                entity.Property(e => e.XRefName).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwDmsReminderCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DmsReminderCategory");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwDmsReminderCategoryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DmsReminderCategoryDetails");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XRecipient).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwDocDefaultDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DocDefault_Disp");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwDocumentFolderList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DocumentFolder_List");

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFolderCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPath).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwDocumentTray>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DocumentTray");

                entity.Property(e => e.DVoucherDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.XEntryUserName).IsUnicode(false);

                entity.Property(e => e.XId).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);

                entity.Property(e => e.XVoucherRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwDraftsalesdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Draftsalesdetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpAddlInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpAddlInfo");

                entity.Property(e => e.XAchivmnts).IsUnicode(false);

                entity.Property(e => e.XAddEduInfo).IsUnicode(false);

                entity.Property(e => e.XClgCourse).IsUnicode(false);

                entity.Property(e => e.XClgLevel).IsUnicode(false);

                entity.Property(e => e.XDginclusiveDate).IsUnicode(false);

                entity.Property(e => e.XDguniverity).IsUnicode(false);

                entity.Property(e => e.XDrCourse).IsUnicode(false);

                entity.Property(e => e.XDrInclusiveDate).IsUnicode(false);

                entity.Property(e => e.XDrUnits).IsUnicode(false);

                entity.Property(e => e.XDrUniverity).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XHsLevel).IsUnicode(false);

                entity.Property(e => e.XHschool).IsUnicode(false);

                entity.Property(e => e.XPgcourse).IsUnicode(false);

                entity.Property(e => e.XPginclusiveDate).IsUnicode(false);

                entity.Property(e => e.XPglastSchool).IsUnicode(false);

                entity.Property(e => e.XPgunits).IsUnicode(false);

                entity.Property(e => e.XPguniverity).IsUnicode(false);

                entity.Property(e => e.XPrcreg).IsUnicode(false);

                entity.Property(e => e.XPrcregNo).IsUnicode(false);

                entity.Property(e => e.XPrcvalidity).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpApprovalSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpApprovalSettings");
            });

            modelBuilder.Entity<VwEmpApprovalSettingsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpApprovalSettingsDetails");
            });

            modelBuilder.Entity<VwEmpAsset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpAsset");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpGrpDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpGrp_Disp");

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpGrpWorkhours>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpGrp_Workhours");

                entity.Property(e => e.XDay).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpMailDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpMail_Disp");

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpMaintenance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpMaintenance");

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XEmployeeType).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaintenanceCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XTrade).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpMedicalInsuranceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpMedicalInsurance_Details");

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpPayInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpPayInformation");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XParentPayCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpPriceSettingsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpPriceSettings_Disp");
            });

            modelBuilder.Entity<VwEmpProjects>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpProjects");

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpSponsorDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpSponsorDetails");

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpTimeSheetBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpTimeSheetBatch");

                entity.Property(e => e.BatchCode).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpTimeSheetRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpTimeSheetRequest");

                entity.Property(e => e.BatchCode).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpTimesheetMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpTimesheetMaster");

                entity.Property(e => e.BatchCode).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmpVacationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmpVacationList");

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmploanList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_emploanList");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeAssetsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeAssets_RPT");

                entity.Property(e => e.AccuDepLedgerName).IsUnicode(false);

                entity.Property(e => e.AssetLedger).IsUnicode(false);

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.DPurchaseDate).IsUnicode(false);

                entity.Property(e => e.NBookValue).IsUnicode(false);

                entity.Property(e => e.NPrice).IsUnicode(false);

                entity.Property(e => e.PhysicalLocation).IsUnicode(false);

                entity.Property(e => e.PurchaseLedger).IsUnicode(false);

                entity.Property(e => e.SalesLedger).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDisposalRestrictions).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGisrefNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeClearance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeClearance");

                entity.Property(e => e.DHireDate).IsUnicode(false);

                entity.Property(e => e.DRequestDate).IsUnicode(false);

                entity.Property(e => e.XApprovedBy).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XClearanceItem).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeClearanceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeClearanceNo_Search");

                entity.Property(e => e.DHireDate).IsUnicode(false);

                entity.Property(e => e.DRequestDate).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeClearanceSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeClearanceSettings");

                entity.Property(e => e.XApprovedBy).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XClearanceItem).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XPurposeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeClearanceSettingsLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeClearanceSettingsLoad");

                entity.Property(e => e.XApprovedBy).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XClearanceItem).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XPurposeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeCount");

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeDependence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeDependence");

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDlname).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);

                entity.Property(e => e.XFamInsFile).IsUnicode(false);

                entity.Property(e => e.XFamInsRefFile).IsUnicode(false);

                entity.Property(e => e.XInsDuration).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeDependenceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeDependenceDetails");

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDlname).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XFamInsFile).IsUnicode(false);

                entity.Property(e => e.XFamInsRefFile).IsUnicode(false);

                entity.Property(e => e.XInsDuration).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassDep).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeRealationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeRealationMaster");

                entity.Property(e => e.Dependent).IsUnicode(false);

                entity.Property(e => e.Relation).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_employee_reminder");

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.EmployeeNo).IsUnicode(false);

                entity.Property(e => e.ExpireDate).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SN).IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeRequestApprovalDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeRequestApprovalDashBoard");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestTypeDesc).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeSalDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeSalDetails");

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.TypeVal).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeSalaryDetailsSif>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeSalaryDetails_SIF");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.NPayTypeId).IsUnicode(false);

                entity.Property(e => e.NPaymentId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpPatakaName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPaymentDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReturnCode).IsUnicode(false);

                entity.Property(e => e.XTransDate).IsUnicode(false);

                entity.Property(e => e.XTransactionnumber).IsUnicode(false);

                entity.Property(e => e.XTransactionstatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeType");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeeWisePayCodeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeeWisePayCodeDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeemaintenance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Employeemaintenance");

                entity.Property(e => e.NDailyRate).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeemaintenanceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Employeemaintenance_Details");

                entity.Property(e => e.NDailyRate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwEmployeesBasicSalary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmployeesBasicSalary");
            });

            modelBuilder.Entity<VwEmppaymentMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmppaymentMaster");

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwEndOfService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EndOfService");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEndType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceEndCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwFamilyDetailsRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FamilyDetailsREC");

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDlname).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfItemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffItem_search");

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfItemSearchPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffItem_search_Price");

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwAccAgedReceivables>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FFw_Acc_AgedReceivables");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwAwbSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_AwbSearch");

                entity.Property(e => e.XAwbNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwCustomerDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffwCustomerDetails");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwCustomerDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FfwCustomer_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwGoodsSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_GoodsSearch");

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Ffw_Invoice");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XAirportArrivalCode).IsUnicode(false);

                entity.Property(e => e.XAirportDepartureName).IsUnicode(false);

                entity.Property(e => e.XArrivalAirportName).IsUnicode(false);

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XConsingeeAddress).IsUnicode(false);

                entity.Property(e => e.XConsingeeCode).IsUnicode(false);

                entity.Property(e => e.XConsingeeName).IsUnicode(false);

                entity.Property(e => e.XConsingeePhoneNo).IsUnicode(false);

                entity.Property(e => e.XContainedDescription).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCustomerAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerPhoneNo).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerm).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XDepartureAirportCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightCode).IsUnicode(false);

                entity.Property(e => e.XFlightName).IsUnicode(false);

                entity.Property(e => e.XFreightPayment).IsUnicode(false);

                entity.Property(e => e.XFrightPayment).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XIncoterms).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XModeOfTransaction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XShipperAddress).IsUnicode(false);

                entity.Property(e => e.XShipperCode).IsUnicode(false);

                entity.Property(e => e.XShipperName).IsUnicode(false);

                entity.Property(e => e.XShipperPhoneNo).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XSrvice).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwInvoiceDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_FfwInvoice_Dashboard");

                entity.Property(e => e.AttachmentCount).IsUnicode(false);

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwInvoiceManifest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_InvoiceManifest");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XAirportArrivalCode).IsUnicode(false);

                entity.Property(e => e.XAirportDepartureName).IsUnicode(false);

                entity.Property(e => e.XArrivalAirportName).IsUnicode(false);

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XConsingeeAddress).IsUnicode(false);

                entity.Property(e => e.XConsingeeCode).IsUnicode(false);

                entity.Property(e => e.XConsingeeName).IsUnicode(false);

                entity.Property(e => e.XConsingeePhoneNo).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCustomerAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerPhoneNo).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerm).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XDepartureAirportCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightCode).IsUnicode(false);

                entity.Property(e => e.XFlightName).IsUnicode(false);

                entity.Property(e => e.XFreightPayment).IsUnicode(false);

                entity.Property(e => e.XFrightPayment).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XIncoterms).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XModeOfTransaction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XShipperAddress).IsUnicode(false);

                entity.Property(e => e.XShipperCode).IsUnicode(false);

                entity.Property(e => e.XShipperName).IsUnicode(false);

                entity.Property(e => e.XShipperPhoneNo).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XSrvice).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwItemCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_ItemCategory");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.DisplayName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCostLedger).IsUnicode(false);

                entity.Property(e => e.XCostLedgerCode).IsUnicode(false);

                entity.Property(e => e.XInvLedger).IsUnicode(false);

                entity.Property(e => e.XInvLedgerCode).IsUnicode(false);

                entity.Property(e => e.XSalesLedger).IsUnicode(false);

                entity.Property(e => e.XSalesLedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwItemMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_ItemMaster");

                entity.Property(e => e.NPrice).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocFrom).IsUnicode(false);

                entity.Property(e => e.XLocTo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwItemMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FfwItemMaster_Disp");

                entity.Property(e => e.XAssetName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwManifest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_Manifest");

                entity.Property(e => e.XAgentName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XLocFrom).IsUnicode(false);

                entity.Property(e => e.XLocTo).IsUnicode(false);

                entity.Property(e => e.XManifestNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwManifestDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_ManifestDetails");

                entity.Property(e => e.XConsingeeName).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XManifestNo).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XShipperName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwPriceListDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_PriceListDetails");

                entity.Property(e => e.LocationFrom).IsUnicode(false);

                entity.Property(e => e.LocationTo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPriceCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwPurchasedetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_Purchasedetail");

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XEnterCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XEnterCurrencyName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVendorinvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwQtnGoodsSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_QtnGoodsSearch");

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Ffw_Quotation");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XAirportArrivalCode).IsUnicode(false);

                entity.Property(e => e.XAirportDepartureName).IsUnicode(false);

                entity.Property(e => e.XArrivalAirportName).IsUnicode(false);

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCustomerAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerPhoneNo).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerm).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XDepartureAirportCode).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightCode).IsUnicode(false);

                entity.Property(e => e.XFlightName).IsUnicode(false);

                entity.Property(e => e.XFrightPayment).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XIncoterms).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XModeOfTransaction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XSrvice).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwQuotationPurchasedetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_QuotationPurchasedetail");

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XEnterCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XEnterCurrencyName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVendorinvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwQuotationSaleDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_QuotationSaleDetail");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwQuotationSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FfwQuotationSearch");

                entity.Property(e => e.DQuotationDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwSalesExecutiveRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_SalesExecutiveRpt");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwSalesInvoiceRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ffw_SalesInvoiceRpt");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.Expr5).IsUnicode(false);

                entity.Property(e => e.Party).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XAirportArrivalCode).IsUnicode(false);

                entity.Property(e => e.XAirportDepartureName).IsUnicode(false);

                entity.Property(e => e.XArrivalAirportName).IsUnicode(false);

                entity.Property(e => e.XAwbNo).IsUnicode(false);

                entity.Property(e => e.XChgWt).IsUnicode(false);

                entity.Property(e => e.XCommInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XConsingeeAddress).IsUnicode(false);

                entity.Property(e => e.XConsingeeCode).IsUnicode(false);

                entity.Property(e => e.XConsingeeName).IsUnicode(false);

                entity.Property(e => e.XConsingeePhoneNo).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCustomerAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerPhoneNo).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerm).IsUnicode(false);

                entity.Property(e => e.XDeliveryTerms).IsUnicode(false);

                entity.Property(e => e.XDepartureAirportCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XFileRefNo).IsUnicode(false);

                entity.Property(e => e.XFlightCode).IsUnicode(false);

                entity.Property(e => e.XFlightName).IsUnicode(false);

                entity.Property(e => e.XFreightPayment).IsUnicode(false);

                entity.Property(e => e.XFrightPayment).IsUnicode(false);

                entity.Property(e => e.XGoodsDescription).IsUnicode(false);

                entity.Property(e => e.XGrossWt).IsUnicode(false);

                entity.Property(e => e.XIncoterms).IsUnicode(false);

                entity.Property(e => e.XInsurance).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInvoiceMode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItems).IsUnicode(false);

                entity.Property(e => e.XMarks).IsUnicode(false);

                entity.Property(e => e.XModeOfTransaction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPackages).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPono).IsUnicode(false);

                entity.Property(e => e.XShipperAddress).IsUnicode(false);

                entity.Property(e => e.XShipperCode).IsUnicode(false);

                entity.Property(e => e.XShipperName).IsUnicode(false);

                entity.Property(e => e.XShipperPhoneNo).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XSrvice).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_SalesReceipt");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwSalesdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_salesdetail");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwStaticalinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_staticalinformation");

                entity.Property(e => e.NMonth).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwStaticalinformationNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffw_staticalinformation_New");

                entity.Property(e => e.NMonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FFw_Vendor");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwFfwVendorDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ffwVendorDetails");

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFileCancellationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FileCancellation_rpt");

                entity.Property(e => e.Age).IsUnicode(false);

                entity.Property(e => e.XCancelNo).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwFileNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FileNo_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);
            });

            modelBuilder.Entity<VwFillUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FillUnit");

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwFollowupdisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_followupdisp");

                entity.Property(e => e.CrmDate).IsUnicode(false);

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.Salescontactname).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContact).IsUnicode(false);

                entity.Property(e => e.XCrmcode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwFormComponents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFormComponents");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XControl).IsUnicode(false);

                entity.Property(e => e.XCtrlName).IsUnicode(false);

                entity.Property(e => e.XCtrlText).IsUnicode(false);

                entity.Property(e => e.XFieldName).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);

                entity.Property(e => e.XTag).IsUnicode(false);
            });

            modelBuilder.Entity<VwFreightEnquiryDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FreightEnquiryDashBoard");

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenApprovalStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GenApproval_Status");

                entity.Property(e => e.XMsgStatus).IsUnicode(false);

                entity.Property(e => e.XNoStatusCaption).IsUnicode(false);

                entity.Property(e => e.XStatusCaption).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XYesStatusCaption).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenDocumentExpiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_DocumentExpiry");

                entity.Property(e => e.XFormName).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenEntryDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GenEntryDashboard");

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.XId).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);

                entity.Property(e => e.XVoucherRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenFollowUp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GenFollowUp");

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenFormNameDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_FormName_Disp");

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenRemainderCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_RemainderCategory");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenReminderCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_ReminderCategory");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenReminderDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_ReminderDashboard");

                entity.Property(e => e.DEmailDate).IsUnicode(false);

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.DSmsdate).IsUnicode(false);

                entity.Property(e => e.XFormName).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenReminderDashboardExpired>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_ReminderDashboardExpired");

                entity.Property(e => e.DEmailDate).IsUnicode(false);

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.DSmsdate).IsUnicode(false);

                entity.Property(e => e.XFormName).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenReminderFields>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gen_ReminderFields");

                entity.Property(e => e.XFieldNo).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwGenStatusApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GenStatusApproval");

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwGender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Gender");

                entity.Property(e => e.Gender).IsUnicode(false);
            });

            modelBuilder.Entity<VwGosiAmountDetailsForPay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GosiAmountDetailsForPay");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwGosiPaidDetaildForEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GosiPaidDetaildForEdit");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwGosiPaidDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GosiPaidDetails");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwGosiPaidTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GosiPaidTotal");
            });

            modelBuilder.Entity<VwGosiPaymentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GosiPayment_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.TotalAmount).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwGosiprocessingForPosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_GOSIProcessingForPosting");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwIdcPrint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_IDC_print");

                entity.Property(e => e.XCardCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);
            });

            modelBuilder.Entity<VwInsuranceAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InsuranceAmount");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwInsuranceAmountCategoryWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InsuranceAmountCategoryWise");

                entity.Property(e => e.NCost).IsUnicode(false);

                entity.Property(e => e.NPrice).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XInsuranceClass).IsUnicode(false);

                entity.Property(e => e.XPrice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInsuranceClassRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InsuranceClass_rpt");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInsurancePayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InsurancePayCode");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInsuranceSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InsuranceSettings");

                entity.Property(e => e.Agent).IsUnicode(false);

                entity.Property(e => e.CategoryCode).IsUnicode(false);

                entity.Property(e => e.CategoryName).IsUnicode(false);

                entity.Property(e => e.InsuranceClass).IsUnicode(false);

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInsuranceSettingsCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceSettingsDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwInterviewEmployeeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InterviewEmployeeDetails");

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XIntName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAmountSplitType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_AmountSplitType");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssembly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssembly");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssemblyDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssemblyDetails");

                entity.Property(e => e.XAlterProductCode).IsUnicode(false);

                entity.Property(e => e.XAlterProductName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssetCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssetCategory_Disp");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.LifePeriod).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssetInventoryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssetInventoryDetails");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssetInventoryInvoiceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssetInventoryInvoiceNo_Search");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvAssetInventoryReceiptNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvAssetInventoryReceiptNo_Search");

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvBeneficiaryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_Beneficiary_Disp");

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvBeneficiaryDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvBeneficiary_Disp");

                entity.Property(e => e.BeneficiaryAddress).IsUnicode(false);

                entity.Property(e => e.BeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.BeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAccount).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBank).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBranch).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryNameAr).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryPhone).IsUnicode(false);

                entity.Property(e => e.XBeneficiarySwiftCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvBeneficiaryWithArabicDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvBeneficiary_WithArabic_Disp");

                entity.Property(e => e.BeneficiaryAddress).IsUnicode(false);

                entity.Property(e => e.BeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.BeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAccount).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBank).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBranch).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryNameAr).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryPhone).IsUnicode(false);

                entity.Property(e => e.XBeneficiarySwiftCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvBranchwiseSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvBranchwise_Summary");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCheckApprovalCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CheckApprovalCode");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCheckCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CheckCustomer");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCheckPayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CheckPayCode");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCheckSalesman>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CheckSalesman");

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCheckVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CheckVendor");

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCreditInvBalList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCreditInvBalList");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCreditNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCreditNo_Search");

                entity.Property(e => e.DRetDate).IsUnicode(false);

                entity.Property(e => e.NTotalReturnAmount).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCreditNoteNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCreditNoteNo_Search");

                entity.Property(e => e.CreditNoteNo).IsUnicode(false);

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomer");

                entity.Property(e => e.DIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCrnumber).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XDiscCode).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUrl).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerBalance");
            });

            modelBuilder.Entity<VwInvCustomerDemob>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomer_Demob");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomer_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerMobilizationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerMobilization_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerPaymentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CustomerPayment_Rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionInv).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerPaymentRpt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerPayment_rpt");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerProjectSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CustomerProject_Search");

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerProjects>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerProjects");

                entity.Property(e => e.DStartDate).IsUnicode(false);

                entity.Property(e => e.ExpenseAccount).IsUnicode(false);

                entity.Property(e => e.ExpenseCode).IsUnicode(false);

                entity.Property(e => e.IncomeAccount).IsUnicode(false);

                entity.Property(e => e.IncomeCode).IsUnicode(false);

                entity.Property(e => e.NContractAmt).IsUnicode(false);

                entity.Property(e => e.NEstimateCost).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDistrict).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XEmployee).IsUnicode(false);

                entity.Property(e => e.XEmpsId).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMainProject).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);

                entity.Property(e => e.XPo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSuppliers).IsUnicode(false);

                entity.Property(e => e.XSuppsId).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerProjectsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerProjects_Disp");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ProjectCode).IsUnicode(false);

                entity.Property(e => e.ProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerProjectsMobilization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerProjectsMobilization");

                entity.Property(e => e.XManCust).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerSalesDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CustomerSalesDiscount");
            });

            modelBuilder.Entity<VwInvCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerStatement");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerStatementStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomerStatement_Status");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvCustomer_Summary");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvCustomerTransactionByItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_CustomerTransactionByItem");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NQty).IsUnicode(false);

                entity.Property(e => e.NSprice).IsUnicode(false);

                entity.Property(e => e.TotalAmount).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDailySalesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_DailySales_rpt");

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_Dashboard");

                entity.Property(e => e.DRefDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.NContractAmt).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDraftBranchName).IsUnicode(false);

                entity.Property(e => e.XDraftUser).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XUser).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDebitNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDebitNo_Search");

                entity.Property(e => e.DReturnDate).IsUnicode(false);

                entity.Property(e => e.NTotalPaidAmount).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDebitNoteNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDebitNoteNo_Search");

                entity.Property(e => e.DebitNoteNo).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryDetailsPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryDetails_PRS");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNoteDetailDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_DeliveryNoteDetail_disp");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNoteDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryNoteDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XDeliveryLocation).IsUnicode(false);

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNoteMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_DeliveryNoteMaster_disp");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDeliveryNoteNo).IsUnicode(false);

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNoteNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryNoteNo_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNotePending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_DeliveryNotePending");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDeliveryNoteNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNotePrsdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryNote_PRSDetails");

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNoteSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryNote_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryNotesPendingInrRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_DeliveryNotesPendingINR_rpt");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryRetunEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryRetunEdit");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryReturnDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryReturn_Disp");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvDeliveryReturnSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDeliveryReturn_Sub");
            });

            modelBuilder.Entity<VwInvDepartmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvDepartment_Disp");

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.DepartmentCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvFreePurchaseDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_FreePurchase_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMusthakalasNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvFreeTextPurchaseDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_FreeTextPurchase_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMusthakalasNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemCategory");

                entity.Property(e => e.CessCategoryName).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.InwardLedger).IsUnicode(false);

                entity.Property(e => e.OutwardLedger).IsUnicode(false);

                entity.Property(e => e.TaxCategory1InwardLedger).IsUnicode(false);

                entity.Property(e => e.TaxCategory1OutwardLedger).IsUnicode(false);

                entity.Property(e => e.TaxCategory1XCategoryName).IsUnicode(false);

                entity.Property(e => e.TaxCategory1XDisplayName).IsUnicode(false);

                entity.Property(e => e.TaxCategory1XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCessCode).IsUnicode(false);

                entity.Property(e => e.XCessInwardLedgerCode).IsUnicode(false);

                entity.Property(e => e.XCessInwardLedgerName).IsUnicode(false);

                entity.Property(e => e.XCessName).IsUnicode(false);

                entity.Property(e => e.XCessOutwardLedgerCode).IsUnicode(false);

                entity.Property(e => e.XCessOutwardLedgerName).IsUnicode(false);

                entity.Property(e => e.XCostLedger).IsUnicode(false);

                entity.Property(e => e.XCostLedgerCode).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XInvLedger).IsUnicode(false);

                entity.Property(e => e.XInvLedgerCode).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XSalesLedger).IsUnicode(false);

                entity.Property(e => e.XSalesLedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemCategory_Disp");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.CategoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemCategoryMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemCategoryMaster");

                entity.Property(e => e.XCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemClass");

                entity.Property(e => e.ClassId).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemCost");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemDepartmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemDepartment_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemDetails");

                entity.Property(e => e.StockUnit).IsUnicode(false);

                entity.Property(e => e.XAlternativeItemCode).IsUnicode(false);

                entity.Property(e => e.XAlternativeItemName).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemMaster");

                entity.Property(e => e.ClassName).IsUnicode(false);

                entity.Property(e => e.XAddUnit1).IsUnicode(false);

                entity.Property(e => e.XAddUnit2).IsUnicode(false);

                entity.Property(e => e.XAssItemCode).IsUnicode(false);

                entity.Property(e => e.XAssItemName).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XBgColor).IsUnicode(false);

                entity.Property(e => e.XBomitemUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategory1).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemBrand).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemMaster_Disp");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemMasterStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemMaster_Status");

                entity.Property(e => e.ClassName).IsUnicode(false);

                entity.Property(e => e.XAddUnit1).IsUnicode(false);

                entity.Property(e => e.XAddUnit2).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XBgColor).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategory1).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemBrand).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemPriceListDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemPriceList_Disp");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemPriceMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemPriceMaster");

                entity.Property(e => e.SellingPrice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemPurchase");

                entity.Property(e => e.BaseUnit).IsUnicode(false);

                entity.Property(e => e.NImeifrom).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBomitemUnit).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCessName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchByBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search_ByBranch");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search_Dispatch");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBomitemUnit).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCessName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_SearchNew");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.Price).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search_PO");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBomitemUnit).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchWhlink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search_WHLink");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCessDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemSearchWhlinkPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItem_Search_WHLink_PRS");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.PrsitemId).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemStatement");

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemStockReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemStockReminder");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemStockReminderStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemStockReminder_Status");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemStockReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemStockReport");

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemStockReportDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemStockReport_Disp");

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ItemUnit");

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemUnit1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemUnit");

                entity.Property(e => e.XBaseDescription).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvItemUnitDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvItemUnit_Disp");

                entity.Property(e => e.BaseUnit).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.UnitCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvJobNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_JobNoSearch");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XJobNo).IsUnicode(false);

                entity.Property(e => e.XMake).IsUnicode(false);

                entity.Property(e => e.XModelNo).IsUnicode(false);

                entity.Property(e => e.XProductType).IsUnicode(false);

                entity.Property(e => e.XSerialNo).IsUnicode(false);

                entity.Property(e => e.XServiceTag).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvJwlItemMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_jwl_ItemMaster");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvJwlSalesIteamSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_jwl_SalesIteamSearch");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XImgPath).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvJwlType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_JwlType");

                entity.Property(e => e.JewelType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvJwlrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_jwlrate");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLastsavedStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_LastsavedStatus");

                entity.Property(e => e.DRefDate).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLedGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_LedGroup");

                entity.Property(e => e.GroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLedgerAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_LedgerAll");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PartyType).IsUnicode(false);

                entity.Property(e => e.XRefCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLedgerCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_LedgerCustomer");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvLocation");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLocationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_Location_Disp");

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLocationDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvLocation_Disp");

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.LocationCode).IsUnicode(false);

                entity.Property(e => e.LocationName).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvLocationStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvLocation_Stock");

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.LocationCode).IsUnicode(false);

                entity.Property(e => e.LocationName).IsUnicode(false);

                entity.Property(e => e.NCurrentStock).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMainAssetCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMainAssetCategory_Disp");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.LifePeriod).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMeetingTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_MeetingTracker");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMeetingTrackerCategorywiseDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMeetingTrackerCategorywiseDetails");

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNextAction).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMeetingTrackerDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMeetingTrackerDetails");

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNextAction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMeetingTrackerDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMeetingTrackerDetails_RPT");

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNextAction).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMeetingTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_MeetingTrackerHistory");

                entity.Property(e => e.MeetingDate).IsUnicode(false);

                entity.Property(e => e.StatusName).IsUnicode(false);

                entity.Property(e => e.TargetDate).IsUnicode(false);

                entity.Property(e => e.XActionOwner).IsUnicode(false);

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XNextAction).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMileagereport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_Mileagereport");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrnDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMrn_Details");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorDeliveryNote).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrnReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRN_Report");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrnSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRN_Sub");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndepartmentWiseReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDepartmentWise_Report");

                entity.Property(e => e.Prsno).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorDeliveryNote).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndetails1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDetails");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.Prsno).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndetailsDispGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDetailsDispGrid");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.Prsno).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndetailsPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDetails_PO");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndetailsPoprs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDetails_POPRS");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.Prsno).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCurrency).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrndetailsRs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNDetails_RS");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.NSerialTo).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrnfreights>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNFreights");

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrninvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_MRNInvoice");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);

                entity.Property(e => e.XVendorDeliveryNote).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvMrnnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvMRNNo_Search");

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.MrnDate).IsUnicode(false);

                entity.Property(e => e.MrnNo).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.PurchaseInvoice).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorDeliveryNote).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvOpenQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvOpenQty");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvOrderToDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_OrderToDispatch");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvOrderToDispatchSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_OrderToDispatch_Sales");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPartyBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPartyBalance");

                entity.Property(e => e.PartyType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayReceiptSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayReceipt_Search");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayReceivables>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayReceivables");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayables>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayables");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayablesDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayables_Dashboard");

                entity.Property(e => e.Balance).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDelaydays).IsUnicode(false);

                entity.Property(e => e.NBalanceAmount).IsUnicode(false);

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.PaidAmount).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayablesLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayables_log");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayablesPayableRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayables_PayableRpt");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPayablesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayables_rpt");

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPaymentRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PaymentRequest");

                entity.Property(e => e.XBeneficiary).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XPayTo).IsUnicode(false);

                entity.Property(e => e.XPaymentRefNo).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPaymentRequestList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPaymentRequest_List");

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPaymentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPayment_Search");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPaymentSettlementSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPaymentSettlement_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingDeliveryNotesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingDeliveryNotes_rpt");

                entity.Property(e => e.NStatus).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingGrnRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingGRN_rpt");

                entity.Property(e => e.NPorderDetailsId).IsUnicode(false);

                entity.Property(e => e.NStatus).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingPurchasesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingPurchases_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingQuotationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPendingQuotationDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingSalesInvoiceRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingSalesInvoice_rpt");

                entity.Property(e => e.NStatus).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingSalesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingSales_rpt");

                entity.Property(e => e.NStatus).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPendingSrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PendingSRS");

                entity.Property(e => e.DExpDelDate).IsUnicode(false);

                entity.Property(e => e.DTime).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.NCashReceived).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NDueDays).IsUnicode(false);

                entity.Property(e => e.NNetAmt).IsUnicode(false);

                entity.Property(e => e.RequestType).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPopendingReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_POPending_Report");

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrePaymentSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPrePaymentSchedule");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrepaymentDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPrepaymentDetails");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentNo).IsUnicode(false);

                entity.Property(e => e.XStartmonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrfRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PRF_RPT");

                entity.Property(e => e.XAmountInWords).IsUnicode(false);

                entity.Property(e => e.XBeneficaryNameEng).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAccount).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAddress).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBank).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBranch).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryPhone).IsUnicode(false);

                entity.Property(e => e.XBeneficiarySwiftCode).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDocuments).IsUnicode(false);

                entity.Property(e => e.XIbanNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRequestor).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvProductionDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ProductionDashboard");

                entity.Property(e => e.DExpDeliveryDate).IsUnicode(false);

                entity.Property(e => e.DPrsdate).IsUnicode(false);

                entity.Property(e => e.NQty).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvProductionOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvProductionOrder");

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.ItemCode1).IsUnicode(false);

                entity.Property(e => e.ItemCode2).IsUnicode(false);

                entity.Property(e => e.ItemName1).IsUnicode(false);

                entity.Property(e => e.ItemName2).IsUnicode(false);

                entity.Property(e => e.ProductionType).IsUnicode(false);

                entity.Property(e => e.UnitId1).IsUnicode(false);

                entity.Property(e => e.UnitId2).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvProjectDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvProjectDashBoard");

                entity.Property(e => e.ActualBudget).IsUnicode(false);

                entity.Property(e => e.CommittedBudget).IsUnicode(false);

                entity.Property(e => e.DStartDate).IsUnicode(false);

                entity.Property(e => e.ExpenseAccount).IsUnicode(false);

                entity.Property(e => e.ExpenseCode).IsUnicode(false);

                entity.Property(e => e.IncomeAccount).IsUnicode(false);

                entity.Property(e => e.IncomeCode).IsUnicode(false);

                entity.Property(e => e.NContractAmt).IsUnicode(false);

                entity.Property(e => e.NDesignCost).IsUnicode(false);

                entity.Property(e => e.NEstimateCost).IsUnicode(false);

                entity.Property(e => e.NProgress).IsUnicode(false);

                entity.Property(e => e.RemainingBudget).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDistrict).IsUnicode(false);

                entity.Property(e => e.XEmployee).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XPo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSuppliers).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvProjectreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_projectreport");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrsPoCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PRS_Po_Count");
            });

            modelBuilder.Entity<VwInvPrsdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPRSDetails");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLeadTime).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrsnoDeliverySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPRSNo_DeliverySearch");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrsnoDeliverySearchNested>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPRSNo_DeliverySearchNested");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrsnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPRSNo_Search");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrsnoUcsearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPRSNo_UCSearch");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPrspendingReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PRSPending_Report");

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XTransName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurCredAdv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPur_Cred_Adv");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseCategoryWiseRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseCategoryWise_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseDetails");

                entity.Property(e => e.Duration).IsUnicode(false);

                entity.Property(e => e.NImeifrom).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCessDispName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseDetails_Disp");

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseDetailsViewRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseDetailsView_Rpt");

                entity.Property(e => e.NImeifrom).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PurchaseDisp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XMusthakalasNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseFreightReasonDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseFreightReason_Disp");

                entity.Property(e => e.ReasonCode).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseFreightTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseFreightTax");
            });

            modelBuilder.Entity<VwInvPurchaseFreights>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseFreights");

                entity.Property(e => e.NExchangeRate).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_Purchase_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseInvoiceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseInvoiceNo_Search");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNetAmt).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.NInvoiceAmt).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseNo_Search");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNetAmt).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrder");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.XDeliveryPlace).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderDetails");

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderDetailsDISP");

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderDetailsForPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderDetailsForPRS");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderInvoiceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderInvoiceNo_Search");

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderNoGridSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderNo_GridSearch");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.QuotationNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderNo_Search");

                entity.Property(e => e.DUpToDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseOrderQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseOrderQty");
            });

            modelBuilder.Entity<VwInvPurchasePaymentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PurchasePayment_Rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionInv).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchasePaymentStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchasePaymentStatus");

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchasePaymentStatusDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PurchasePaymentStatus_Disp");

                entity.Property(e => e.PaymentNotes).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryCode).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCollectedBy).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchasePaymentStatusSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_PurchasePaymentStatus_Search");

                entity.Property(e => e.RefDate).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseQty");
            });

            modelBuilder.Entity<VwInvPurchaseReturnEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseReturnEdit");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NSerialFrom).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XImei).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseReturnEditImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseReturnEdit_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XImei).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseReturnImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseReturn_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XImei).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseReturnPayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchase_Return_Payments");

                entity.Property(e => e.XReferenseNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvPurchaseReturnSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvPurchaseReturn_Sub");

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvQuotationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvQuotationDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XCustomerNameAr).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMinMarginPerc).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvQuotationGenFollowUp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvQuotationGenFollowUp");

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceiptSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceipt_Search");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceiptSettlementSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceiptSettlement_Search");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivableStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ReceivableStock");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.LocationCodeFrom).IsUnicode(false);

                entity.Property(e => e.LocationCodeTo).IsUnicode(false);

                entity.Property(e => e.LocationNameFrom).IsUnicode(false);

                entity.Property(e => e.LocationNameTo).IsUnicode(false);

                entity.Property(e => e.MemoNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivableStockDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceivableStockDetails");

                entity.Property(e => e.BaseUnit).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivableStockSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceivableStock_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.LocationCode).IsUnicode(false);

                entity.Property(e => e.LocationName).IsUnicode(false);

                entity.Property(e => e.MemoNo).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivables>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceivables");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivablesDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_InvReceivables_Dashboard");

                entity.Property(e => e.DDelaydays).IsUnicode(false);

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.NAmtPaidFromAdvance).IsUnicode(false);

                entity.Property(e => e.NBalanceAmount).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NetAmount).IsUnicode(false);

                entity.Property(e => e.PaidAmount).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvReceivablesInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvReceivables_Invoice");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRequestDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvRequest_Dashboard");

                entity.Property(e => e.DExpDelDate).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.NCashReceived).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NDueDays).IsUnicode(false);

                entity.Property(e => e.NNetAmt).IsUnicode(false);

                entity.Property(e => e.RequestType).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRequestOutwardDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_RequestOutward_Disp");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPkeyNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRequestQuotationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_RequestQuotation_Rpt");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRsdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvRSDetails");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRsdetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_RSDetails_Disp");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvRsnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvRSNo_Search");

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.RsDate).IsUnicode(false);

                entity.Property(e => e.RsNo).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSaleDebAdv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSale_Deb_Adv");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesAnalysis");

                entity.Property(e => e.RemarksNo).IsUnicode(false);

                entity.Property(e => e.TransNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesAnalysisBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Inv_SalesAnalysis_Branch");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesBudget");

                entity.Property(e => e.XBudgetCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XProjectType).IsUnicode(false);

                entity.Property(e => e.XStreamType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesBudgetCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesBudget_Customer");

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesBudgetProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesBudget_Project");

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesDailySummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesDailySummary");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCessName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesEntryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_SalesEntry_rpt");

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XGstin).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesExecutiveDetailRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesExecutiveDetail_Rpt");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesInvoiceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesInvoiceNo_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.DEntryTime).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XBillAmt).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesInvoiceNoSearchDup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesInvoiceNo_Search_Dup");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.DEntryTime).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XBillAmt).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesInvoiceProcessed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesInvoiceProcessed");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrder");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderDeliveryStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesOrderDeliveryStatus_rpt");

                entity.Property(e => e.NDelNo).IsUnicode(false);

                entity.Property(e => e.NStatus).IsUnicode(false);

                entity.Property(e => e.SalesInvNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.CustomerPono).IsUnicode(false);

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.Expr3).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderDetailsInSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderDetails_InSales");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderDistribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderDistribution");
            });

            modelBuilder.Entity<VwInvSalesOrderDtlsForDelNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderDtlsForDelNote");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.Expr3).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderNoGridSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderNo_GridSearch");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderNo_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.DUpToDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.NOrderProcessed).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderProcessed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesOrderProcessed");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesOrderQty");

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesOrderQuantity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesOrderQuantity");

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesPaymentTypeRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesPaymentType_rpt");
            });

            modelBuilder.Entity<VwInvSalesPrint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSales_Print");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesQty");
            });

            modelBuilder.Entity<VwInvSalesQuotationNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesQuotationNo_Search");

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.DRfqRefDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.QuotationDate).IsUnicode(false);

                entity.Property(e => e.QuotationNo).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesRetunEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesRetunEdit");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesRetunEditImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesRetunEdit_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnDeliveryNoteEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturnDeliveryNoteEdit");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnDeliveryNoteSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturnDeliveryNote_Sub");
            });

            modelBuilder.Entity<VwInvSalesReturnDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn_Disp");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnDispPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn_Disp_POS");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCessDisplayName).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDisplayName1).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn_IMEI");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnPendingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturnPending_Search");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XBillAmt).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnReceipts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSales_Return_Receipts");

                entity.Property(e => e.XReferenseNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn_rpt");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesReturnSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesReturn_Sub");
            });

            modelBuilder.Entity<VwInvSalesSettlementSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesSettlement_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesSolink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SalesSOLink");

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesStockImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesStock_IMEI");

                entity.Property(e => e.Imei).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesSummary");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesWiseReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesWiseReturn");

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesWiseReturnTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesWiseReturnTotal");

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesdetailedrpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_inv_salesdetailedrpt");

                entity.Property(e => e.TrnType).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesman>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesman");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesmanDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesman_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Commission).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.SalesmanCode).IsUnicode(false);

                entity.Property(e => e.SalesmanName).IsUnicode(false);

                entity.Property(e => e.WebSite).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesmanPymentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesmanPyment_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.ModeOfReceipt).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.SalesmanCode).IsUnicode(false);

                entity.Property(e => e.SalesmanName).IsUnicode(false);

                entity.Property(e => e.TotalAmount).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesmanSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSalesman_Summary");

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSalesunit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_Salesunit");

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSeelingPriceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SeelingPrice_Disp");

                entity.Property(e => e.PriceVal).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceBookingDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvServiceBooking_Disp");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ServiceContract");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XContractNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);

                entity.Property(e => e.XWarrantyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceDeliveryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvServiceDelivery_Disp");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBookingNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvService_Disp");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBookingNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceSheetDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ServiceSheetDetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceSheetDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ServiceSheetDetails_RPT");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvServiceSheetMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ServiceSheetMaster");

                entity.Property(e => e.DTransdate).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSisSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSIS_Sub");
            });

            modelBuilder.Entity<VwInvSisdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSISDetails");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);

                entity.Property(e => e.XTruckName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSisitemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SISItemSearch");

                entity.Property(e => e.BaseUnit).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSisnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSISNo_Search");

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.DSisdate).IsUnicode(false);

                entity.Property(e => e.RsNo).IsUnicode(false);

                entity.Property(e => e.SisNo).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSoSearchSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSoSearch_Sales");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XOrderType).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrnReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSrn_Report");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrndetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SRNDetails_Disp");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrnnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SRNNo_Search");

                entity.Property(e => e.CostCenter).IsUnicode(false);

                entity.Property(e => e.CostCenterCode).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.DepartmentCode).IsUnicode(false);

                entity.Property(e => e.SrnDate).IsUnicode(false);

                entity.Property(e => e.SrnNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrsdepartmentIssueReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSRSDepartmentIssue_Report");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XTransName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrsdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SRSDetails");

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XStatus1).IsUnicode(false);

                entity.Property(e => e.XTransName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrsdetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_SRSDetails_Disp");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvSrsonProgressItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvSRSOnProgressItems");
            });

            modelBuilder.Entity<VwInvStatusUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_StatusUpdate");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjstmentReasonDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_StockAdjstmentReason_Disp");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionAr).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XReasonCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjustmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockAdjustment_Disp");

                entity.Property(e => e.AdjustDate).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionAr).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjustmentDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockAdjustmentDisp");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjustmentMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockAdjustmentMaster_Disp");

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjustmentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockAdjustmentView");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockAdjustmentViewAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockAdjustmentView_All");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockImeiRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockIMEI_rpt");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockMasterImeiDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_StockMasterIMEI_Disp");

                entity.Property(e => e.Imei).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStock_Status");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockStatus4Sae>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStock_Status4SAE");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockStatusImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStock_Status_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStock_Status_rpt");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockStatusService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStock_Status_Service");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvStockTransferInQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockTransferInQty");
            });

            modelBuilder.Entity<VwInvStockTransferOutQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvStockTransferOutQty");
            });

            modelBuilder.Entity<VwInvStoreIssueReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_StoreIssue_Report");

                entity.Property(e => e.DeliveryNoteno).IsUnicode(false);

                entity.Property(e => e.StoreUnit).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XCustPono).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTaxCategoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvTaxCategory_rpt");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTerminal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvTerminal");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XTerminalCode).IsUnicode(false);

                entity.Property(e => e.XTerminalName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTranferDetailedRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_invTranferDetailed_rpt");

                entity.Property(e => e.LocationFrom).IsUnicode(false);

                entity.Property(e => e.LocationTo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTransType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_TransType");

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTransferSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvTransfer_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ReferenceNo).IsUnicode(false);

                entity.Property(e => e.SiteFrom).IsUnicode(false);

                entity.Property(e => e.SiteTo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTransferStockDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvTransferStockDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XWarehouseCodeFrom).IsUnicode(false);

                entity.Property(e => e.XWarehouseCodeTo).IsUnicode(false);

                entity.Property(e => e.XWarehouseNameFrom).IsUnicode(false);

                entity.Property(e => e.XWarehouseNameTo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTruckMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInv_TruckMaster");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDriversCode).IsUnicode(false);

                entity.Property(e => e.XDriversName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvTruckTransactionRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_TruckTransaction_Rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvUnitStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvUnit_Status");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendor");

                entity.Property(e => e.TaxCategoryName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XCrnumber).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XPartnerType).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVendorNameAr).IsUnicode(false);

                entity.Property(e => e.XVendorType).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorCurrencyDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorCurrency_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCountryCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReminderMsg).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTaxRegistrationNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendor_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.WebSite).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorType).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorDispRfq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendor_Disp_RFQ");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.WebSite).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorPaymentDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorPaymentDetails_rpt");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAccount).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryAddress).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBank).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryBranch).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryPhone).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCurrencyCode).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorPaymentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorPayment_rpt");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorInvoice).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorProjectSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorProject_Search");

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorProjects>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorProjects");

                entity.Property(e => e.NContractAmt).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorProjects1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorProjects");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorProjectsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorProjects_Disp");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ProjectCode).IsUnicode(false);

                entity.Property(e => e.ProjectName).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorRequestDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorRequestDetails");

                entity.Property(e => e.ClassItemCode).IsUnicode(false);

                entity.Property(e => e.ClassItemName).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorRequestDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorRequest_Disp");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorRequestNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorRequestNo_Search");

                entity.Property(e => e.QuotationDate).IsUnicode(false);

                entity.Property(e => e.QuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorRfqDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorRFQ_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.WebSite).IsUnicode(false);

                entity.Property(e => e.XCurrencyName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XShortName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorServiceSheetDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorServiceSheetDetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorServiceSheetDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorServiceSheetDetails_RPT");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorServiceSheetMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_VendorServiceSheetMaster");

                entity.Property(e => e.DTransdate).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVendorStatement");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVendorTransactionByitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_vendorTransactionByitem");

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.NCompanyId).IsUnicode(false);

                entity.Property(e => e.NPprice).IsUnicode(false);

                entity.Property(e => e.NQty).IsUnicode(false);

                entity.Property(e => e.TotalAmount).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvVoucherDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvVoucher_Disp");

                entity.Property(e => e.Posted).IsUnicode(false);

                entity.Property(e => e.VoucherNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvWarehouseDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvWarehouse_Disp");

                entity.Property(e => e.SiteCode).IsUnicode(false);

                entity.Property(e => e.SiteName).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvWarrantyDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvWarrantyDetails");

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);

                entity.Property(e => e.XWarrantyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvWarrantyDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inv_WarrantyDisp");

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);

                entity.Property(e => e.XWarrantyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvZeroStockItemList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inv_ZeroStockItemList");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.RackLocation).IsUnicode(false);

                entity.Property(e => e.UM).IsUnicode(false);
            });

            modelBuilder.Entity<VwInventoryDispRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Inventory_Disp_rpt");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvoiceAnalysisSummaryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InvoiceAnalysisSummary_RPT");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwInvsalespurchaseRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_invsalespurchase_rpt");

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemDisplay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemDisplay");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemDisplaySalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemDisplay_SalesOrder");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductClass).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemExclude>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemExclude");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XBase).IsUnicode(false);

                entity.Property(e => e.XColor).IsUnicode(false);

                entity.Property(e => e.XFullLengthDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XMaxWattage).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemLocationSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_item_location_search");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemClass).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductClass).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseUnit).IsUnicode(false);

                entity.Property(e => e.XSalesUnit).IsUnicode(false);

                entity.Property(e => e.XStockUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemLocationSearchRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_item_location_search_rpt");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemMinPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_ItemMInPrice");
            });

            modelBuilder.Entity<VwItemPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemPOS");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemNameA).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemSoPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Item_SO_PO");
            });

            modelBuilder.Entity<VwItemStockMasterMaintenance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemStockMasterMaintenance");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.Manufacturer).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemStockReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemStockReminder");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.Manufacturer).IsUnicode(false);

                entity.Property(e => e.Uom).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemuUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemuUnit");

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemwiseExpiryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ItemwiseExpiry_rpt");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwItemwisestock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_itemwisestock");
            });

            modelBuilder.Entity<VwJobsalaryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JobsalaryDetails");

                entity.Property(e => e.XCandidateCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwPurchaseFreights>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwPurchaseFreights");

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlCreditNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlCreditNo_Search");

                entity.Property(e => e.DRetDate).IsUnicode(false);

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlDebitNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlDebitNo_Search");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseBarcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_Purchase_Barcode");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_PurchaseDetails");

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XImgName).IsUnicode(false);

                entity.Property(e => e.XImgPath).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlPurchaseDetails_Disp");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseForReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlPurchaseForReport");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseInvoiceNoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_PurchaseInvoiceNo_Search");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseInvoiceNoSearchForReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_PurchaseInvoiceNo_SearchForReturn");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseReturnEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlPurchaseReturnEdit");

                entity.Property(e => e.XCreditNoteNo).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlPurchaseReturnSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlPurchaseReturn_Sub");
            });

            modelBuilder.Entity<VwJwlSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_jwl_Sales");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlSalesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_jwl_SalesDetails");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XImgPath).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlSalesRetunEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlSalesRetunEdit");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlSalesReturnDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlSalesReturn_Disp");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlSalesReturnSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_SalesReturnSearch");

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XIbanno).IsUnicode(false);

                entity.Property(e => e.XIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlSalesReturnSearch1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlSalesReturn_Search");

                entity.Property(e => e.DReturnDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlScrapReceived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_jwl_ScrapReceived");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPurchaseDescription).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlStockMasterBarcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_jwlStockMasterBarcode");

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlStockTransferDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JwlStockTransferDetails");

                entity.Property(e => e.XBarcode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XModel).IsUnicode(false);
            });

            modelBuilder.Entity<VwJwlStockTransferSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Jwl_StockTransfer_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ReferenceNo).IsUnicode(false);

                entity.Property(e => e.SiteFrom).IsUnicode(false);

                entity.Property(e => e.SiteTo).IsUnicode(false);
            });

            modelBuilder.Entity<VwLabourDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Labour_Disp");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwLanMultilingual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LanMultilingual");

                entity.Property(e => e.Arabic).IsUnicode(false);

                entity.Property(e => e.English).IsUnicode(false);

                entity.Property(e => e.XControlNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwLastMeeting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LastMeeting");

                entity.Property(e => e.LastMeeting).IsUnicode(false);

                entity.Property(e => e.XActionTaken).IsUnicode(false);

                entity.Property(e => e.XActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.XActivity).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwLatestLoginDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LatestLoginDetails");

                entity.Property(e => e.DLoginTime).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwLoanDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LoanDetails");
            });

            modelBuilder.Entity<VwLoanPaycodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LoanPaycodes");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwLocationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LocationMaster");

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwLogApprovalHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LogApprovalHistory");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacDateFrom).IsUnicode(false);

                entity.Property(e => e.XVacDateTo).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwLogSysActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LogSysActivity");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NActionId).ValueGeneratedOnAdd();

                entity.Property(e => e.XActionType).IsUnicode(false);

                entity.Property(e => e.XActionUser).IsUnicode(false);

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XIp).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwLogTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LogTransaction");

                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.EntryFrom).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.SystemName).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);

                entity.Property(e => e.VoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwLogTransactionRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_LogTransaction_Rpt");

                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.SystemName).IsUnicode(false);

                entity.Property(e => e.VoucherNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwLoginInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_LoginInfo");

                entity.Property(e => e.DLoginDate).IsUnicode(false);

                entity.Property(e => e.DLoginTime).IsUnicode(false);

                entity.Property(e => e.DLogoutDate).IsUnicode(false);

                entity.Property(e => e.DLogoutTime).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwManEmployeeMaintenance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Man_EmployeeMaintenance");

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaintenanceCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVisaStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwManifest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Manifest");

                entity.Property(e => e.XDriver).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);
            });

            modelBuilder.Entity<VwManifestStatementRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Manifest_Statement_RPT");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XManifestNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMastGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MastGroup");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwMastGroupParent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MastGroupParent");

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XLevel).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwMaterialDispatchDetailDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MaterialDispatchDetailDisp");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRsNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMaterialDispatchDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MaterialDispatchDisp");

                entity.Property(e => e.DDispatchDate).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XResponsible).IsUnicode(false);
            });

            modelBuilder.Entity<VwMaterialDispatchRetRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MaterialDispatchRet_rpt");

                entity.Property(e => e.XDispatchReturnNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMaterialDispatchegRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MaterialDispatcheg_rpt");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDispatchNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XResponsible).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsDeletionEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsDeletionEmployee");

                entity.Property(e => e.Dependent).IsUnicode(false);

                entity.Property(e => e.Relation).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsDetailForEmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsDetailForEmp");
            });

            modelBuilder.Entity<VwMedicalInsurance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsurance");

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPolicyDetails).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceAddition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceAddition");

                entity.Property(e => e.DEndDate).IsUnicode(false);

                entity.Property(e => e.InsuranceClassDep).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassEmp).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceAdditionEmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceAdditionEmp");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassEmp).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceAdditionRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceAddition_rpt");

                entity.Property(e => e.InsuranceClassDep).IsUnicode(false);

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassEmp).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPolicyCode).IsUnicode(false);

                entity.Property(e => e.XPolicyNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceAdditionVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceAddition_Vendor");

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceDeletionDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceDeletionDetails");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwMedicalInsuranceDeletionRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MedicalInsuranceDeletion_rpt");

                entity.Property(e => e.InsuranceClassDep).IsUnicode(false);

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XDeletionCode).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassEmp).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwMeetingTrackerCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MeetingTrackerCategory");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XPositionId).IsUnicode(false);

                entity.Property(e => e.XPositions).IsUnicode(false);
            });

            modelBuilder.Entity<VwMeetingTrackerDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MeetingTrackerDashboard");

                entity.Property(e => e.ActionOwner).IsUnicode(false);

                entity.Property(e => e.ActionTaken).IsUnicode(false);

                entity.Property(e => e.ActionToBeTaken).IsUnicode(false);

                entity.Property(e => e.Activity).IsUnicode(false);

                entity.Property(e => e.MeetingCategory).IsUnicode(false);

                entity.Property(e => e.MeetingStatus).IsUnicode(false);

                entity.Property(e => e.ReferenceNo).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwMeetingTrackerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MeetingTracker_List");

                entity.Property(e => e.ActivityCount).IsUnicode(false);

                entity.Property(e => e.MeetingDate).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMenuDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Menu_Disp");

                entity.Property(e => e.MenuId).IsUnicode(false);

                entity.Property(e => e.MenuName).IsUnicode(false);

                entity.Property(e => e.RptFile).IsUnicode(false);
            });

            modelBuilder.Entity<VwMenuFinder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Menu_Finder");

                entity.Property(e => e.MainId).IsUnicode(false);

                entity.Property(e => e.MainMenuName).IsUnicode(false);

                entity.Property(e => e.ProgrammerFormId).IsUnicode(false);

                entity.Property(e => e.SubId).IsUnicode(false);

                entity.Property(e => e.SubMenuName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_mnp_Dashboard");

                entity.Property(e => e.NDailyRate).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpDeMobilization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_DeMobilization");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XDeMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpDemobilizationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_mnp_demobilizationMaster");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDeMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpDemobilizationdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_mnp_demobilizationdetails");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDeMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_Invoice");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpInvoiceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_InvoiceDetails");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMaintenanceCode).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpInvoiceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_InvoiceDisp");

                entity.Property(e => e.DInvoiceDate).IsUnicode(false);

                entity.Property(e => e.NNetAmount).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpInvoiceMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Mnp_InvoiceMaster");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpInvoiceMasterDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Mnp_InvoiceMasterDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpMobilizationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_MobilizationDetails");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XMaintenanceCode).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpPriceSettingsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Mnp_PriceSettingsDetails");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSettingsNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpPriceSettingsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mnp_PriceSettingsDisp");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.NNetAmount).IsUnicode(false);

                entity.Property(e => e.NTaxAmount).IsUnicode(false);

                entity.Property(e => e.NTotalAmount).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSettingsNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpPriceSettingsMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Mnp_PriceSettingsMaster");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSettingsNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpPriceSettingsPaycodeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Mnp_PriceSettingsPaycodeDetails");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSettingsNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMnpProjectWiseEmployeeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MnpProjectWiseEmployeeDisp");

                entity.Property(e => e.TotalPayRate).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMobilizationCode).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Month");
            });

            modelBuilder.Entity<VwMonthlyProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MonthlyProcess");

                entity.Property(e => e.DProcessDate).IsUnicode(false);

                entity.Property(e => e.XProcessCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwMrndtlsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Mrndtls_rpt");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMultipleBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MultipleBranch");

                entity.Property(e => e.XBranchName).IsUnicode(false);
            });

            modelBuilder.Entity<VwMyApprovalDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MyApprovalDetails");

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwNonPostedPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_NonPostedPayroll");

                entity.Property(e => e.ReferenceNo).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.VoucherNo).IsUnicode(false);

                entity.Property(e => e.XEntryFrom).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwOnboarddetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Onboarddetails");

                entity.Property(e => e.Cv).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCvName).IsUnicode(false);

                entity.Property(e => e.XEduBackground).IsUnicode(false);

                entity.Property(e => e.XEduMajor).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XIdno).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XResidanceNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacancy).IsUnicode(false);
            });

            modelBuilder.Entity<VwOpportunities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Opportunities");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XScopeOfWork).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwOptPrescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Opt_prescription");

                entity.Property(e => e.FrameCode).IsUnicode(false);

                entity.Property(e => e.FrameName).IsUnicode(false);

                entity.Property(e => e.LensCoatingCode).IsUnicode(false);

                entity.Property(e => e.LensCoatingName).IsUnicode(false);

                entity.Property(e => e.LensCode).IsUnicode(false);

                entity.Property(e => e.LensDesignCode).IsUnicode(false);

                entity.Property(e => e.LensDesignName).IsUnicode(false);

                entity.Property(e => e.LensFeatureCode).IsUnicode(false);

                entity.Property(e => e.LensFeatureName).IsUnicode(false);

                entity.Property(e => e.LensIndexCode).IsUnicode(false);

                entity.Property(e => e.LensIndexName).IsUnicode(false);

                entity.Property(e => e.LensMeterialCode).IsUnicode(false);

                entity.Property(e => e.LensMeterialName).IsUnicode(false);

                entity.Property(e => e.LensName).IsUnicode(false);

                entity.Property(e => e.SupplierCode).IsUnicode(false);

                entity.Property(e => e.SupplierName).IsUnicode(false);

                entity.Property(e => e.XColNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEye).IsUnicode(false);

                entity.Property(e => e.XFrameModel).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwOrganizationChart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OrganizationChart");

                entity.Property(e => e.ParentCode).IsUnicode(false);

                entity.Property(e => e.ParentName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XPositionLocale).IsUnicode(false);
            });

            modelBuilder.Entity<VwOtherInformationMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OtherInformationMaster_Disp");

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwOtherPaidAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OtherPaidAmount");
            });

            modelBuilder.Entity<VwPageList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PageList");

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwParentMenuDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ParentMenu_Disp");

                entity.Property(e => e.MenuId).IsUnicode(false);

                entity.Property(e => e.MenuName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPastApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PastApproval");

                entity.Property(e => e.ApprovedUser).IsUnicode(false);

                entity.Property(e => e.DActionDate).IsUnicode(false);

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XActionUser).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XPartyName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XSystemName).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAccBankDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayAccBank_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAccountSetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayAccountSetup");

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAccruedCodeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayAccruedCode_List");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAddDedTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayAddDed_TimeSheet");

                entity.Property(e => e.PayrunText).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAmountDetailsForPay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayAmountDetailsForPay");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAnualVacations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_AnualVacations");

                entity.Property(e => e.ReturnDate).IsUnicode(false);

                entity.Property(e => e.ReturnId).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacationReturnCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayApprEmployeeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayApprEmployee_Disp");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayApprovalCodeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayApprovalCodeDisp");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayApprovalCodeDtls>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayApprovalCode_dtls");

                entity.Property(e => e.XActionDesc).IsUnicode(false);

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayAttendanceSheetRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_AttendanceSheet_Rpt");

                entity.Property(e => e.PaidLeave).IsUnicode(false);

                entity.Property(e => e.UnPaidLeave).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayBankDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayBank_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCodeItemwiseMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCodeItemwiseMapping");

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCodeItemwiseMappingDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCodeItemwiseMappingDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCodeItemwiseMappingDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCodeItemwiseMappingDetails_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCodeSettingsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCodeSettingsDisp");

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCodelistMonthWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCodelist_MonthWise");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCompanyPayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCompanyPayments");

                entity.Property(e => e.NPayType).IsUnicode(false);

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCourse");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCenter).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCourseCode).IsUnicode(false);

                entity.Property(e => e.XCourseName).IsUnicode(false);

                entity.Property(e => e.XTraineeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayCsvDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayCSV_Details");
            });

            modelBuilder.Entity<VwPayDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartment");

                entity.Property(e => e.XCostCentreCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDepartmentLocale).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEvaluationCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentAccounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartmentAccounts");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupName).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountName).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupName).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeLoanDefaultAccountCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeLoanDefaultAccountName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentAccountsOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartmentAccounts_Old");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupName).IsUnicode(false);

                entity.Property(e => e.XEmpLoanDefGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountName).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefAccountNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupName).IsUnicode(false);

                entity.Property(e => e.XEmployeeDefGroupNameAr).IsUnicode(false);

                entity.Property(e => e.XEmployeeLoanDefaultAccountCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartment_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentForEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartment_for_Employee");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_DepartmentSettings");

                entity.Property(e => e.XCrLedgerCode).IsUnicode(false);

                entity.Property(e => e.XCrLedgerName).IsUnicode(false);

                entity.Property(e => e.XCrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDepartmentwiseEvaluation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayDepartmentwise_Evaluation");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XQuestion).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayDisplinaryAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_DisplinaryAction");

                entity.Property(e => e.XActionCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpStatement).IsUnicode(false);

                entity.Property(e => e.XInvestigation).IsUnicode(false);

                entity.Property(e => e.XPlaceOfViolation).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XWarningDecision).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpEvaluators>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmpEvaluators");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEvaluationCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpEvaluatorsPrevileges>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmpEvaluatorsPrevileges");
            });

            modelBuilder.Entity<VwPayEmpEvauationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmpEvauation_List");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEvalCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpEvauationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmpEvauation_RPT");

                entity.Property(e => e.Rating).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEvalCode).IsUnicode(false);

                entity.Property(e => e.XQuestion).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_EmpHistory_rpt");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpSlipRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmpSlip_RPT");

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpVacationAlowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_EmpVacation_Alowance");

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpVacationTypes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_EmpVacationTypes");

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmpandCompanyContribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmpandCompanyContribution");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployee");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.LoanLedgerCode).IsUnicode(false);

                entity.Property(e => e.LoanLedgerName).IsUnicode(false);

                entity.Property(e => e.LoanLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XApprovalSettingsCode).IsUnicode(false);

                entity.Property(e => e.XApprovalSettingsDesc).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XCatagoryCode).IsUnicode(false);

                entity.Property(e => e.XCatagoryName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDefEmpCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDrivingLicense).IsUnicode(false);

                entity.Property(e => e.XEducationQual).IsUnicode(false);

                entity.Property(e => e.XEligibility).IsUnicode(false);

                entity.Property(e => e.XEmail2).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmergencyNum).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpInsFile).IsUnicode(false);

                entity.Property(e => e.XEmpInsRefFile).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmpPatakaName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XEmrgncyContact).IsUnicode(false);

                entity.Property(e => e.XGosipaycode).IsUnicode(false);

                entity.Property(e => e.XGradename).IsUnicode(false);

                entity.Property(e => e.XHeir).IsUnicode(false);

                entity.Property(e => e.XInsuranceClassEmp).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XIqamaFileName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XIqamaProfession).IsUnicode(false);

                entity.Property(e => e.XIqamaRefName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNationalityLocale).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportFileName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPassportRefName).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPlaceOfBirth).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomName).IsUnicode(false);

                entity.Property(e => e.XScenumber).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XSpousePassportFileName).IsUnicode(false);

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);

                entity.Property(e => e.XSupervisorCode).IsUnicode(false);

                entity.Property(e => e.XTicketRoute).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);

                entity.Property(e => e.XTravelClass).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XVillaName).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeAccrul>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeeAccrul");

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeAlerts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeAlerts");

                entity.Property(e => e.XAlertType).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeBirthday>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeBirthday");

                entity.Property(e => e.DMonth).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeClearanceSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeeClearanceSettings");

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XPurposeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeClearanceSettingsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeeClearanceSettingsDetails");

                entity.Property(e => e.XClearanceItem).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployee_Dashboard");

                entity.Property(e => e.DHireDate).IsUnicode(false);

                entity.Property(e => e.NTicketCount).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmployeeCode).IsUnicode(false);

                entity.Property(e => e.XEmployeeName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeDetailsForPosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeDetailsForPosting");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayElementName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeDetailsForPostingExcludeLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeDetailsForPostingExcludeLoan");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeDetailsForPostingExpense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeDetailsForPostingExpense");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployee_Disp");

                entity.Property(e => e.DHireDate).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XDefEmpCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpClearanceCode).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeEmailInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeeEmailInformation");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmployeeEmailId).IsUnicode(false);

                entity.Property(e => e.XManagerEmailId).IsUnicode(false);

                entity.Property(e => e.XManagerEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeGosIReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployee_GosI_Report");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.LoanLedgerCode).IsUnicode(false);

                entity.Property(e => e.LoanLedgerName).IsUnicode(false);

                entity.Property(e => e.LoanLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XApprovalSettingsCode).IsUnicode(false);

                entity.Property(e => e.XApprovalSettingsDesc).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCatagoryCode).IsUnicode(false);

                entity.Property(e => e.XCatagoryName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XClearanceCode).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDefEmpCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDrivingLicense).IsUnicode(false);

                entity.Property(e => e.XEducationQual).IsUnicode(false);

                entity.Property(e => e.XEligibility).IsUnicode(false);

                entity.Property(e => e.XEmail2).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmergencyNum).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpInsFile).IsUnicode(false);

                entity.Property(e => e.XEmpInsRefFile).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmpPatakaName).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XEmrgncyContact).IsUnicode(false);

                entity.Property(e => e.XGosipaycode).IsUnicode(false);

                entity.Property(e => e.XGradename).IsUnicode(false);

                entity.Property(e => e.XHeir).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XIqamaFileName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XIqamaProfession).IsUnicode(false);

                entity.Property(e => e.XIqamaRefName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNationalityLocale).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportFileName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPassportRefName).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomName).IsUnicode(false);

                entity.Property(e => e.XScenumber).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XSpousePassportFileName).IsUnicode(false);

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);

                entity.Property(e => e.XSupervisorCode).IsUnicode(false);

                entity.Property(e => e.XTicketRoute).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);

                entity.Property(e => e.XTravelClass).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XVillaName).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeLedger>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeeLedger");
            });

            modelBuilder.Entity<VwPayEmployeeMaintenanceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeMaintenance_Disp");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDefEmpCode).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaidDetaildForEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaidDetaildForEdit");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaidDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaidDetails");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaidTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaidTotal");
            });

            modelBuilder.Entity<VwPayEmployeePayHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePayHistory");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePayHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePayHistory_RPT");

                entity.Property(e => e.EffectiveDate).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaycodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaycodes");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaycodesAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaycodesAll");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaycodesGroupWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePaycodesGroupWise");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaymentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePayment_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeePayments");

                entity.Property(e => e.NPayType).IsUnicode(false);

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaymentsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeePayments_RPT");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);

                entity.Property(e => e.XPaycodeDescription).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeePaymentsRptnew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EmployeePayments_RPTNEW");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployee_RPT");

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAlternateName).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpImageName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpNameLocale).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsor).IsUnicode(false);

                entity.Property(e => e.XEmployeeSponsorNo).IsUnicode(false);

                entity.Property(e => e.XInsuranceNo).IsUnicode(false);

                entity.Property(e => e.XIqamaFileName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XIqamaProfession).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNationalityLocale).IsUnicode(false);

                entity.Property(e => e.XNickName).IsUnicode(false);

                entity.Property(e => e.XPassportFileName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPhone2).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XScontactNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSname).IsUnicode(false);

                entity.Property(e => e.XSocSecNo).IsUnicode(false);

                entity.Property(e => e.XSpassportNo).IsUnicode(false);

                entity.Property(e => e.XSpousePassportFileName).IsUnicode(false);

                entity.Property(e => e.XState).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);

                entity.Property(e => e.XSupervisorCode).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryDueDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryDue_Disp");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryDueDispForBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryDue_DispForBatch");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryHistoryForrpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryHistoryForrpt");

                entity.Property(e => e.XTransNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryPayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryPayments");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XBatchRemarks).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryPaymentsByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryPaymentsByBatch");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XBatchRemarks).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEmployeeSalaryPaymentsByEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEmployeeSalaryPaymentsByEmployee");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEndOfService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEndOfService");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XServiceEndCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEndofserviceRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_Endofservice_RPT");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEndType).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEosAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EosAdjustment");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEosAdjustmentSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EosAdjustment_Search");

                entity.Property(e => e.AdjustmentAmount).IsUnicode(false);

                entity.Property(e => e.AdjustmentDate).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEosadjustmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_EOSAdjustment_Disp");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayEvaluationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayEvaluation_Details");

                entity.Property(e => e.XEvalCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XQuestion).IsUnicode(false);

                entity.Property(e => e.XReference).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayGosiDetailRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_GosiDetail_Rpt");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayGosiPaymentMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_GosiPaymentMaster");

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayHealthSafety>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_healthSafety");

                entity.Property(e => e.XCoverage).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XInsPolicy).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSituation).IsUnicode(false);

                entity.Property(e => e.XWitness).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayHistoryMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayHistoryMaster");

                entity.Property(e => e.CurBranch).IsUnicode(false);

                entity.Property(e => e.CurBranchCode).IsUnicode(false);

                entity.Property(e => e.CurDept).IsUnicode(false);

                entity.Property(e => e.CurDeptCode).IsUnicode(false);

                entity.Property(e => e.NewBranch).IsUnicode(false);

                entity.Property(e => e.NewBranchCode).IsUnicode(false);

                entity.Property(e => e.NewDept).IsUnicode(false);

                entity.Property(e => e.NewDeptCode).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XHistoryCode).IsUnicode(false);

                entity.Property(e => e.XNewPosition).IsUnicode(false);

                entity.Property(e => e.XNewPositionCode).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayHistoryMasterRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayHistoryMaster_RPT");

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XHistoryCode).IsUnicode(false);

                entity.Property(e => e.XNewPosition).IsUnicode(false);

                entity.Property(e => e.XNewPositionCode).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayInsuranceCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_InsuranceCategory");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLastPayrunId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_LastPayrunId");
            });

            modelBuilder.Entity<VwPayLeaveRegistryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_LeaveRegistry_rpt");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanApprovals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayLoanApprovals");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XForwardBy).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanClose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayLoanClose");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.PaidAmount).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanDeductionBalancewise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_LoanDeductionBalancewise");

                entity.Property(e => e.LoanSatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_LoanIssue");

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGuarantor1).IsUnicode(false);

                entity.Property(e => e.XGuarantor2).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanIssueDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayLoanIssue_Disp");

                entity.Property(e => e.EmployeeNo).IsUnicode(false);

                entity.Property(e => e.IssueDate).IsUnicode(false);

                entity.Property(e => e.LoanAmount).IsUnicode(false);

                entity.Property(e => e.LoanId).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanIssueStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayLoanIssue_Status");

                entity.Property(e => e.EmployeeNo).IsUnicode(false);

                entity.Property(e => e.IssueDate).IsUnicode(false);

                entity.Property(e => e.LoanAmount).IsUnicode(false);

                entity.Property(e => e.LoanId).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanRepaymentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_LoanRepaymentRPT");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayLoanStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_payLoanStatus");

                entity.Property(e => e.XLoanStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayManagerEmailInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_ManagerEmailInformation");

                entity.Property(e => e.XManagerCode).IsUnicode(false);

                entity.Property(e => e.XManagerEmailId).IsUnicode(false);

                entity.Property(e => e.XManagerEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayMaster");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XParentPayCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayMaster_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.PayGroup).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayMedicalInsuranceDeletion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_MedicalInsuranceDeletion");

                entity.Property(e => e.XDeletionCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceCode).IsUnicode(false);

                entity.Property(e => e.XInsuranceName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayMonthlyAddOorDed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayMonthlyAddOorDed");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayNationalityDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayNationality_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayOffDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_OffDays");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_OpeningBalance");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayOpeningBalanceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_OpeningBalance_Search");

                entity.Property(e => e.AdjustmentAmount).IsUnicode(false);

                entity.Property(e => e.AdjustmentDate).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayOverTimeRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayOverTime_RPT");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayOvertimeRequestMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_OvertimeRequestMaster_Disp");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayParunDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayParunDetails");

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPayMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_PayMaster");

                entity.Property(e => e.XAmrExpCode).IsUnicode(false);

                entity.Property(e => e.XAmrExpName).IsUnicode(false);

                entity.Property(e => e.XAmrIncCode).IsUnicode(false);

                entity.Property(e => e.XAmrIncName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDescriptionLocale).IsUnicode(false);

                entity.Property(e => e.XExpenseCode).IsUnicode(false);

                entity.Property(e => e.XExpenseName).IsUnicode(false);

                entity.Property(e => e.XIncomeCode).IsUnicode(false);

                entity.Property(e => e.XIncomeName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);

                entity.Property(e => e.XSystemTypeName).IsUnicode(false);

                entity.Property(e => e.XTaxDisplayName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPaymasterAccounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_PaymasterAccounts");

                entity.Property(e => e.XCrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDrMappingLevel).IsUnicode(false);

                entity.Property(e => e.XExpenseLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerExpenseName).IsUnicode(false);

                entity.Property(e => e.XLedgerPayableName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayableLedgerCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPaymentMster4rpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_PaymentMster4rpt");

                entity.Property(e => e.NPayRunId).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPendingAmtsForTermination>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_PendingAmtsForTermination");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPendingLoansList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayPendingLoans_List");

                entity.Property(e => e.XEmpCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPositionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayPosition_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayPositionDispAdvanced>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayPosition_DispAdvanced");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayProcessedDetailsCsv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_ProcessedDetails_CSV");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.NPayTypeId).IsUnicode(false);

                entity.Property(e => e.NPaymentId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBankAccountNo).IsUnicode(false);

                entity.Property(e => e.XBankCode).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEmpPatakaName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPaymentDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReturnCode).IsUnicode(false);

                entity.Property(e => e.XTransDate).IsUnicode(false);

                entity.Property(e => e.XTransactionnumber).IsUnicode(false);

                entity.Property(e => e.XTransactionstatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayProcessingDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayProcessingDetails");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayReceiptMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayReceiptMaster");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPaymentMethod).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayRelationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayRelation_Disp");

                entity.Property(e => e.Relation).IsUnicode(false);

                entity.Property(e => e.RelationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayRoomMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_RoomMaster");

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomCode).IsUnicode(false);

                entity.Property(e => e.XRoomName).IsUnicode(false);

                entity.Property(e => e.XVillaName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySal4perCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_Sal4perCal");
            });

            modelBuilder.Entity<VwPaySal4perPaycodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_Sal4perPaycodes");
            });

            modelBuilder.Entity<VwPaySalaryGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_SalaryGrade");

                entity.Property(e => e.XGradeCode).IsUnicode(false);

                entity.Property(e => e.XGradename).IsUnicode(false);

                entity.Property(e => e.XInsClass).IsUnicode(false);

                entity.Property(e => e.XLevelName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySalaryPaymentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_SalaryPayment_Disp");

                entity.Property(e => e.NEntryFrom).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySalaryUpdateRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySalaryUpdate_rpt");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySetup");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XParentPayCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySetupAdditional>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySetupAdditional");
            });

            modelBuilder.Entity<VwPaySetupForRevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySetupForRevision");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XParentPayCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySetupRevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySetupRevision");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XParentPayCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaySummaryForHoursCalc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySummaryForHoursCalc");
            });

            modelBuilder.Entity<VwPaySummaryForHoursCalcDeduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaySummaryForHoursCalc_Deduct");
            });

            modelBuilder.Entity<VwPayTickets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwPay_Tickets");

                entity.Property(e => e.XClassName).IsUnicode(false);

                entity.Property(e => e.XTicketCode).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTimeSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_TimeSheet");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XYearlyOffDay).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTimeSheetEditToExcel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayTimeSheetEditToExcel");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTimeSheetRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_TimeSheet_Rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XYearlyOffDay).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTimesheetMaster4rpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_TimesheetMaster4rpt");

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTransactionBatchDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayTransactionBatch_Disp");

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NPayRunId).IsUnicode(false);

                entity.Property(e => e.PayrunId).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTransactionDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayTransactionDetails");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTransactionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayTransaction_Disp");

                entity.Property(e => e.Batch).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NPayRunId).IsUnicode(false);

                entity.Property(e => e.PayrunId).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayTransactionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayTransactionList");

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XMethod).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayGroup).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationCodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationCodes");

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationDetails");

                entity.Property(e => e.XAgentName).IsUnicode(false);

                entity.Property(e => e.XAssignEmpCode).IsUnicode(false);

                entity.Property(e => e.XAssignEmpName).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationDetails_Disp");

                entity.Property(e => e.DVacDateFrom).IsUnicode(false);

                entity.Property(e => e.DVacDateTo).IsUnicode(false);

                entity.Property(e => e.EmpCode).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.NVacDays).IsUnicode(false);

                entity.Property(e => e.VacTypeId).IsUnicode(false);

                entity.Property(e => e.Vacation).IsUnicode(false);

                entity.Property(e => e.VacationCode).IsUnicode(false);

                entity.Property(e => e.VacationRequestDate).IsUnicode(false);

                entity.Property(e => e.VacationType).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationEmployee");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.FromDate).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.ToDate).IsUnicode(false);

                entity.Property(e => e.VacationId).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_Vacation_List");

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationMaster");

                entity.Property(e => e.XAgentName).IsUnicode(false);

                entity.Property(e => e.XAssignEmpCode).IsUnicode(false);

                entity.Property(e => e.XAssignEmpName).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationGroupCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationMaster_Disp");

                entity.Property(e => e.EmpCode).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.NVacDays).IsUnicode(false);

                entity.Property(e => e.VacationRequestDate).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacationGroupCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationRemaining>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Pay_VacationRemaining");
            });

            modelBuilder.Entity<VwPayVacationRequstsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationRequsts_Disp");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.HrComments).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.VacationType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationReturn");

                entity.Property(e => e.ReturnDate).IsUnicode(false);

                entity.Property(e => e.ReturnId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);

                entity.Property(e => e.XVacationReturnCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayVacationTypeDisplay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PayVacationType_Display");

                entity.Property(e => e.XPayType).IsUnicode(false);

                entity.Property(e => e.XPeriod)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayWorkingHours>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_pay_WorkingHours");

                entity.Property(e => e.XDay).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaycodeGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaycodeGroup");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaycodeItemDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaycodeItemDetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentBatchDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentBatch_Disp");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentRequest");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentRequestCofigList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentRequestCofig_List");

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentStatusDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentStatusDetail");

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemark).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentStatusDetailByAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentStatusDetailByAll");

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.XBeneficiaryName).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRemark).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentStatusDetailByCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentStatusDetailByCategory");

                entity.Property(e => e.XCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentStatusDetailByProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentStatusDetailByProject");

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentTypeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PaymentType_Disp");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FaxNo).IsUnicode(false);

                entity.Property(e => e.PhoneNo1).IsUnicode(false);

                entity.Property(e => e.PhoneNo2).IsUnicode(false);

                entity.Property(e => e.Website).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.ZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaymentmethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Paymentmethod");

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPayreceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Payreceipt");

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPendingPoqty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PendingPOQty");
            });

            modelBuilder.Entity<VwPendingSalesOrderForDelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PendingSalesOrderForDelivery");
            });

            modelBuilder.Entity<VwPendingSalesOrderForPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PendingSalesOrderForPRS");
            });

            modelBuilder.Entity<VwPoMrnStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PoMrn_Status");
            });

            modelBuilder.Entity<VwPoitemMasterDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_POItemMaster_Details");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPomrnPending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_POMrn_Pending");

                entity.Property(e => e.XPorderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPomrnPendingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_POMrn_PendingDetail");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNumber).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XQutationNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPorderItemDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_POrderItem_Dashboard");

                entity.Property(e => e.DExpDelDate).IsUnicode(false);

                entity.Property(e => e.DPodeliveryDate).IsUnicode(false);

                entity.Property(e => e.DPorderDate).IsUnicode(false);

                entity.Property(e => e.DSodeliveryDate).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrePayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrePayment");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentNo).IsUnicode(false);

                entity.Property(e => e.XStartmonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrePaymentCategoryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrePaymentCategoryDetails");

                entity.Property(e => e.NFrequency).IsUnicode(false);

                entity.Property(e => e.XAssetLedgerCode).IsUnicode(false);

                entity.Property(e => e.XAssetLedgerName).IsUnicode(false);

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XExpenseLedgerCode).IsUnicode(false);

                entity.Property(e => e.XExpenseLedgerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrePaymentSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrePaymentSchedule");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XDateFrom).IsUnicode(false);

                entity.Property(e => e.XDateTo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XMonth).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPaymentNo).IsUnicode(false);

                entity.Property(e => e.XStartmonth).IsUnicode(false);
            });

            modelBuilder.Entity<VwPreviousPaid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PreviousPaid");

                entity.Property(e => e.DDay).IsUnicode(false);
            });

            modelBuilder.Entity<VwPreviousbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Previousbalance");

                entity.Property(e => e.DDay).IsUnicode(false);
            });

            modelBuilder.Entity<VwPriceCodeCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PriceCodeCustomer");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XPriceCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPriceCodeVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PriceCodeVendor");

                entity.Property(e => e.XPriceCode).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrintSelectDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrintSelectDisp");

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjClient");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XClientCode).IsUnicode(false);

                entity.Property(e => e.XClientName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjClientDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjClient_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjCommission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjCommission");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCommnCode).IsUnicode(false);

                entity.Property(e => e.XCommnName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjCommissionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjCommission_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjCostCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_CostCategory");

                entity.Property(e => e.XCategoryCode).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjMainProjectStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_PrjMainProjectStock");
            });

            modelBuilder.Entity<VwPrjPaymentsReceipts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjPaymentsReceipts");

                entity.Property(e => e.Agent).IsUnicode(false);

                entity.Property(e => e.Client).IsUnicode(false);

                entity.Property(e => e.PartyCode).IsUnicode(false);

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.XReferenseNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectCodeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectCode_Search");

                entity.Property(e => e.ProjectCode).IsUnicode(false);

                entity.Property(e => e.ProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectDetails");

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescr).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectMaster_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectParameters>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectParameters");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFeeDescription).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XMappingCode).IsUnicode(false);

                entity.Property(e => e.XMappingName).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectPurchaseSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectPurchaseSales");

                entity.Property(e => e.XClientVendor).IsUnicode(false);

                entity.Property(e => e.XInvoiceno).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjProjectWorkLogDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjProjectWorkLog_Disp");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescr).IsUnicode(false);

                entity.Property(e => e.XTimeSlot).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjPtojectPermissionInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_PtojectPermissionInfo");

                entity.Property(e => e.DEntrydate).IsUnicode(false);

                entity.Property(e => e.XAsphaltName).IsUnicode(false);

                entity.Property(e => e.XBaldiyaName).IsUnicode(false);

                entity.Property(e => e.XCompactionName).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XLength).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XMillingName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOperationName).IsUnicode(false);

                entity.Property(e => e.XPenalty).IsUnicode(false);

                entity.Property(e => e.XPermissionCode).IsUnicode(false);

                entity.Property(e => e.XPermissionNo).IsUnicode(false);

                entity.Property(e => e.XPermitUpdate).IsUnicode(false);

                entity.Property(e => e.XPermits).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTeam).IsUnicode(false);

                entity.Property(e => e.XTrenchName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjPurchasePayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_prjPurchasePayments");

                entity.Property(e => e.XReferenseNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjPurchaseVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjPurchaseVendor");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjSafetyInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_SafetyInspection");

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XInspectionCode).IsUnicode(false);

                entity.Property(e => e.XInspectionName).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjSalesCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjSalesCustomer");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjSalesReceipts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_prjSalesReceipts");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XReferenseNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjTender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_Tender");

                entity.Property(e => e.NProposedAmt).IsUnicode(false);

                entity.Property(e => e.NPurchaseAmt).IsUnicode(false);

                entity.Property(e => e.Typename).IsUnicode(false);

                entity.Property(e => e.XBidRemark).IsUnicode(false);

                entity.Property(e => e.XBidStatus).IsUnicode(false);

                entity.Property(e => e.XBidStatus2).IsUnicode(false);

                entity.Property(e => e.XClientContact).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEnquiryType).IsUnicode(false);

                entity.Property(e => e.XMoreDetails).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayee).IsUnicode(false);

                entity.Property(e => e.XPlaceOfSubmission).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XProjectPlace).IsUnicode(false);

                entity.Property(e => e.XProjectReference).IsUnicode(false);

                entity.Property(e => e.XProjectType).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XReview).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTenderCode).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);

                entity.Property(e => e.XTypeOfSubmission).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjTenderDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_TenderDashboard");

                entity.Property(e => e.DDocumentSubmissionDate).IsUnicode(false);

                entity.Property(e => e.DEntrydate).IsUnicode(false);

                entity.Property(e => e.NBidBondAmount).IsUnicode(false);

                entity.Property(e => e.NPurchaseAmt).IsUnicode(false);

                entity.Property(e => e.Typename).IsUnicode(false);

                entity.Property(e => e.XBidRemark).IsUnicode(false);

                entity.Property(e => e.XBidStatus).IsUnicode(false);

                entity.Property(e => e.XBidStatus2).IsUnicode(false);

                entity.Property(e => e.XComment).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XEnquiryType).IsUnicode(false);

                entity.Property(e => e.XMoreDetails).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPlaceOfSubmission).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XProjectType).IsUnicode(false);

                entity.Property(e => e.XReferenceCode).IsUnicode(false);

                entity.Property(e => e.XReview).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XTenderCode).IsUnicode(false);

                entity.Property(e => e.XTenderName).IsUnicode(false);

                entity.Property(e => e.XTypeOfSubmission).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjTimesheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjTimesheet");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjTimesheetRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjTimesheet_RPT");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjVendor");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFaxNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWebSite).IsUnicode(false);

                entity.Property(e => e.XZipCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjVendorDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrjVendor_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjWorkOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_WorkOrder");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XComments).IsUnicode(false);

                entity.Property(e => e.XFdtno).IsUnicode(false);

                entity.Property(e => e.XJobNo).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPeriod).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTandC).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWorkOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjWorkOrderDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_WorkOrderDetails");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLongDesc).IsUnicode(false);

                entity.Property(e => e.XShortDesc).IsUnicode(false);

                entity.Property(e => e.XVat).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrjWorkPermitDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Prj_WorkPermitDashBoard");

                entity.Property(e => e.DEnddate).IsUnicode(false);

                entity.Property(e => e.DEntrydate).IsUnicode(false);

                entity.Property(e => e.DStartDate).IsUnicode(false);

                entity.Property(e => e.XAsphaltName).IsUnicode(false);

                entity.Property(e => e.XBaldiyaName).IsUnicode(false);

                entity.Property(e => e.XCompactionName).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XLength).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XMillingName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOperationName).IsUnicode(false);

                entity.Property(e => e.XPenalty).IsUnicode(false);

                entity.Property(e => e.XPermissionCode).IsUnicode(false);

                entity.Property(e => e.XPermissionNo).IsUnicode(false);

                entity.Property(e => e.XPermitUpdate).IsUnicode(false);

                entity.Property(e => e.XPermits).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XTeam).IsUnicode(false);

                entity.Property(e => e.XTrenchName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwProcessedRfq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_ProcessedRFQ");

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwProcessedRfqDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_ProcessedRFQ_Details");

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwProductionRequestSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProductionRequestSearch");

                entity.Property(e => e.DEntryDate).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectAndCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectAndCompany");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectAssTxnDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectAssTxnDetail");

                entity.Property(e => e.XCategoryPrefix).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XLocation).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectBoqlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectBOQList");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectItemDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectItemDetails");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.NCurrentStock).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectQtyDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectQtyDetails_RPT");

                entity.Property(e => e.TypeVal).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectTransferDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectTransferDetails");

                entity.Property(e => e.ProjectFrom).IsUnicode(false);

                entity.Property(e => e.ProjectTo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectTransferItemDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectTransferItemDetails");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectTransferMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectTransferMaster");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ProjectFrom).IsUnicode(false);

                entity.Property(e => e.ProjectTo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectType");

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectWiseItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectWiseItems");

                entity.Property(e => e.NPartyCode).IsUnicode(false);

                entity.Property(e => e.NPartyName).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectWiseTxnDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectWiseTxnDetail");

                entity.Property(e => e.BaseUnit).IsUnicode(false);

                entity.Property(e => e.NPartyName).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMainProject).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectWiseTxnDetailDriver>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProjectWiseTxnDetail_Driver");

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjectWorkOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ProjectWorkOrder");

                entity.Property(e => e.DStartDate).IsUnicode(false);

                entity.Property(e => e.NContractAmt).IsUnicode(false);

                entity.Property(e => e.NEstimateCost).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XContactPerson).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDistrict).IsUnicode(false);

                entity.Property(e => e.XEmployee).IsUnicode(false);

                entity.Property(e => e.XEmpsId).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectDescription).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XSuppliers).IsUnicode(false);

                entity.Property(e => e.XSuppsId).IsUnicode(false);
            });

            modelBuilder.Entity<VwProjects>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Projects");

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_prs_dashboard");

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.EntryScreen).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.NCost).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);

                entity.Property(e => e.XSalesOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XStatusComplete).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsPoMrnDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrsPoMrn_Detail");

                entity.Property(e => e.XBaseUnit).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsPoMrnGroupBy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrsPoMrn_GroupBy");

                entity.Property(e => e.DPrsdate).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsPoMrnStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PrsPoMrn_Status");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsandRfq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PRSandRFQ");

                entity.Property(e => e.DPrsdate).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsitemDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_prsitem_dashboard");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.NCost).IsUnicode(false);

                entity.Property(e => e.NPrsqty).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XMrnno).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurpose).IsUnicode(false);

                entity.Property(e => e.XSalesOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPrsnoSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_PrsnoSearch");

                entity.Property(e => e.XPrsno).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseBarcodeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseBarcode_Disp");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseFreightTaxamt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_purchaseFreight_Taxamt");
            });

            modelBuilder.Entity<VwPurchaseOrderDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseOrder_Dashboard");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSaleOrderNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseOrderDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_purchaseOrder_Disp");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.QuotationNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseOrderList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_purchaseOrderList");

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Vendor).IsUnicode(false);

                entity.Property(e => e.VendorCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseOrderSo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseOrderSO");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPorderNo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwPurchaseOrderSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchaseOrder_Sub");
            });

            modelBuilder.Entity<VwPurchasePaymentBarcodeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PurchasePaymentBarcode_Disp");

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwQuotaionFollowup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_QuotaionFollowup");

                entity.Property(e => e.DFollowupdate).IsUnicode(false);

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCrmCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwQuotationdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_quotationdetails");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwRackwiseRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_rackwise_rpt");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);

                entity.Property(e => e.XUnit).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecAppointmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rec_AppointmentDisp");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecApproval");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecApprovalCycleDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rec_ApprovalCycleDetails");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecApprovalMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecApprovalMaster");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecEmployeeDependence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rec_EmployeeDependence");

                entity.Property(e => e.DDdob).IsUnicode(false);

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.DIssueDate).IsUnicode(false);

                entity.Property(e => e.XDiqamaNo).IsUnicode(false);

                entity.Property(e => e.XDname).IsUnicode(false);

                entity.Property(e => e.XDpassportNo).IsUnicode(false);

                entity.Property(e => e.XLicenceNo).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecEmployeeRequestMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rec_EmployeeRequestMaster");

                entity.Property(e => e.DRequestDate).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecJobVacancyDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecJobVacancyDetails");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacancyCode).IsUnicode(false);

                entity.Property(e => e.XVacancyName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecRecruitment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecRecruitment");

                entity.Property(e => e.NEmpId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XApprovalName).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCurrrentLocation).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XEduBackground).IsUnicode(false);

                entity.Property(e => e.XEduMajor).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XFlightNo).IsUnicode(false);

                entity.Property(e => e.XIdno).IsUnicode(false);

                entity.Property(e => e.XIntName).IsUnicode(false);

                entity.Property(e => e.XLastCompany).IsUnicode(false);

                entity.Property(e => e.XLastPosition).IsUnicode(false);

                entity.Property(e => e.XLicenceNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XPickupman).IsUnicode(false);

                entity.Property(e => e.XPostboxNo).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XTelephone).IsUnicode(false);

                entity.Property(e => e.XVacancy).IsUnicode(false);

                entity.Property(e => e.XVisaNo).IsUnicode(false);

                entity.Property(e => e.XVisaTitle).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecRecruitmentdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rec_Recruitmentdetails");

                entity.Property(e => e.DDob).IsUnicode(false);

                entity.Property(e => e.DExpiryDate).IsUnicode(false);

                entity.Property(e => e.DIssueDate).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XIdno).IsUnicode(false);

                entity.Property(e => e.XLicenceNo).IsUnicode(false);

                entity.Property(e => e.XMaritalStatus).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XReligion).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecruitdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_recruitdetails");

                entity.Property(e => e.Cv).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.NExperianceInYears).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCity).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XCvName).IsUnicode(false);

                entity.Property(e => e.XEduBackground).IsUnicode(false);

                entity.Property(e => e.XEduMajor).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XIdno).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XRecruitmentCode).IsUnicode(false);

                entity.Property(e => e.XResidanceNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacancy).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecruitmentAcceptance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecruitmentAcceptance");

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwRecruitmentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RecruitmentType");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalName).IsUnicode(false);
            });

            modelBuilder.Entity<VwReminderSettingsScreen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ReminderSettingsScreen");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwReportLedgerMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ReportLedgerMapping");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XGroupCode).IsUnicode(false);

                entity.Property(e => e.XGroupName).IsUnicode(false);

                entity.Property(e => e.XReportGroupDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwRequestQuotationDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RequestQuotationDetails_Disp");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwRequestQuotationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RequestQuotation_Disp");

                entity.Property(e => e.DRequestDate).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwResPaymentStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ResPayment_Status");

                entity.Property(e => e.StdStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwResevationEnroledDetailRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ResevationEnroledDetail_rpt");

                entity.Property(e => e.Status1).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwResponsiblePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ResponsiblePerson");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwReturnPendingVacation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ReturnPendingVacation");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwRfqVendorSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RFQ_VendorSearch");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XSource).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRfqgeneratingDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RFQGenerating_Details");

                entity.Property(e => e.XPkeyNo).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRfqgeneratingMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RFQGenerating_Master");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPkeyNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_rst_TenentDetails");

                entity.Property(e => e.NItemId).IsUnicode(false);

                entity.Property(e => e.XExtensionCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XRoomNo).IsUnicode(false);

                entity.Property(e => e.XTenentCode).IsUnicode(false);

                entity.Property(e => e.XTenentName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rst_TenentInvoice");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XMonthCode).IsUnicode(false);

                entity.Property(e => e.XRoomNo).IsUnicode(false);

                entity.Property(e => e.XTenentCode).IsUnicode(false);

                entity.Property(e => e.XTenentName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rst_TenentInvoiceDetail");

                entity.Property(e => e.XExtensionCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentInvoiceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rst_TenentInvoice_Disp");

                entity.Property(e => e.DProcessDate).IsUnicode(false);

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XYear).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentInvoiceTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rst_TenentInvoiceTransaction");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwRstTenentInvoices>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Rst_TenentInvoices");

                entity.Property(e => e.XExtensionCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo).IsUnicode(false);

                entity.Property(e => e.XTenentName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryDepartment");

                entity.Property(e => e.XDepartment).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryDetailByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryDetailByBatch");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryDetailByEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryDetailByEmployee");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryDetailByEmployeeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryDetailByEmployee_disp");

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryPaidDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryPaid_Disp");

                entity.Property(e => e.NPayTypeId).IsUnicode(false);

                entity.Property(e => e.XBatch).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryRivisionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_SalaryRivisionDisp");

                entity.Property(e => e.DEffectiveDate).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XHistoryCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalaryUpdateMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalaryUpdateMonth");
            });

            modelBuilder.Entity<VwSalaryissuePaycode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salaryissue_paycode");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesAmount");

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesAmountCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesAmount_Customer");

                entity.Property(e => e.XCardNo).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesBySalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesBySalesOrder");
            });

            modelBuilder.Entity<VwSalesCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salesCost");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesFunnel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesFunnel");

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesInvoiceRegRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesInvoiceReg_Rpt");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesInvoiceStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesInvoiceStatus_rpt");

                entity.Property(e => e.DelNo).IsUnicode(false);

                entity.Property(e => e.InvNo).IsUnicode(false);

                entity.Property(e => e.RetNo).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesOrderDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesOrder_Dashboard");

                entity.Property(e => e.DExpDelDate).IsUnicode(false);

                entity.Property(e => e.EntryFrom).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.NCashReceived).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NDueDays).IsUnicode(false);

                entity.Property(e => e.NNetAmt).IsUnicode(false);

                entity.Property(e => e.XCurrentStatus).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XSalesNumber).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesOrderPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesOrder_PO");

                entity.Property(e => e.DOrderDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesOrderQtyDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesOrderQty_Disp");
            });

            modelBuilder.Entity<VwSalesPaymentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesPaymentType");
            });

            modelBuilder.Entity<VwSalesQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_salesQuotation");

                entity.Property(e => e.DQuotationDate).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);

                entity.Property(e => e.XRfqRefNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesRegisterRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesRegister_rpt");

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesReturnImei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesReturn_IMEI");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesReturnMasterWithoutSaleDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesReturnMasterWithoutSale_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesReturnPending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesReturnPending");

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesReturnPendingRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesReturnPending_rpt");
            });

            modelBuilder.Entity<VwSalesReturnWithoutSaleDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesReturnWithoutSale_Disp");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDebitNoteNo).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XDisplayName2).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);

                entity.Property(e => e.XPhoneNo2).IsUnicode(false);

                entity.Property(e => e.XReturnRemarks).IsUnicode(false);

                entity.Property(e => e.XReturnType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sales_rpt");

                entity.Property(e => e.SalesAmountInWords).IsUnicode(false);

                entity.Property(e => e.TaxAmountInWords).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sales_users");

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesmanAppcount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Salesman_Appcount");

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesmanFromSalesOrderDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesmanFromSalesOrder_Disp");

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSalesmanSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SalesmanSummary");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSatrtupmenuDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Satrtupmenu_Disp");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAccountUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_Account_users");

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmission");

                entity.Property(e => e.RoomNo).IsUnicode(false);

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XAdmittedClass).IsUnicode(false);

                entity.Property(e => e.XAlergies).IsUnicode(false);

                entity.Property(e => e.XAssesmentRemarks).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XBookCode).IsUnicode(false);

                entity.Property(e => e.XBridgePgm).IsUnicode(false);

                entity.Property(e => e.XBridgeProgramYear).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XClub).IsUnicode(false);

                entity.Property(e => e.XCob).IsUnicode(false);

                entity.Property(e => e.XContactPersonName1).IsUnicode(false);

                entity.Property(e => e.XContactPersonName2).IsUnicode(false);

                entity.Property(e => e.XContactPersonNo1).IsUnicode(false);

                entity.Property(e => e.XContactPersonNo2).IsUnicode(false);

                entity.Property(e => e.XDisPhysicalAbility).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XHouseName).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttnd).IsUnicode(false);

                entity.Property(e => e.XLastSchoolAttnd1).IsUnicode(false);

                entity.Property(e => e.XLastSchoolGrade).IsUnicode(false);

                entity.Property(e => e.XLastSchoolGrade1).IsUnicode(false);

                entity.Property(e => e.XLastSchoolyear).IsUnicode(false);

                entity.Property(e => e.XLastSchoolyear1).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XLedgerNameAr).IsUnicode(false);

                entity.Property(e => e.XLrn).IsUnicode(false);

                entity.Property(e => e.XMedicationDetails).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XParentCode).IsUnicode(false);

                entity.Property(e => e.XPassPortNo).IsUnicode(false);

                entity.Property(e => e.XPcity).IsUnicode(false);

                entity.Property(e => e.XPfamilyName).IsUnicode(false);

                entity.Property(e => e.XPfatherName).IsUnicode(false);

                entity.Property(e => e.XPlaceofBirth).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPmotherName).IsUnicode(false);

                entity.Property(e => e.XPnationalIdf).IsUnicode(false);

                entity.Property(e => e.XPnationalityF).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);

                entity.Property(e => e.XPuserId).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRoomNo).IsUnicode(false);

                entity.Property(e => e.XRoot).IsUnicode(false);

                entity.Property(e => e.XSpecialCareRequirement).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);

                entity.Property(e => e.XTestResult).IsUnicode(false);

                entity.Property(e => e.XTransferReason).IsUnicode(false);

                entity.Property(e => e.XTransportationBusNo).IsUnicode(false);

                entity.Property(e => e.XTransportationType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmissionClass");

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameLocale).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmissionDetails_Disp");

                entity.Property(e => e.AdmissionNo).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.GaurdianName).IsUnicode(false);

                entity.Property(e => e.GaurdianNameLocale).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XBookCode).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XNameLocale).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmission_Disp");

                entity.Property(e => e.AdmissionNo).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmissionDisp");

                entity.Property(e => e.AdmissionNo).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionFee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_AdmissionFee");

                entity.Property(e => e.Dfrom).IsUnicode(false);

                entity.Property(e => e.Dto).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionFeeCatogory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_AdmissionFeeCatogory");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionReservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmission_Reservation");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XCob).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionReservationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmissionReservation_Disp");

                entity.Property(e => e.AdmissionNo).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.NationalId).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAdmissionWthFeeCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchAdmissionWthFeeCategory");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchAttendanceDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Sch_AttendanceDisp");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XEntryNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBookDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchBook_Disp");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBookDistibutionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BookDistibutionDetail");

                entity.Property(e => e.TransDate).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBookCde).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XDistibutionNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBookDistributionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_schBookDistribution_Disp");

                entity.Property(e => e.StockUnit).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBookTransDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BookTransDetails");

                entity.Property(e => e.XFreeDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBusRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BusRoute");

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBusRouteDetailDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BusRouteDetailDisp");

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBusRouteDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BusRouteDisp");

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBusScheduleRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_BusScheduleRpt");

                entity.Property(e => e.DTime).IsUnicode(false);

                entity.Property(e => e.DTime1).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBuildingName).IsUnicode(false);

                entity.Property(e => e.XBuildingNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XLandMark).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteName1).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XRouteNo1).IsUnicode(false);

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopCode1).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);

                entity.Property(e => e.XStopName1).IsUnicode(false);

                entity.Property(e => e.XStreetName).IsUnicode(false);

                entity.Property(e => e.XStreetNo).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleCode1).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);

                entity.Property(e => e.XVehicleName1).IsUnicode(false);

                entity.Property(e => e.XZoneName).IsUnicode(false);

                entity.Property(e => e.XZoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchBusStop>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchBusStop");

                entity.Property(e => e.DTime).IsUnicode(false);

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchCertificateSibblings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_CertificateSibblings");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClass");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClass_Disp");

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassDisp");

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassDivDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassDiv_Disp");

                entity.Property(e => e.ClassDivision).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassDivision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassDivision");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassDivisionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassDivision_Disp");

                entity.Property(e => e.ClassDivision).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassFeeCategorySelect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_ClassFeeCategorySelect");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassFeeSelect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_ClassFeeSelect");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassFeeSetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassFeeSetup");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassFeeSetupDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassFeeSetup_Disp");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.ClassType).IsUnicode(false);

                entity.Property(e => e.FeeType).IsUnicode(false);

                entity.Property(e => e.Frequency).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassMaster_Disp");

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassTypeAccounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassTypeAccounts");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XStudentDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XStudentDefAccountName).IsUnicode(false);

                entity.Property(e => e.XStudentDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XStudentDefGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassTypeDefAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassTypeDefAccount");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XStudentDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XStudentDefAccountName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassTypeDefGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassTypeDefGroup");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XStudentDefGroupCode).IsUnicode(false);

                entity.Property(e => e.XStudentDefGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassTypeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassType_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Section).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClassTypeFeeSetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchClassTypeFeeSetup");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFrequencyName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchClinicDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_ClinicDisp");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClinicCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchDriverRegistration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchDriverRegistration");

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XDrivingLicenseId).IsUnicode(false);

                entity.Property(e => e.XIqamaNumber).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchDriverRegistrationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchDriverRegistration_Disp");

                entity.Property(e => e.DriverId).IsUnicode(false);

                entity.Property(e => e.DriverName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeAccountDefaults>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeAccountDefaults");

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeIncomeDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XFeeIncomeDefAccountName).IsUnicode(false);

                entity.Property(e => e.XFeeProposedIncomeDefAccountCode).IsUnicode(false);

                entity.Property(e => e.XFeeProposedIncomeDefAccountName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeAdvanceRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_FeeAdvance_Rpt");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XAdvanceNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeCategoryType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_FeeCategoryType");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeCategoryTypeDirection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_FeeCategoryTypeDirection");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeDefaulters>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeDefaulters");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeListForReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeListForReceipt");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XFeeCategoryCode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeListForReceiptEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeListForReceiptEdit");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeMapping");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassTo).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XClassTypeTo).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFeeTypeTo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeReceiptDetails");

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptDetailsTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeReceiptDetailsTotal");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_FeeReceipt_Disp");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptPsd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeReceipt_PSD");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XFeeCategoryCode).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptStatemntRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeReceiptStatemnt_rpt");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReceiptTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeReceiptTotal");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReturnDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_FeeReturn_Details");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeReturnDetails1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_FeeReturnDetails");
            });

            modelBuilder.Entity<VwSchFeeReturnDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_FeeReturn_Disp");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XMemoNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeSummaryByFees>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeSummaryByFees");
            });

            modelBuilder.Entity<VwSchFeeTypeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_FeeType_disp");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XDirection).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeTypeDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeType_Disp");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.FeeType).IsUnicode(false);

                entity.Property(e => e.Frequency).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeTypeDisp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeeTypeDisp");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.FeeType).IsUnicode(false);

                entity.Property(e => e.Frequency).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeeUpdateDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Sch_FeeUpdate_Disp");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFeeUpdateNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesDetailsAnalysisRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesDetailsAnalysis_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesDetails_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesDueDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesDueDetails");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesDueDetailsForRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesDueDetailsForRpt");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesDueDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesDueDetails_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesNoDueDetailsForRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesNoDueDetailsForRpt");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesSummaryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_FeesSummary_rpt");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchFeesSummaryRpt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchFeesSummary_rpt");

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchParentDetailsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_ParentDetails_Disp");

                entity.Property(e => e.XBuildingName).IsUnicode(false);

                entity.Property(e => e.XBuildingNo).IsUnicode(false);

                entity.Property(e => e.XCompanyF).IsUnicode(false);

                entity.Property(e => e.XCompanyM).IsUnicode(false);

                entity.Property(e => e.XEmailF).IsUnicode(false);

                entity.Property(e => e.XEmailM).IsUnicode(false);

                entity.Property(e => e.XEqualificationM).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XJobF).IsUnicode(false);

                entity.Property(e => e.XJobM).IsUnicode(false);

                entity.Property(e => e.XLandMark).IsUnicode(false);

                entity.Property(e => e.XOfficeNoF).IsUnicode(false);

                entity.Property(e => e.XOfficeNoM).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XParentCode).IsUnicode(false);

                entity.Property(e => e.XPcity).IsUnicode(false);

                entity.Property(e => e.XPfamilyName).IsUnicode(false);

                entity.Property(e => e.XPfatherName).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPmotherName).IsUnicode(false);

                entity.Property(e => e.XPnationalIdf).IsUnicode(false);

                entity.Property(e => e.XPnationalIdm).IsUnicode(false);

                entity.Property(e => e.XPnationalityF).IsUnicode(false);

                entity.Property(e => e.XPnationalityM).IsUnicode(false);

                entity.Property(e => e.XPpassportNoF).IsUnicode(false);

                entity.Property(e => e.XPpassportNoM).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);

                entity.Property(e => e.XRelation).IsUnicode(false);

                entity.Property(e => e.XStreetName).IsUnicode(false);

                entity.Property(e => e.XStreetNo).IsUnicode(false);

                entity.Property(e => e.XTelephoneF).IsUnicode(false);

                entity.Property(e => e.XTelephoneM).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XZoneName).IsUnicode(false);

                entity.Property(e => e.XZoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchParentDetailsDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchParentDetails_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.MotherName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchParentDetailsDisp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchParentDetailsDisp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.FamilyName).IsUnicode(false);

                entity.Property(e => e.FatherName).IsUnicode(false);

                entity.Property(e => e.MotherName).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGaurdianNameAr).IsUnicode(false);

                entity.Property(e => e.XParentCode).IsUnicode(false);

                entity.Property(e => e.XPnationalIdf).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchParentLetterRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchParentLetter_rpt");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchParentWithMoreStudents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_ParentWithMoreStudents");
            });

            modelBuilder.Entity<VwSchPrefectManagerDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Sch_PrefectManager_Disp");

                entity.Property(e => e.Sanction).IsUnicode(false);

                entity.Property(e => e.XCaseCode).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XViolation).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchPromotionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchPromotion_Disp");

                entity.Property(e => e.FromClass).IsUnicode(false);

                entity.Property(e => e.FromSection).IsUnicode(false);

                entity.Property(e => e.ToClass).IsUnicode(false);

                entity.Property(e => e.ToSection).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchPromotionDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchPromotionDisp");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.FromClass).IsUnicode(false);

                entity.Property(e => e.FromSection).IsUnicode(false);

                entity.Property(e => e.ProcessNo).IsUnicode(false);

                entity.Property(e => e.ToClass).IsUnicode(false);

                entity.Property(e => e.ToSection).IsUnicode(false);

                entity.Property(e => e.XPromotionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchPromotionFeeSetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchPromotionFeeSetup");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassTo).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XClassTypeTo).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFeeTypeTo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchPromotionMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchPromotionMaster");

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XAcYearTo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassTo).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XClassTypeTo).IsUnicode(false);

                entity.Property(e => e.XPromotionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReceiptSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchReceipt_Search");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.RegisterNo).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReceiptSearchReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchReceiptSearch_Return");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ReceiptNo).IsUnicode(false);

                entity.Property(e => e.RegisterNo).IsUnicode(false);

                entity.Property(e => e.StudentName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReceiptprintCustom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_Receiptprint_Custom");

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchRegDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchReg_Disp");

                entity.Property(e => e.DDropTime).IsUnicode(false);

                entity.Property(e => e.DPickTime).IsUnicode(false);

                entity.Property(e => e.DropPoint).IsUnicode(false);

                entity.Property(e => e.DropPointCode).IsUnicode(false);

                entity.Property(e => e.DropRoute).IsUnicode(false);

                entity.Property(e => e.DropRouteNo).IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBuildingName).IsUnicode(false);

                entity.Property(e => e.XBuildingNo).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XLandMark).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegistrationCode).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);

                entity.Property(e => e.XStreetName).IsUnicode(false);

                entity.Property(e => e.XStreetNo).IsUnicode(false);

                entity.Property(e => e.XZoneName).IsUnicode(false);

                entity.Property(e => e.XZoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReginAdmission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchReginAdmission");

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchRemainingBookStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_RemainingBook_Status");

                entity.Property(e => e.AdmissionNo).IsUnicode(false);

                entity.Property(e => e.BookName).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReservationDetailsExisting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchReservationDetails_Existing");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReservationPaymentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Sch_ReservationPayment_Detail");

                entity.Property(e => e.XFeeType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReservationPaymentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_ReservationPayment_rpt");

                entity.Property(e => e.StdStatus).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchReservationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_sch_Reservation_rpt");

                entity.Property(e => e.NPaymentId).IsUnicode(false);

                entity.Property(e => e.ResStatus).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XPhone).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchSalesDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchSalesDetails");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFrequencyName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchSectionFee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchSectionFee");

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XFrequencyName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchSessionReservationCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchSessionReservation_Count");

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudenFeeReturnRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_StudenFeeReturn_rpt");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XMemoNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudenRegDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudenReg_Disp");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentBookDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_StudentBookDetail");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XMainItemCode).IsUnicode(false);

                entity.Property(e => e.XMainItemName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentBusRegList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_StudentBusReg_List");

                entity.Property(e => e.RouteName1).IsUnicode(false);

                entity.Property(e => e.RouteNo1).IsUnicode(false);

                entity.Property(e => e.XRouteName).IsUnicode(false);

                entity.Property(e => e.XRouteNo).IsUnicode(false);

                entity.Property(e => e.XStopCode).IsUnicode(false);

                entity.Property(e => e.XStopCode1).IsUnicode(false);

                entity.Property(e => e.XStopName).IsUnicode(false);

                entity.Property(e => e.XStopName1).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleCode1).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);

                entity.Property(e => e.XVehicleName1).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Sch_StudentDashboard");

                entity.Property(e => e.DAdmissionDate).IsUnicode(false);

                entity.Property(e => e.NBalanceAmount).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NPaidAmount).IsUnicode(false);

                entity.Property(e => e.ParentMobileNo).IsUnicode(false);

                entity.Property(e => e.StudentFeesAmount).IsUnicode(false);

                entity.Property(e => e.StudentMobileNo).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XContactPersonName1).IsUnicode(false);

                entity.Property(e => e.XGuardianName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentEnrollmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentEnrollment_disp");

                entity.Property(e => e.Mothername).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.NQatarId).IsUnicode(false);

                entity.Property(e => e.ParentMobileNo).IsUnicode(false);

                entity.Property(e => e.ParentName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XPhone).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentFeeAdvanceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentFeeAdvance_Details");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XAdvanceNo).IsUnicode(false);

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPayMethod).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentFeeDiscountDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentFeeDiscount_Details");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XDiscountNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentHistory");

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XPromotionCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentPersonalDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_StudentPersonalDetails_Rpt");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XBloodGroup).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XCompanyF).IsUnicode(false);

                entity.Property(e => e.XContactPersonName1).IsUnicode(false);

                entity.Property(e => e.XContactPersonNo1).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XJobF).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPaddress).IsUnicode(false);

                entity.Property(e => e.XPcity).IsUnicode(false);

                entity.Property(e => e.XPfatherName).IsUnicode(false);

                entity.Property(e => e.XPlaceofBirth).IsUnicode(false);

                entity.Property(e => e.XPmotherName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStudentMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentRegDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentRegDetails");

                entity.Property(e => e.NQatarId).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XGivenName).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPhone).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentReservationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentReservation_disp");

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XInitial).IsUnicode(false);

                entity.Property(e => e.XLastName).IsUnicode(false);

                entity.Property(e => e.XMiddleName).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNameAr).IsUnicode(false);

                entity.Property(e => e.XPhone).IsUnicode(false);

                entity.Property(e => e.XRegNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentResidentialExpiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_StudentResidentialExpiry");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XGaurdianName).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationalId).IsUnicode(false);

                entity.Property(e => e.XPmobileNo).IsUnicode(false);

                entity.Property(e => e.XPphoneNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchStudentStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchStudentStatement");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchTerm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sch_Term");

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchVehicleRegistration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchVehicleRegistration");

                entity.Property(e => e.XDriverName).IsUnicode(false);

                entity.Property(e => e.XNumberPlate).IsUnicode(false);

                entity.Property(e => e.XRoot).IsUnicode(false);

                entity.Property(e => e.XVehicleCode).IsUnicode(false);

                entity.Property(e => e.XVehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchVehicleRegistrationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchVehicleRegistration_Disp");

                entity.Property(e => e.VehicleCode).IsUnicode(false);

                entity.Property(e => e.VehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchYearSectinClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchYearSectinClass");

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchYearSectionClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SchYearSectionClass");

                entity.Property(e => e.XAcYear).IsUnicode(false);

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);
            });

            modelBuilder.Entity<VwSchstudentcountRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_schstudentcount_rpt");
            });

            modelBuilder.Entity<VwSchstudentcountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Schstudentcount_Summary");

                entity.Property(e => e.XClass).IsUnicode(false);
            });

            modelBuilder.Entity<VwScreenWisePosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ScreenWisePosting");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XCompanyName).IsUnicode(false);

                entity.Property(e => e.XCountry).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwScreens>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Screens");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecAppSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecAppSettings");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);

                entity.Property(e => e.XModule).IsUnicode(false);

                entity.Property(e => e.XScreen).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecApprovalSettingsEmployeeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sec_ApprovalSettings_EmployeeDetails");

                entity.Property(e => e.XActionDesc).IsUnicode(false);

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecUser");

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecUserApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecUserApproval");

                entity.Property(e => e.NUserId).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecUserLevelDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecUserLevel_Disp");

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecUserLevelPermissionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecUserLevelPermission_Disp");

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwSecUserList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SecUserList");

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSelGosiRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SelGOSI_Rpt");

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwSelectedPaycodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SelectedPaycodes");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceBookingDeliveryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ServiceBookingDelivery_Disp");

                entity.Property(e => e.DSalesDate).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.NImeito).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceBookingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_ServiceBooking_Search");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XWarranty).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Service_dashboard");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDeliveryDate).IsUnicode(false);

                entity.Property(e => e.XAssignTo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XJobNo).IsUnicode(false);

                entity.Property(e => e.XPriority).IsUnicode(false);

                entity.Property(e => e.XProductType).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceDashboard1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_ServiceDashboard");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DScheduleDate).IsUnicode(false);

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XBookingNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XPrimeResponsible).IsUnicode(false);

                entity.Property(e => e.XPriority).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceEndSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ServiceEndSettings");

                entity.Property(e => e.ServiceEndStatus).IsUnicode(false);

                entity.Property(e => e.XServiceEndCode).IsUnicode(false);

                entity.Property(e => e.XServiceEndStatusDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceScheduleDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ServiceScheduleDisp");

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.XBookingNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceSheetPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ServiceSheetPurchase");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceSheetSales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ServiceSheetSales");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceSheetCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Service_Status");

                entity.Property(e => e.TranBy).IsUnicode(false);

                entity.Property(e => e.TranByName).IsUnicode(false);

                entity.Property(e => e.TranNo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwShowSerialList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ShowSerialList");

                entity.Property(e => e.NImei).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSoReturnDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SO_ReturnDetails");
            });

            modelBuilder.Entity<VwSoitemMasterDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SOItemMaster_Details");

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwSrnInvDepartmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SRN_InvDepartment_Disp");

                entity.Property(e => e.CostCenterCode).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.DepartmentCode).IsUnicode(false);

                entity.Property(e => e.XCostcentreName).IsUnicode(false);
            });

            modelBuilder.Entity<VwStartupmenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Startupmenu");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwStatementsOfAccounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StatementsOfAccounts");

                entity.Property(e => e.NBalance).IsUnicode(false);

                entity.Property(e => e.NCredit).IsUnicode(false);

                entity.Property(e => e.NDebit).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);
            });

            modelBuilder.Entity<VwStatementsOfAccountsDetailed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StatementsOfAccounts_Detailed");

                entity.Property(e => e.DTransDate).IsUnicode(false);

                entity.Property(e => e.XLedgerCode).IsUnicode(false);

                entity.Property(e => e.XLedgerName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwStatusUpdateRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_statusUpdateRPT");

                entity.Property(e => e.XDocNo).IsUnicode(false);

                entity.Property(e => e.XNoOfDays).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockAgeingReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_StockAgeingReport");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockMasterMrnPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockMaster_MRN_Purchase");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockOut");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockPeriodWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockPeriodWise");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockPeriodWiseRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockPeriodWiseRpt");

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockRePosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockRePosting");

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockStatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StockStatus1");

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwStockstatusbylocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_stockstatusbylocation");

                entity.Property(e => e.NCurrentStock).IsUnicode(false);

                entity.Property(e => e.Soqty).IsUnicode(false);

                entity.Property(e => e.TransDate).IsUnicode(false);

                entity.Property(e => e.XCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemManufacturer).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationCode).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPartNo).IsUnicode(false);

                entity.Property(e => e.XPreferredVendor).IsUnicode(false);

                entity.Property(e => e.XRack).IsUnicode(false);
            });

            modelBuilder.Entity<VwStudentAttendanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_StudentAttendanceDetail");

                entity.Property(e => e.XAdmissionNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<VwStudentFeeStatementRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StudentFeeStatement_rpt");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFeeCategory).IsUnicode(false);

                entity.Property(e => e.XFeeType).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwStudentStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StudentStatus_rpt");
            });

            modelBuilder.Entity<VwStudentSummaryGenderRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_StudentSummary_Gender_rpt");

                entity.Property(e => e.XClass).IsUnicode(false);

                entity.Property(e => e.XClassDivision).IsUnicode(false);

                entity.Property(e => e.XClassType).IsUnicode(false);

                entity.Property(e => e.XGender).IsUnicode(false);
            });

            modelBuilder.Entity<VwSupervisor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Supervisor");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XSupervisor).IsUnicode(false);

                entity.Property(e => e.XSupervisorCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwSupervisorDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Supervisor_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSupervisorDisp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Supervisor_Disp1");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwSupervisorReportTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Supervisor_ReportTo");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTaxCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TaxCategory_Disp");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XInwardLedger).IsUnicode(false);

                entity.Property(e => e.XInwardLedgerCode).IsUnicode(false);

                entity.Property(e => e.XOutwardLedger).IsUnicode(false);

                entity.Property(e => e.XOutwardLedgerCode).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwTaxCategoryType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TaxCategoryType");

                entity.Property(e => e.BTaxApplicable).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwTaxDetailsRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TaxDetails_rpt");

                entity.Property(e => e.PartyCode).IsUnicode(false);

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.Reference).IsUnicode(false);
            });

            modelBuilder.Entity<VwTaxMainReportRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TaxMainReport_rpt");

                entity.Property(e => e.PartyCode).IsUnicode(false);

                entity.Property(e => e.PartyInvoice).IsUnicode(false);

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.Reference).IsUnicode(false);

                entity.Property(e => e.TaxNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_temp");
            });

            modelBuilder.Entity<VwTerminalSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTerminalSettings");

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XTerminalName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTerms>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Terms");

                entity.Property(e => e.NPercentage).IsUnicode(false);

                entity.Property(e => e.XTerms).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);
            });

            modelBuilder.Entity<VwTicketDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TicketDashBoard");

                entity.Property(e => e.DArrivalDate).IsUnicode(false);

                entity.Property(e => e.DDepartureDate).IsUnicode(false);

                entity.Property(e => e.DTravelDate).IsUnicode(false);

                entity.Property(e => e.NTicketAmount).IsUnicode(false);

                entity.Property(e => e.NTicketCount).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAgentName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XTicketRoute).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);

                entity.Property(e => e.XTravelClass).IsUnicode(false);
            });

            modelBuilder.Entity<VwTickethistorypopup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Tickethistorypopup");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XTicketRoute).IsUnicode(false);
            });

            modelBuilder.Entity<VwTicketingPayDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TicketingPayDetails");

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XTicketNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwTimeSheetMasterDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TimeSheetMaster_Disp");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwTimeSheetYearRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TimeSheetYear_Rpt");

                entity.Property(e => e.XBatchCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPayrunText).IsUnicode(false);
            });

            modelBuilder.Entity<VwTimesheetImportDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TimesheetImport_Disp");

                entity.Property(e => e.XPayrunText).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwTotalDiscAppliedInvoices>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TotalDiscAppliedInvoices");

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwTrainingAttendanceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TrainingAttendanceDetails");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<VwTrainingAttendanceMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TrainingAttendanceMaster");

                entity.Property(e => e.XAttendanceCode).IsUnicode(false);

                entity.Property(e => e.XCourseCode).IsUnicode(false);

                entity.Property(e => e.XCourseName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);
            });

            modelBuilder.Entity<VwTrainingAttendanceRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TrainingAttendance_RPT");

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);

                entity.Property(e => e.XCourseCode).IsUnicode(false);

                entity.Property(e => e.XCourseName).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XTraineeName).IsUnicode(false);

                entity.Property(e => e.XVenue).IsUnicode(false);
            });

            modelBuilder.Entity<VwTrainingRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TrainingRequest");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);

                entity.Property(e => e.XCourseName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XPositionCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XRequestCode).IsUnicode(false);

                entity.Property(e => e.XSubject).IsUnicode(false);

                entity.Property(e => e.XTrainingRsn).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVenue).IsUnicode(false);
            });

            modelBuilder.Entity<VwTransTypeRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TransType_rpt");

                entity.Property(e => e.NTransType).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<VwTransactionType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TransactionType");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XId).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwTransferReceiveDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_TransferReceiveDetails");

                entity.Property(e => e.DReceivableDate).IsUnicode(false);

                entity.Property(e => e.DTransferDate).IsUnicode(false);

                entity.Property(e => e.ReceiveLocation).IsUnicode(false);

                entity.Property(e => e.ReceiveNo).IsUnicode(false);

                entity.Property(e => e.TransLocation).IsUnicode(false);

                entity.Property(e => e.TransferNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwTransferStockRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_TransferStock_rpt");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XIssuedTo).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XItemUnit).IsUnicode(false);

                entity.Property(e => e.XLocationFrom).IsUnicode(false);

                entity.Property(e => e.XLocationTo).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);

                entity.Property(e => e.XUnitName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTvlPaymentDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Tvl_PaymentDetails");

                entity.Property(e => e.CustomerAddress).IsUnicode(false);

                entity.Property(e => e.VendorAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XTicketNo).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTvlReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Tvl_Reporting");

                entity.Property(e => e.Type1).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XContactName).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTicketNo).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTvlTicketing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Tvl_Ticketing");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.NCustomerTotal).IsUnicode(false);

                entity.Property(e => e.NVendorTotal).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TicketDate).IsUnicode(false);

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPassenger).IsUnicode(false);

                entity.Property(e => e.XRefundCustomerCode).IsUnicode(false);

                entity.Property(e => e.XRefundCustomerName).IsUnicode(false);

                entity.Property(e => e.XRoute).IsUnicode(false);

                entity.Property(e => e.XSalesmanCode).IsUnicode(false);

                entity.Property(e => e.XSalesmanName).IsUnicode(false);

                entity.Property(e => e.XTicketNo).IsUnicode(false);

                entity.Property(e => e.XTicketType).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwTvlTicketingPrimaryKeys>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_tvl_Ticketing_PrimaryKeys");

                entity.Property(e => e.XInvoiceNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UC_Item");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcItemSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UC_ItemSearch");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Category2).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcItemWithStockQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UC_ItemWithStockQty");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionAr).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.PartNo).IsUnicode(false);

                entity.Property(e => e.ProductCode).IsUnicode(false);

                entity.Property(e => e.Stock).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcinvPrsnoDeliverySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UCInvPRSNo_DeliverySearch");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcinvPrsnoDeliverySearchNested>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UCInvPRSNo_DeliverySearchNested");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PrsDate).IsUnicode(false);

                entity.Property(e => e.PrsNo).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XDepartmentCode).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XRequestType).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcsalesOrderSearchInDelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UCSalesOrderSearchInDelivery");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwUcsalesOrderSearchInPrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UCSalesOrderSearchInPRS");

                entity.Property(e => e.Customer).IsUnicode(false);

                entity.Property(e => e.CustomerCode).IsUnicode(false);

                entity.Property(e => e.NAmount).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.TransType).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserCategoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserCategory_Disp");

                entity.Property(e => e.Category).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserDetails");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserLevelApprovalSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserLevelApprovalSettings");
            });

            modelBuilder.Entity<VwUserListLevelSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserList_levelSettings");

                entity.Property(e => e.XUserCategory).IsUnicode(false);

                entity.Property(e => e.XUserCategoryCode).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserMenus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserMenus");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserMenusAllDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserMenusAll_Disp");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserMenusDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserMenus_Disp");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserMenusList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserMenus_List");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XCaptionAr).IsUnicode(false);

                entity.Property(e => e.XControlNo).IsUnicode(false);

                entity.Property(e => e.XFormNameWithTag).IsUnicode(false);

                entity.Property(e => e.XMenuName).IsUnicode(false);

                entity.Property(e => e.XModule).IsUnicode(false);

                entity.Property(e => e.XShortcutKey).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);

                entity.Property(e => e.XUserCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserPrevileges>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_userPrevileges");

                entity.Property(e => e.XUserCategory).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserPrevilegesDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserPrevilegesDisp");

                entity.Property(e => e.XCaption).IsUnicode(false);

                entity.Property(e => e.XText).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserRoleDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserRole_Disp");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_UserTransaction");

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);
            });

            modelBuilder.Entity<VwUserwiseEmployees>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_UserwiseEmployees");

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVacationCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VacationCount");

                entity.Property(e => e.XFnYearDescr).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwVacationDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VacationDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPayCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVchServiceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vch_ServiceDetails");

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRefCode).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XServiceTime).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVchServicePrint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vch_ServicePrint");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPlateNo).IsUnicode(false);

                entity.Property(e => e.XReason).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVchServiceReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vch_ServiceReport");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XServiceTime).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehAuctionSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehAuction_Search");

                entity.Property(e => e.AuctionNo).IsUnicode(false);

                entity.Property(e => e.ChaseNo).IsUnicode(false);

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.MobileNo).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.OwnerName).IsUnicode(false);

                entity.Property(e => e.PlateNo).IsUnicode(false);

                entity.Property(e => e.SerialNo).IsUnicode(false);

                entity.Property(e => e.VehicleName).IsUnicode(false);

                entity.Property(e => e.XAuctionNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehContractSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehContract_Search");

                entity.Property(e => e.BuyerIqamaNo).IsUnicode(false);

                entity.Property(e => e.BuyerMobileNo).IsUnicode(false);

                entity.Property(e => e.BuyerName).IsUnicode(false);

                entity.Property(e => e.ChaseNo).IsUnicode(false);

                entity.Property(e => e.ContractNo).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.PlateNo).IsUnicode(false);

                entity.Property(e => e.SellerIqamaNo).IsUnicode(false);

                entity.Property(e => e.SellerMobileNo).IsUnicode(false);

                entity.Property(e => e.SellerName).IsUnicode(false);

                entity.Property(e => e.VehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehCustomerRemider>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Veh_CustomerRemider");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XCustomerCode).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XPhoneNo1).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehCustomerTrans>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehCustomerTrans");

                entity.Property(e => e.XBank).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVoucherNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehFileMoving>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehFileMoving");

                entity.Property(e => e.DBuyIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.DSelIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.FileDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.NVehModel).IsUnicode(false);

                entity.Property(e => e.XBuyAddress).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaNo).IsUnicode(false);

                entity.Property(e => e.XBuyMobileNo).IsUnicode(false);

                entity.Property(e => e.XBuyName).IsUnicode(false);

                entity.Property(e => e.XBuyNationality).IsUnicode(false);

                entity.Property(e => e.XBuyNo).IsUnicode(false);

                entity.Property(e => e.XOwnerAddress).IsUnicode(false);

                entity.Property(e => e.XOwnerIqamaNo).IsUnicode(false);

                entity.Property(e => e.XOwnerName).IsUnicode(false);

                entity.Property(e => e.XSelAddress).IsUnicode(false);

                entity.Property(e => e.XSelIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XSelIqamaNo).IsUnicode(false);

                entity.Property(e => e.XSelMobileNo).IsUnicode(false);

                entity.Property(e => e.XSelName).IsUnicode(false);

                entity.Property(e => e.XSelNationality).IsUnicode(false);

                entity.Property(e => e.XSelNo).IsUnicode(false);

                entity.Property(e => e.XTransNo).IsUnicode(false);

                entity.Property(e => e.XVehBookNo).IsUnicode(false);

                entity.Property(e => e.XVehBookOwner).IsUnicode(false);

                entity.Property(e => e.XVehBookSource).IsUnicode(false);

                entity.Property(e => e.XVehChaseNo).IsUnicode(false);

                entity.Property(e => e.XVehColor).IsUnicode(false);

                entity.Property(e => e.XVehIdno).IsUnicode(false);

                entity.Property(e => e.XVehName).IsUnicode(false);

                entity.Property(e => e.XVehRegNo).IsUnicode(false);

                entity.Property(e => e.XVehRemarks).IsUnicode(false);

                entity.Property(e => e.XVehSize).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehFileMovingNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehFileMoving_New");

                entity.Property(e => e.DBuyIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.DSelIqamaExpiry).IsUnicode(false);

                entity.Property(e => e.FileDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.NVehModel).IsUnicode(false);

                entity.Property(e => e.XBuyAddress).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XBuyIqamaNo).IsUnicode(false);

                entity.Property(e => e.XBuyMobileNo).IsUnicode(false);

                entity.Property(e => e.XBuyName).IsUnicode(false);

                entity.Property(e => e.XBuyNationality).IsUnicode(false);

                entity.Property(e => e.XBuyNo).IsUnicode(false);

                entity.Property(e => e.XOwnerAddress).IsUnicode(false);

                entity.Property(e => e.XOwnerIqamaNo).IsUnicode(false);

                entity.Property(e => e.XOwnerName).IsUnicode(false);

                entity.Property(e => e.XSelAddress).IsUnicode(false);

                entity.Property(e => e.XSelIqamaIssue).IsUnicode(false);

                entity.Property(e => e.XSelIqamaNo).IsUnicode(false);

                entity.Property(e => e.XSelMobileNo).IsUnicode(false);

                entity.Property(e => e.XSelName).IsUnicode(false);

                entity.Property(e => e.XSelNationality).IsUnicode(false);

                entity.Property(e => e.XSelNo).IsUnicode(false);

                entity.Property(e => e.XTransNo).IsUnicode(false);

                entity.Property(e => e.XVehBookNo).IsUnicode(false);

                entity.Property(e => e.XVehBookOwner).IsUnicode(false);

                entity.Property(e => e.XVehBookSource).IsUnicode(false);

                entity.Property(e => e.XVehChaseNo).IsUnicode(false);

                entity.Property(e => e.XVehColor).IsUnicode(false);

                entity.Property(e => e.XVehIdno).IsUnicode(false);

                entity.Property(e => e.XVehName).IsUnicode(false);

                entity.Property(e => e.XVehRegNo).IsUnicode(false);

                entity.Property(e => e.XVehRemarks).IsUnicode(false);

                entity.Property(e => e.XVehSize).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehFileMovingSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VehFileMoving_Search");

                entity.Property(e => e.BuyerIqamaNo).IsUnicode(false);

                entity.Property(e => e.BuyerName).IsUnicode(false);

                entity.Property(e => e.ChaseNo).IsUnicode(false);

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.FileDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.PlateNo).IsUnicode(false);

                entity.Property(e => e.SellerIqamaNo).IsUnicode(false);

                entity.Property(e => e.SellerName).IsUnicode(false);

                entity.Property(e => e.SerialNo).IsUnicode(false);

                entity.Property(e => e.VehicleName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVehTruckDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_veh_TruckDetails");

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XPlateNumber).IsUnicode(false);

                entity.Property(e => e.XTruckCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVendorBalanceAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VendorBalanceAdjustment");

                entity.Property(e => e.AdjustmentDate).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Netamt).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVendorRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vendor_Request");

                entity.Property(e => e.DQuotationDate).IsUnicode(false);

                entity.Property(e => e.XQuotationNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwVendoradvancepay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vendoradvancepay");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVendoradvpayall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vendoradvpayall");

                entity.Property(e => e.XCode).IsUnicode(false);

                entity.Property(e => e.XReferenceNo).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVoucherAssetLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VoucherAssetLimit");
            });

            modelBuilder.Entity<VwVoucherTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_VoucherTransaction");

                entity.Property(e => e.XAction).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEntryForm).IsUnicode(false);

                entity.Property(e => e.XTransaction).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaAgeingreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_Ageingreport");

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.FileStatusName).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaAppointmentDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_AppointmentDisp");

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.NRefTypeId).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaClientFileStatusDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_ClientFileStatusDetail");

                entity.Property(e => e.EngPointName).IsUnicode(false);

                entity.Property(e => e.FileFolloupDate).IsUnicode(false);

                entity.Property(e => e.FileFolloupNote).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegal).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegalCode).IsUnicode(false);

                entity.Property(e => e.NParalegalUser).IsUnicode(false);

                entity.Property(e => e.OtherPointName).IsUnicode(false);

                entity.Property(e => e.QaliPointName).IsUnicode(false);

                entity.Property(e => e.StageDescription).IsUnicode(false);

                entity.Property(e => e.StateName).IsUnicode(false);

                entity.Property(e => e.SubClassName).IsUnicode(false);

                entity.Property(e => e.WorkPointName).IsUnicode(false);

                entity.Property(e => e.XAnzscoCode).IsUnicode(false);

                entity.Property(e => e.XAuthority).IsUnicode(false);

                entity.Property(e => e.XConsultantCode).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNote1).IsUnicode(false);

                entity.Property(e => e.XNote2).IsUnicode(false);

                entity.Property(e => e.XNote3).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);

                entity.Property(e => e.XParalegalCode).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XStatusNote).IsUnicode(false);

                entity.Property(e => e.XVsaBcc).IsUnicode(false);

                entity.Property(e => e.XVsaTrnno).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaConsultantDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_ConsultantDisp");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XConsultantCode).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaCvRegistrationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_CV_Registration_Disp");

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XContry).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseName).IsUnicode(false);

                entity.Property(e => e.XSpouseProfession).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XStatusDescription).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_DashBoard");

                entity.Property(e => e.Age).IsUnicode(false);

                entity.Property(e => e.AppConsultantCode).IsUnicode(false);

                entity.Property(e => e.AppConsultantName).IsUnicode(false);

                entity.Property(e => e.AppointmentDesc).IsUnicode(false);

                entity.Property(e => e.ConsultantUser).IsUnicode(false);

                entity.Property(e => e.DAppointmentDate).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDob).IsUnicode(false);

                entity.Property(e => e.DFollowUpDate).IsUnicode(false);

                entity.Property(e => e.DLastFollowupDate).IsUnicode(false);

                entity.Property(e => e.EngPointName).IsUnicode(false);

                entity.Property(e => e.FileFolloupDate).IsUnicode(false);

                entity.Property(e => e.FileFolloupNote).IsUnicode(false);

                entity.Property(e => e.FileStatusName).IsUnicode(false);

                entity.Property(e => e.FollowConsultantCode).IsUnicode(false);

                entity.Property(e => e.FollowConsultantName).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegal).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegalCode).IsUnicode(false);

                entity.Property(e => e.LastUpdate).IsUnicode(false);

                entity.Property(e => e.NParalegalUser).IsUnicode(false);

                entity.Property(e => e.OtherPointName).IsUnicode(false);

                entity.Property(e => e.QaliPointName).IsUnicode(false);

                entity.Property(e => e.StageDescription).IsUnicode(false);

                entity.Property(e => e.StateName).IsUnicode(false);

                entity.Property(e => e.StatusDate).IsUnicode(false);

                entity.Property(e => e.SubClassName).IsUnicode(false);

                entity.Property(e => e.WorkPointName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAllStatus).IsUnicode(false);

                entity.Property(e => e.XAnzscoCode).IsUnicode(false);

                entity.Property(e => e.XAuthority).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XContry).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFileDescription).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNote1).IsUnicode(false);

                entity.Property(e => e.XNote2).IsUnicode(false);

                entity.Property(e => e.XNote3).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseName).IsUnicode(false);

                entity.Property(e => e.XSpouseProfession).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XStatusNote).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);

                entity.Property(e => e.XVsaBcc).IsUnicode(false);

                entity.Property(e => e.XVsaTrnno).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaDashBoardAppointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_DashBoardAppointment");

                entity.Property(e => e.Age).IsUnicode(false);

                entity.Property(e => e.AppConsultantCode).IsUnicode(false);

                entity.Property(e => e.AppConsultantName).IsUnicode(false);

                entity.Property(e => e.AppDDate).IsUnicode(false);

                entity.Property(e => e.AppNRefTypeId).IsUnicode(false);

                entity.Property(e => e.AppXDescription).IsUnicode(false);

                entity.Property(e => e.AppXUserId).IsUnicode(false);

                entity.Property(e => e.AppointmentDesc).IsUnicode(false);

                entity.Property(e => e.ConsultantUser).IsUnicode(false);

                entity.Property(e => e.DAppointmentDate).IsUnicode(false);

                entity.Property(e => e.DDate).IsUnicode(false);

                entity.Property(e => e.DDob).IsUnicode(false);

                entity.Property(e => e.DFollowUpDate).IsUnicode(false);

                entity.Property(e => e.EngPointName).IsUnicode(false);

                entity.Property(e => e.FileFolloupDate).IsUnicode(false);

                entity.Property(e => e.FileFolloupNote).IsUnicode(false);

                entity.Property(e => e.FileStatusName).IsUnicode(false);

                entity.Property(e => e.FollowConsultantCode).IsUnicode(false);

                entity.Property(e => e.FollowConsultantName).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegal).IsUnicode(false);

                entity.Property(e => e.FollowUpParalegalCode).IsUnicode(false);

                entity.Property(e => e.LastUpdate).IsUnicode(false);

                entity.Property(e => e.NParalegalUser).IsUnicode(false);

                entity.Property(e => e.OtherPointName).IsUnicode(false);

                entity.Property(e => e.QaliPointName).IsUnicode(false);

                entity.Property(e => e.StageDescription).IsUnicode(false);

                entity.Property(e => e.StateName).IsUnicode(false);

                entity.Property(e => e.StatusDate).IsUnicode(false);

                entity.Property(e => e.SubClassName).IsUnicode(false);

                entity.Property(e => e.WorkPointName).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XAllStatus).IsUnicode(false);

                entity.Property(e => e.XAnzscoCode).IsUnicode(false);

                entity.Property(e => e.XAuthority).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XContry).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFileDescription).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XNote1).IsUnicode(false);

                entity.Property(e => e.XNote2).IsUnicode(false);

                entity.Property(e => e.XNote3).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseName).IsUnicode(false);

                entity.Property(e => e.XSpouseProfession).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusCode).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XStatusNote).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);

                entity.Property(e => e.XVsaBcc).IsUnicode(false);

                entity.Property(e => e.XVsaTrnno).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFileCancel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FileCancel");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFileCreationRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FileCreation_rpt");

                entity.Property(e => e.ContractedDate).IsUnicode(false);

                entity.Property(e => e.FileNo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFileDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FileDisp");

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFileHistoryDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FileHistory_Disp");

                entity.Property(e => e.DEntrydate).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusDescription).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFilePayDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FilePayDetail");

                entity.Property(e => e.FileStatusName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFileDescription).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusNote).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFilePayDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FilePayDisp");

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaFollowUpDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_FollowUpDisp");

                entity.Property(e => e.XConsultantCode).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_History");

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XStatusDescription).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XUserId).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaOccupationDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_Occupation_Disp");

                entity.Property(e => e.NOccupationCode).IsUnicode(false);

                entity.Property(e => e.XAnzscoCode).IsUnicode(false);

                entity.Property(e => e.XAuthority).IsUnicode(false);

                entity.Property(e => e.XOccupation).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaParalegalDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_ParalegalDisp");

                entity.Property(e => e.XBranchCode).IsUnicode(false);

                entity.Property(e => e.XBranchName).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XParalegalCode).IsUnicode(false);

                entity.Property(e => e.XParalegalName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaPaymentdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vsa_paymentdetails");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.TaxCategory).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);

                entity.Property(e => e.XReceiptNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaPaymentdetailsDefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Vsa_paymentdetails_Default");

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XItemCode).IsUnicode(false);

                entity.Property(e => e.XItemName).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaRegistrationStatusDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_RegistrationStatusDetail");

                entity.Property(e => e.AppointmentDesc).IsUnicode(false);

                entity.Property(e => e.ConsultantUser).IsUnicode(false);

                entity.Property(e => e.FConsultantCode).IsUnicode(false);

                entity.Property(e => e.FConsultantName).IsUnicode(false);

                entity.Property(e => e.FollowupDesc).IsUnicode(false);

                entity.Property(e => e.XAddress).IsUnicode(false);

                entity.Property(e => e.XConsultantCode).IsUnicode(false);

                entity.Property(e => e.XConsultantName).IsUnicode(false);

                entity.Property(e => e.XContry).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPlace).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseName).IsUnicode(false);

                entity.Property(e => e.XSpouseProfession).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XStatusDescription).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaWebDashBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_WebDashBoard");

                entity.Property(e => e.Dob).IsUnicode(false);

                entity.Property(e => e.ResumePath).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseOccupation).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);
            });

            modelBuilder.Entity<VwVsaWebFileStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_vsa_web_FileStatus");

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XStageName).IsUnicode(false);

                entity.Property(e => e.XStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<VwWarehouseDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Warehouse_Dashboard");

                entity.Property(e => e.DExpDelDate).IsUnicode(false);

                entity.Property(e => e.EntryScreen).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.NCashReceived).IsUnicode(false);

                entity.Property(e => e.NDiscountAmt).IsUnicode(false);

                entity.Property(e => e.NDueDays).IsUnicode(false);

                entity.Property(e => e.NNetAmt).IsUnicode(false);

                entity.Property(e => e.XCustomerName).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XOrderNo).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XPrsno).IsUnicode(false);

                entity.Property(e => e.XPurchaseOrderNo).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebApprovalActionDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_web_ApprovalAction_Disp");

                entity.Property(e => e.XActionDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebApprovalDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebApprovalDashboard");

                entity.Property(e => e.DVacDateFrom).IsUnicode(false);

                entity.Property(e => e.DVacDateTo).IsUnicode(false);

                entity.Property(e => e.NVacRemain).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XForwardBy).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacDateFrom).IsUnicode(false);

                entity.Property(e => e.XVacDateTo).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);

                entity.Property(e => e.XVacationCode).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebApprovalDashboardHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebApprovalDashboardHistory");

                entity.Property(e => e.NVacRemain).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XForwardBy).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XTransCode).IsUnicode(false);

                entity.Property(e => e.XTransType).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacDateFrom).IsUnicode(false);

                entity.Property(e => e.XVacDateTo).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebMyTeamList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Web_MyTeamList");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XNationality).IsUnicode(false);

                entity.Property(e => e.XPhone1).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPayEmployeeDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebPayEmployee_Disp");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPayEmployeeUserProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebPayEmployeeUserProfile");

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPayEmpoyeeSalaryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebPayEmpoyeeSalaryDetails");

                entity.Property(e => e.XDescriptionLocale).IsUnicode(false);

                entity.Property(e => e.XSalaryName).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPayNewsDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Web_PayNews_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPayNoticeBoardDisp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Web_PayNoticeBoard_Disp");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPaySupervisorEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebPaySupervisorEmail");

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XSupervisorEmailId).IsUnicode(false);

                entity.Property(e => e.XSupervisorEmpCode).IsUnicode(false);

                entity.Property(e => e.XSupervisorEmpNme).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebPaySupervisorEmployeeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebPaySupervisorEmployeeList");

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XRequestNo).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwWebVacApprovalDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WebVacApprovalDashboard");

                entity.Property(e => e.NVacRemain).IsUnicode(false);

                entity.Property(e => e.XContactNo).IsUnicode(false);

                entity.Property(e => e.XDepartment).IsUnicode(false);

                entity.Property(e => e.XEmailId).IsUnicode(false);

                entity.Property(e => e.XEmpCode).IsUnicode(false);

                entity.Property(e => e.XEmpName).IsUnicode(false);

                entity.Property(e => e.XFileName).IsUnicode(false);

                entity.Property(e => e.XForwardBy).IsUnicode(false);

                entity.Property(e => e.XIqamaNo).IsUnicode(false);

                entity.Property(e => e.XPassportNo).IsUnicode(false);

                entity.Property(e => e.XPosition).IsUnicode(false);

                entity.Property(e => e.XSex).IsUnicode(false);

                entity.Property(e => e.XStatus).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<VwWorkOrderList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WorkOrderList");

                entity.Property(e => e.XCategoryName).IsUnicode(false);

                entity.Property(e => e.XDisplayName).IsUnicode(false);

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XPkeyCode).IsUnicode(false);

                entity.Property(e => e.XProjectCode).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);
            });

            modelBuilder.Entity<VwWorkOrderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WorkOrderSearch");

                entity.Property(e => e.DOrderDate).IsUnicode(false);

                entity.Property(e => e.NBillAmt).IsUnicode(false);

                entity.Property(e => e.XNotes).IsUnicode(false);

                entity.Property(e => e.XProjectName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);

                entity.Property(e => e.XWorkOrderNo).IsUnicode(false);
            });

            modelBuilder.Entity<VwWorkOrderVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WorkOrderVendor");

                entity.Property(e => e.XLocationName).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVendorCode).IsUnicode(false);

                entity.Property(e => e.XVendorName).IsUnicode(false);
            });

            modelBuilder.Entity<WebOnlineUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.XEntryType).IsUnicode(false);

                entity.Property(e => e.XPkeyName).IsUnicode(false);

                entity.Property(e => e.XTableName).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayApprovalSystem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntryDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XApprovalCode).IsUnicode(false);

                entity.Property(e => e.XApprovalDescription).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayApprovalSystemDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayEmployeeLogin>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XPassword).IsUnicode(false);

                entity.Property(e => e.XUserName).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayLoanIssue>(entity =>
            {
                entity.Property(e => e.NLoanTransId).ValueGeneratedNever();

                entity.Property(e => e.XBankName).IsUnicode(false);

                entity.Property(e => e.XChequeNo).IsUnicode(false);

                entity.Property(e => e.XPaymentmethod).IsUnicode(false);

                entity.Property(e => e.XRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayNews>(entity =>
            {
                entity.HasKey(e => e.NNewsId)
                    .HasName("PK_Pay_News");

                entity.Property(e => e.NNewsId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNewsCode).IsUnicode(false);

                entity.Property(e => e.XNewsDesc).IsUnicode(false);

                entity.Property(e => e.XNewsImageName).IsUnicode(false);

                entity.Property(e => e.XNewsTitle).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayNoticeBoard>(entity =>
            {
                entity.HasKey(e => e.NNoticeBoardId)
                    .HasName("PK_Table_2");

                entity.Property(e => e.NNoticeBoardId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XNbdesc).IsUnicode(false);

                entity.Property(e => e.XNbtitle).IsUnicode(false);

                entity.Property(e => e.XNoticeBoardCode).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayVacationRequest>(entity =>
            {
                entity.HasKey(e => e.NVacRequestId)
                    .HasName("PK_Pay_VacationRequest");

                entity.Property(e => e.NVacRequestId).ValueGeneratedNever();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NHrcomments).IsUnicode(false);

                entity.Property(e => e.NVacContact).IsUnicode(false);

                entity.Property(e => e.XVacApprovedComments).IsUnicode(false);

                entity.Property(e => e.XVacRemarks).IsUnicode(false);
            });

            modelBuilder.Entity<WebPayVacationStatus>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEntrydate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XVacStatusDesc).IsUnicode(false);
            });

            modelBuilder.Entity<WebVsaCvRegistration>(entity =>
            {
                entity.Property(e => e.NRegId).ValueGeneratedNever();

                entity.Property(e => e.ResumePath).IsUnicode(false);

                entity.Property(e => e.XEmail).IsUnicode(false);

                entity.Property(e => e.XMobileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);

                entity.Property(e => e.XProfession).IsUnicode(false);

                entity.Property(e => e.XQualification).IsUnicode(false);

                entity.Property(e => e.XRegCode).IsUnicode(false);

                entity.Property(e => e.XSpouseOccupation).IsUnicode(false);

                entity.Property(e => e.XSpouseQualification).IsUnicode(false);

                entity.Property(e => e.XSpouseUniversity).IsUnicode(false);

                entity.Property(e => e.XUniversity).IsUnicode(false);
            });

            modelBuilder.Entity<WebVwPayLoanIssueStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("web_vw_PayLoanIssue_Status");

                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.DLoanPeriodFrom).IsUnicode(false);

                entity.Property(e => e.DLoanPeriodTo).IsUnicode(false);

                entity.Property(e => e.EmployeeNo).IsUnicode(false);

                entity.Property(e => e.IssueDate).IsUnicode(false);

                entity.Property(e => e.LoanAmount).IsUnicode(false);

                entity.Property(e => e.LoanId).IsUnicode(false);

                entity.Property(e => e.NInstallments).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);
            });

            modelBuilder.Entity<WwPayAccruedCodeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ww_PayAccruedCodeList");

                entity.Property(e => e.PeriodName).IsUnicode(false);

                entity.Property(e => e.StartTypeName).IsUnicode(false);

                entity.Property(e => e.XPeriod)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.XType).IsUnicode(false);

                entity.Property(e => e.XTypeCode).IsUnicode(false);

                entity.Property(e => e.XTypeName).IsUnicode(false);

                entity.Property(e => e.XVacCode).IsUnicode(false);

                entity.Property(e => e.XVacType).IsUnicode(false);
            });

            modelBuilder.Entity<WwVsaFileCancel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ww_vsa_FileCancel");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.XCancelNo).IsUnicode(false);

                entity.Property(e => e.XDescription).IsUnicode(false);

                entity.Property(e => e.XFileCode).IsUnicode(false);

                entity.Property(e => e.XFileNo).IsUnicode(false);

                entity.Property(e => e.XName).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
